@page "/reports-page"
@using Jamper_Financial.Shared.Services
@using Jamper_Financial.Shared.Utilities
@using Jamper_Financial.Shared.Data
@using Jamper_Financial.Shared.Models  
@using System.Text
@using Microsoft.Data.Sqlite
@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject UserStateService UserStateService

@code {
    [CascadingParameter] private Action<string> SetPageTitle { get; set; }

    // TOGGLES FOR MODALS
    private bool showCreateReportModal = false;
    private bool showResultsModal = false;
    private bool showCurrentMonthExpensesModal = false;
    private bool showCurrentMonthSavingsModal = false;

    // USER-SELECTED FILTERS
    private List<string> selectedCategories = new List<string>();
    private List<string> selectedAccountIds = new List<string>();
    private bool useLast6Months = true;
    private DateTime fromDate = DateTime.Now.AddMonths(-6);
    private DateTime toDate = DateTime.Now;

    // VALIDATION ERRORS
    private string categoryError = string.Empty;
    private string dateError = string.Empty;

    // TRANSACTIONS (FOR CURRENT USER)
    private List<Transaction> transactions = new List<Transaction>();
    private List<Transaction> filteredTransactions = new List<Transaction>();

    // USER LINKED ACCOUNTS & CATEGORIES
    private List<BankAccount> userAccounts = new List<BankAccount>();
    private List<Category> userCategories = new List<Category>();

    // REPORT FIELDS
    private string reportName = string.Empty;
    private string reportDescription = string.Empty;

    // CALCULATED TOTALS
    private decimal totalDebit => filteredTransactions.Where(t => t.TransactionType == "e").Sum(t => t.Amount);
    private decimal totalCredit => filteredTransactions.Where(t => t.TransactionType == "i").Sum(t => t.Amount);

    private DateTime? ComputeNextDueDate(Transaction t)
    {
        if (string.IsNullOrEmpty(t.Frequency))
            return null;
        if (t.Frequency.ToLower() == "monthly")
            return t.Date.AddMonths(1);
        if (t.Frequency.ToLower() == "yearly")
            return t.Date.AddYears(1);
        return null;
    }

    protected override async Task OnInitializedAsync()
    {
        int userId = UserStateService.UserId;
        SetPageTitle("Reports");

        var allFromDb = await TransactionHelper.GetTransactionsAsync(userId);
        transactions = allFromDb.ToList();
        filteredTransactions = transactions;

        await LoadUserAccountsAsync(userId);
        userCategories = DatabaseHelper.GetCategories(userId);
    }

    private async Task LoadUserAccountsAsync(int userId)
    {
        var accounts = new List<BankAccount>();
        using (var connection = DatabaseHelper.GetConnection())
        {
            await connection.OpenAsync();
            string query = "SELECT AccountID, AccountName, AccountTypeID, Balance, AccountNumber FROM Accounts WHERE UserID = @UserID";
            using (var command = new SqliteCommand(query, connection))
            {
                command.Parameters.AddWithValue("@UserID", userId);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        accounts.Add(new BankAccount
                        {
                            AccountId = reader.GetInt32(reader.GetOrdinal("AccountID")),
                            AccountName = reader.GetString(reader.GetOrdinal("AccountName")),
                            AccountTypeID = reader.GetInt32(reader.GetOrdinal("AccountTypeID")),
                            Balance = (int)reader.GetDecimal(reader.GetOrdinal("Balance")),
                            AccountNumber = reader.GetInt32(reader.GetOrdinal("AccountNumber")).ToString()
                        });
                    }
                }
            }
        }
        userAccounts = accounts;
    }

    private void OpenCreateReportModal()
    {
        showCreateReportModal = true;
        categoryError = string.Empty;
        dateError = string.Empty;
        selectedAccountIds = new List<string>();
    }
    private void CloseCreateReportModal() => showCreateReportModal = false;

    private void OpenResultsModal() => showResultsModal = true;
    private void CloseResultsModal() => showResultsModal = false;

    private void ViewReport()
    {
        if (useLast6Months)
        {
            fromDate = DateTime.Now.AddMonths(-6);
            toDate = DateTime.Now;
        }
        if (!ValidateCategories() || !ValidateDates())
            return;

        var selectedAccountIdsInt = selectedAccountIds
            .Where(id => id != "All")
            .Select(id => int.Parse(id))
            .ToList();

        filteredTransactions = transactions
            .Where(t =>
                   (selectedAccountIds.Count == 0 || selectedAccountIds.Contains("All") || selectedAccountIdsInt.Contains(t.AccountID)) &&
                   (selectedCategories.Count == 0 || selectedCategories.Contains("All") || selectedCategories.Contains(t.CategoryID.ToString())) &&
                   (t.Date >= fromDate && t.Date <= toDate))
            .OrderByDescending(t => t.Date)
            .ToList();

        CloseCreateReportModal();
        OpenResultsModal();
    }

    private void ViewCurrentMonthExpenses()
    {
        var currentMonth = DateTime.Now.Month;
        var currentYear = DateTime.Now.Year;
        filteredTransactions = transactions
            .Where(t => t.Date.Month == currentMonth && t.Date.Year == currentYear && t.TransactionType == "e")
            .OrderByDescending(t => t.Date)
            .ToList();
        showCurrentMonthExpensesModal = true;
    }

    private void ViewCurrentMonthSavings()
    {
        var currentMonth = DateTime.Now.Month;
        var currentYear = DateTime.Now.Year;
        filteredTransactions = transactions
            .Where(t => t.Date.Month == currentMonth && t.Date.Year == currentYear && t.TransactionType == "i")
            .OrderByDescending(t => t.Date)
            .ToList();
        showCurrentMonthSavingsModal = true;
    }

    private bool ValidateCategories()
    {
        if (selectedCategories.Count == 0)
        {
            categoryError = "Please select at least one category.";
            return false;
        }
        categoryError = string.Empty;
        return true;
    }
    private bool ValidateDates()
    {
        if (toDate < fromDate)
        {
            dateError = "The 'To' date cannot be before the 'From' date.";
            return false;
        }
        dateError = string.Empty;
        return true;
    }
    private void OnFromDateChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var newDate))
            fromDate = newDate;
        ValidateDates();
    }
    private void OnToDateChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var newDate))
            toDate = newDate;
        ValidateDates();
    }
    private void OnCategoriesChange(ChangeEventArgs e)
    {
        var selectedOptions = (e.Value as IEnumerable<string>)?.ToList() ?? new List<string>();
        selectedCategories = selectedOptions;
        ValidateCategories();
    }
    private void OnAccountsChange(ChangeEventArgs e)
    {
        var selectedOptions = (e.Value as IEnumerable<string>)?.ToList() ?? new List<string>();
        selectedAccountIds = selectedOptions;
    }
    private bool CanViewReport => string.IsNullOrEmpty(categoryError) && string.IsNullOrEmpty(dateError);

    private void GoBackToFilters()
    {
        showResultsModal = false;
        showCreateReportModal = true;
    }

    private void ExportToCsv()
    {
        if (useLast6Months)
        {
            fromDate = DateTime.Now.AddMonths(-6);
            toDate = DateTime.Now;
        }
        var catParam = string.Join(",", selectedCategories);
        var acctParam = string.Join(",", selectedAccountIds);
        var url = $"/export/csv?reportType=custom" +
                  $"&userId={UserStateService.UserId}" +
                  $"&reportName={Uri.EscapeDataString(reportName)}" +
                  $"&description={Uri.EscapeDataString(reportDescription)}" +
                  $"&fromDate={fromDate:o}&toDate={toDate:o}" +
                  $"&categories={Uri.EscapeDataString(catParam)}" +
                  $"&accounts={Uri.EscapeDataString(acctParam)}";
        NavigationManager.NavigateTo(url, forceLoad: true);
    }
    private void ExportToPdf()
    {
        if (useLast6Months)
        {
            fromDate = DateTime.Now.AddMonths(-6);
            toDate = DateTime.Now;
        }
        var catParam = string.Join(",", selectedCategories);
        var acctParam = string.Join(",", selectedAccountIds);
        var url = $"/export/pdf?reportType=custom" +
                  $"&userId={UserStateService.UserId}" +
                  $"&reportName={Uri.EscapeDataString(reportName)}" +
                  $"&description={Uri.EscapeDataString(reportDescription)}" +
                  $"&fromDate={fromDate:o}&toDate={toDate:o}" +
                  $"&categories={Uri.EscapeDataString(catParam)}" +
                  $"&accounts={Uri.EscapeDataString(acctParam)}";
        NavigationManager.NavigateTo(url, forceLoad: true);
    }

    private void ExportCurrentMonthCsv(string reportType)
    {
        DateTime now = DateTime.Now;
        DateTime firstDay = new DateTime(now.Year, now.Month, 1);
        DateTime lastDay = firstDay.AddMonths(1).AddDays(-1);
        var catParam = "All";

        string monthName = now.ToString("MMMM");
        string dynamicReportName = reportType == "monthlyExpenses"
            ? $"Expense Report for Month of {monthName}"
            : $"Savings Report for Month of {monthName}";

        var url = $"/export/csv?reportType={reportType}" +
                  $"&userId={UserStateService.UserId}" +
                  $"&reportName={Uri.EscapeDataString(dynamicReportName)}" +
                  $"&description=Auto%20Generated%20Monthly%20Report" +
                  $"&fromDate={firstDay:o}&toDate={lastDay:o}" +
                  $"&categories={catParam}";
        NavigationManager.NavigateTo(url, forceLoad: true);
    }
    private void ExportCurrentMonthPdf(string reportType)
    {
        DateTime now = DateTime.Now;
        DateTime firstDay = new DateTime(now.Year, now.Month, 1);
        DateTime lastDay = firstDay.AddMonths(1).AddDays(-1);
        var catParam = "All";

        string monthName = now.ToString("MMMM");
        string dynamicReportName = reportType == "monthlyExpenses"
            ? $"Expense Report for Month of {monthName}"
            : $"Savings Report for Month of {monthName}";

        var url = $"/export/pdf?reportType={reportType}" +
                  $"&userId={UserStateService.UserId}" +
                  $"&reportName={Uri.EscapeDataString(dynamicReportName)}" +
                  $"&description=Auto%20Generated%20Monthly%20Report" +
                  $"&fromDate={firstDay:o}&toDate={lastDay:o}" +
                  $"&categories={catParam}";
        NavigationManager.NavigateTo(url, forceLoad: true);
    }

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderMonthlyBudgetChart();
            await RenderMonthlySavingsChart();
        }
    }

    @* MONTHLY EXPENSES CHART *@
    private async Task RenderMonthlyBudgetChart()
    {
        var months = new[]
        {
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        };

        var expenseData = new decimal[12];
        foreach (var trans in transactions)
        {
            if (trans.Date > DateTime.Now) continue;
            if (trans.TransactionType == "e")
            {
                int monthIndex = trans.Date.Month - 1;
                expenseData[monthIndex] += trans.Amount;
            }
        }

        var chartData = new
        {
            labels = months,
            datasets = new[]
            {
                new
                {
                    label = "Monthly Expenses",
                    data = expenseData,
                    backgroundColor = "rgba(75, 192, 192, 0.2)",
                    borderColor = "rgba(75, 192, 192, 1)",
                    borderWidth = 1,
                    borderRadius = 0
                }
            }
        };

        await JS.InvokeVoidAsync("initializeBarChart", "monthlyBudgetChart", chartData);
    }

    @* MONTHLY SAVINGS CHART *@
    private async Task RenderMonthlySavingsChart()
    {
        var months = new[]
        {
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        };

        var incomeData = new decimal[12];
        foreach (var trans in transactions)
        {
            if (trans.Date > DateTime.Now) continue;
            if (trans.TransactionType == "i")
            {
                int monthIndex = trans.Date.Month - 1;
                incomeData[monthIndex] += trans.Amount;
            }
        }

        var chartData = new
        {
            labels = months,
            datasets = new[]
            {
                new
                {
                    label = "Monthly Savings",
                    data = incomeData,
                    backgroundColor = "rgba(153, 102, 255, 0.2)",
                    borderColor = "rgba(153, 102, 255, 1)",
                    borderWidth = 1,
                    borderRadius = 0
                }
            }
        };

        await JS.InvokeVoidAsync("initializeBarChart", "monthlySavingsChart", chartData);
    }
}

<style>
    .reports-page {
        padding: 20px;
        font-family: Arial, sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
    }
    .reports-page .report-container {
        width: 100%;
        max-width: 1200px;
        margin-bottom: 20px;
    }
    .reports-page .export-buttons {
        display: flex;
        gap: 10px;
        margin: 10px 0;
    }
    .reports-page .reports-btn {
        padding: 8px 16px;
        background-color: #62AD41;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s;
        font-weight: 500;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .reports-page .reports-btn:hover {
        background-color: #4e8d34;
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    .reports-page .reports-custom-btn {
        padding: 12px 24px;
        background-color: white;
        color: #62AD41;
        font-size: 18px;
        border: 2px solid #62AD41;
        border-radius: 6px;
        cursor: pointer;
        margin-top: 20px;
        display: block;
        margin-left: auto;
        margin-right: auto;
        transition: all 0.3s;
        font-weight: 600;
    }
    .reports-page .reports-custom-btn:hover {
        background-color: #62AD41;
        color: white;
    }
   
    .reports-page .graph-card {
        border: 1px solid #e0e0e0;
        border-radius: 12px;
        padding: 25px;
        margin: 10px 0;
        height: 320px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        background-color: #ffffff;
    }
   
    .reports-page .graph-card canvas {
        display: block;
        margin: auto;
        width: 100% !important;
        height: 100% !important;
    }
    .reports-page .create-report-modal,
    .reports-page .results-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: rgba(0,0,0,0.5);
        z-index: 9999;
    }
    .reports-page .modal-content {
        background-color: #fff;
        width: 90%;
        max-width: 900px;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        padding: 25px;
        position: relative;
        border: 1px solid #e0e0e0;
    }
    .reports-page .modal-content h3 {
        color: #62AD41;
        margin-bottom: 20px;
        font-size: 1.5em;
        border-bottom: 2px solid #f0f0f0;
        padding-bottom: 10px;
    }
    .reports-page .modal-summary {
        display: flex;
        gap: 20px;
        justify-content: center;
        margin-bottom: 20px;
    }
    .reports-page .summary-item {
        font-weight: bold;
        font-size: 1.2em;
        padding: 10px 20px;
        border-radius: 8px;
    }
    .reports-page .summary-item.negative {
        color: #e74c3c;
        background-color: rgba(231, 76, 60, 0.1);
    }
    .reports-page .summary-item.positive {
        color: #2ecc71;
        background-color: rgba(46, 204, 113, 0.1);
    }
    .reports-page .report-results {
        max-height: 60vh;
        overflow-y: auto;
    }
    .reports-page .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        transition: color 0.3s;
    }
    .reports-page .close:hover {
        color: #62AD41;
    }
    .reports-page .modal-body {
        margin-top: 20px;
    }
    .reports-page .form-group {
        margin-bottom: 15px;
    }
    .reports-page .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 600;
        color: #555;
    }
    .reports-page .form-group input,
    .reports-page .form-group textarea,
    .reports-page .form-group select {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 6px;
        transition: border 0.3s;
        color: #888;
        background-color: #fff;
    }
    .reports-page .form-group ::placeholder {
        color: #888;
    }
    .reports-page .form-group input:not(:placeholder-shown),
    .reports-page .form-group textarea:not(:placeholder-shown) {
        color: #000;
    }
    .reports-page .form-group .multi-select {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 6px;
        background-color: #fff;
        color: #000;
    }
    .reports-page .form-group .date-range {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        gap: 15px;
    }
    .reports-page .form-group .date-range label {
        display: flex;
        align-items: center;
        cursor: pointer;
    }
    .reports-page .form-group .date-range input[type="checkbox"] {
        margin-right: 8px;
        accent-color: #62AD41;
    }
    .reports-page .form-group .date-range .date-inputs {
        display: flex;
        gap: 10px;
        flex: 1;
    }
    .reports-page .error-message {
        color: #e74c3c;
        font-size: 0.9em;
        margin-top: 5px;
    }
    .reports-page .transactions-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin: 15px 0;
    }
    .reports-page .transactions-table th {
        background-color: #62AD41;
        color: white;
        padding: 12px 15px;
        text-align: left;
        font-weight: 600;
    }
    .reports-page .transactions-table td {
        padding: 12px 15px;
        border-bottom: 1px solid #e0e0e0;
        background-color: white;
    }
    .reports-page .transactions-table tr:last-child td {
        border-bottom: none;
    }
    .reports-page .transactions-table tr:hover td {
        background-color: #f5f9f3;
    }
    .reports-page .negative {
        color: #e74c3c;
    }
    .reports-page .positive {
        color: #2ecc71;
    }
    .reports-page .status-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.75em;
        font-weight: 600;
    }
    .reports-page .status-badge.negative {
        background-color: #ffebee;
        color: #c62828;
    }
    .reports-page .status-badge.positive {
        background-color: #e8f5e9;
        color: #2e7d32;
    }
    @@media (max-width: 768px) {
        .reports-page .modal-content {
            width: 95%;
            padding: 15px;
        }
        .reports-page .transactions-table {
            font-size: 0.9em;
        }
        .reports-page .transactions-table th,
        .reports-page .transactions-table td {
            padding: 8px 10px;
        }
        .reports-page .form-group .date-range {
            flex-direction: column;
            align-items: flex-start;
        }
        .reports-page .form-group .date-range .date-inputs {
            width: 100%;
        }
    }
</style>

<div class="reports-page">
    @* EXPENSES REPORT CHART *@
    <div class="report-container">
        <h3>Expenses Report Overview</h3>
        <div class="graph-card">
            <canvas id="monthlyBudgetChart"></canvas>
        </div>
        <div class="export-buttons">
            <button class="reports-btn" @onclick="ViewCurrentMonthExpenses">View Current Month Expenses</button>
        </div>
    </div>

    @* SAVINGS REPORT CHART *@
    <div class="report-container">
        <h3>Savings Report Overview</h3>
        <div class="graph-card">
            <canvas id="monthlySavingsChart"></canvas>
        </div>
        <div class="export-buttons">
            <button class="reports-btn" @onclick="ViewCurrentMonthSavings">View Current Month Savings</button>
        </div>
        <button class="reports-custom-btn" @onclick="OpenCreateReportModal">
            Create Custom Report
        </button>
    </div>

    @* CREATE CUSTOM REPORT MODAL *@
    @if (showCreateReportModal)
    {
        <div class="create-report-modal">
            <div class="modal-content">
                <span class="close" @onclick="CloseCreateReportModal">&times;</span>
                <h3>Create Custom Report</h3>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Enter the name of the report:</label>
                        <input type="text" @bind="reportName" placeholder="Report Name" />
                    </div>
                    <div class="form-group">
                        <label>Select accounts: (use ctrl to multi-select)</label>
                        <select class="multi-select" multiple @onchange="OnAccountsChange">
                            <option value="All">All</option>
                            @foreach (var account in userAccounts)
                            {
                                <option value="@account.AccountId">@account.AccountName</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Select categories: (use ctrl to multi-select)</label>
                        <select class="multi-select" multiple @onchange="OnCategoriesChange">
                            <option value="All">All</option>
                            @foreach (var category in userCategories)
                            {
                                <option value="@category.CategoryID">@category.Name</option>
                            }
                        </select>
                        @if (!string.IsNullOrEmpty(categoryError))
                        {
                            <div class="error-message">@categoryError</div>
                        }
                    </div>
                    <div class="form-group">
                        <label>Date range:</label>
                        <div class="date-range">
                            <label>
                                <input type="checkbox" @bind="useLast6Months" />
                                Last 6 Months
                            </label>
                            <div class="date-inputs">
                                <input type="date" disabled="@useLast6Months"
                                       value="@fromDate.ToString("yyyy-MM-dd")"
                                       @onchange="OnFromDateChange" />
                                <input type="date" disabled="@useLast6Months"
                                       value="@toDate.ToString("yyyy-MM-dd")"
                                       @onchange="OnToDateChange"
                                       min="@fromDate.ToString("yyyy-MM-dd")" />
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(dateError))
                        {
                            <div class="error-message">@dateError</div>
                        }
                    </div>
                    <div class="form-group">
                        <label>Description:</label>
                        <textarea @bind="reportDescription" placeholder="Enter description" rows="3"></textarea>
                    </div>
                    <button class="reports-custom-btn"
                            @onclick="ViewReport"
                            disabled="@(!CanViewReport)">
                        View Report
                    </button>
                </div>
            </div>
        </div>
    }

    @* REPORT RESULTS MODAL FOR CUSTOM REPORTS *@
    @if (showResultsModal)
    {
        <div class="results-modal">
            <div class="modal-content">
                <span class="close" @onclick="CloseResultsModal">&times;</span>
                <h3>Report Results</h3>
                <div class="modal-summary">
                    @if (filteredTransactions.Any(t => t.TransactionType == "e"))
                    {
                        <div class="summary-item negative">
                            Total Expenses: @filteredTransactions.Where(t => t.TransactionType == "e").Sum(t => t.Amount).ToString("C")
                        </div>
                    }
                    @if (filteredTransactions.Any(t => t.TransactionType == "i"))
                    {
                        <div class="summary-item positive">
                            Total Savings: @filteredTransactions.Where(t => t.TransactionType == "i").Sum(t => t.Amount).ToString("C")
                        </div>
                    }
                </div>
                <div style="margin-bottom: 20px; color: #555;">
                    <div><strong>Report Name:</strong> @reportName</div>
                    <div><strong>Description:</strong> @reportDescription</div>
                    <div><strong>Date Range:</strong> @($"{fromDate:dd MMM yyyy}") - @($"{toDate:dd MMM yyyy}")</div>
                </div>
                <div class="report-results">
                    @if (filteredTransactions.Count == 0)
                    {
                        <p>No transactions found for the selected filters.</p>
                    }
                    else
                    {
                        <table class="transactions-table">
                            <thead>
                                <tr>
                                    <th>Description</th>
                                    <th>Date</th>
                                    <th>Amount</th>
                                    <th>Frequency</th>
                                    <th>Next Due</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var t in filteredTransactions)
                                {
                                    <tr>
                                        <td>@t.Description</td>
                                        <td>@t.Date.ToString("dd MMM yyyy")</td>
                                        <td class="@(t.TransactionType == "e" ? "negative" : "positive")">
                                            @t.Amount.ToString("C")
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(t.Frequency))
                                            {
                                                <span class="status-badge @(t.Frequency.ToLower() == "monthly" ? "positive" : "negative")">
                                                    @t.Frequency
                                                </span>
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                        </td>
                                        <td>@(ComputeNextDueDate(t)?.ToString("dd MMM yyyy") ?? "-")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="export-buttons" style="margin-top: 20px;">
                            <button class="reports-btn" @onclick="ExportToCsv">Export to CSV</button>
                            <button class="reports-btn" @onclick="ExportToPdf">Export to PDF</button>
                        </div>
                    }
                    <button class="reports-custom-btn" @onclick="GoBackToFilters" style="margin-top: 20px;">
                        Back to Filters
                    </button>
                </div>
            </div>
        </div>
    }

    @*CURRENT MONTH EXPENSES MODAL*@
    @if (showCurrentMonthExpensesModal)
    {
        <div class="results-modal">
            <div class="modal-content">
                <span class="close" @onclick="() => showCurrentMonthExpensesModal = false">&times;</span>
                <h3>Current Month Expenses</h3>
                <div class="modal-summary">
                    <div class="summary-item negative">
                        Total Expenses: @filteredTransactions.Sum(t => t.Amount).ToString("C")
                    </div>
                </div>
                <div style="margin-bottom: 20px; color: #555;">
                    <div><strong>Month:</strong> @($"{DateTime.Now:MMMM yyyy}")</div>
                </div>
                <div class="report-results">
                    @if (filteredTransactions.Count == 0)
                    {
                        <p>No expense transactions found for the current month.</p>
                    }
                    else
                    {
                        <table class="transactions-table">
                            <thead>
                                <tr>
                                    <th>Description</th>
                                    <th>Date</th>
                                    <th>Amount</th>
                                    <th>Frequency</th>
                                    <th>Next Due</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var t in filteredTransactions)
                                {
                                    <tr>
                                        <td>@t.Description</td>
                                        <td>@t.Date.ToString("dd MMM yyyy")</td>
                                        <td class="negative">@t.Amount.ToString("C")</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(t.Frequency))
                                            {
                                                <span class="status-badge @(t.Frequency.ToLower() == "monthly" ? "positive" : "negative")">
                                                    @t.Frequency
                                                </span>
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                        </td>
                                        <td>@(ComputeNextDueDate(t)?.ToString("dd MMM yyyy") ?? "-")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="export-buttons" style="margin-top: 20px;">
                            <button class="reports-btn" @onclick='() => ExportCurrentMonthCsv("monthlyExpenses")'>
                                Export to CSV
                            </button>
                            <button class="reports-btn" @onclick='() => ExportCurrentMonthPdf("monthlyExpenses")'>
                                Export to PDF
                            </button>
                        </div>
                    }
                    <button class="reports-custom-btn" @onclick="() => showCurrentMonthExpensesModal = false" style="margin-top: 20px;">
                        Close
                    </button>
                </div>
            </div>
        </div>
    }

    @* CURRENT MONTH SAVINGS MODAL *@
    @if (showCurrentMonthSavingsModal)
    {
        <div class="results-modal">
            <div class="modal-content">
                <span class="close" @onclick="() => showCurrentMonthSavingsModal = false">&times;</span>
                <h3>Current Month Savings</h3>
                <div class="modal-summary">
                    <div class="summary-item positive">
                        Total Savings: @filteredTransactions.Sum(t => t.Amount).ToString("C")
                    </div>
                </div>
                <div style="margin-bottom: 20px; color: #555;">
                    <div><strong>Month:</strong> @($"{DateTime.Now:MMMM yyyy}")</div>
                </div>
                <div class="report-results">
                    @if (filteredTransactions.Count == 0)
                    {
                        <p>No savings transactions found for the current month.</p>
                    }
                    else
                    {
                        <table class="transactions-table">
                            <thead>
                                <tr>
                                    <th>Description</th>
                                    <th>Date</th>
                                    <th>Amount</th>
                                    <th>Frequency</th>
                                    <th>Next Due</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var t in filteredTransactions)
                                {
                                    <tr>
                                        <td>@t.Description</td>
                                        <td>@t.Date.ToString("dd MMM yyyy")</td>
                                        <td class="positive">@t.Amount.ToString("C")</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(t.Frequency))
                                            {
                                                <span class="status-badge @(t.Frequency.ToLower() == "monthly" ? "positive" : "negative")">
                                                    @t.Frequency
                                                </span>
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                        </td>
                                        <td>@(ComputeNextDueDate(t)?.ToString("dd MMM yyyy") ?? "-")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="export-buttons" style="margin-top: 20px;">
                            <button class="reports-btn" @onclick='() => ExportCurrentMonthCsv("monthlySavings")'>
                                Export to CSV
                            </button>
                            <button class="reports-btn" @onclick='() => ExportCurrentMonthPdf("monthlySavings")'>
                                Export to PDF
                            </button>
                        </div>
                    }
                    <button class="reports-custom-btn" @onclick="() => showCurrentMonthSavingsModal = false" style="margin-top: 20px;">
                        Close
                    </button>
                </div>
            </div>
        </div>
    }
</div>
