@page "/reports-page"
@using Jamper_Financial.Shared.Services
@using Jamper_Financial.Shared.Utilities
@using Jamper_Financial.Shared.Data
@using Jamper_Financial.Shared.Models  
@using System.Text
@using Microsoft.Data.Sqlite
@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject IJSRuntime JS   // ADDED: JS RUNTIME INJECTION FOR CHARTS
@inject UserStateService UserStateService  // ADDED: FOR CURRENT USER FILTERING

@code {
    [CascadingParameter] private Action<string> SetPageTitle { get; set; }

    // TOGGLES FOR MODALS
    private bool showCreateReportModal = false;
    private bool showResultsModal = false;
    private bool showCurrentMonthExpensesModal = false; // ADDED: For current month expenses modal
    private bool showCurrentMonthSavingsModal = false;  // ADDED: For current month savings modal

    // USER-SELECTED FILTERS
    private List<string> selectedCategories = new List<string>();
    private bool useLast6Months = true;
    private DateTime fromDate = DateTime.Now.AddMonths(-6);
    private DateTime toDate = DateTime.Now;

    // VALIDATION ERRORS
    private string categoryError = string.Empty;
    private string dateError = string.Empty;

    // TRANSACTIONS (FOR CURRENT USER)
    private List<Transaction> transactions = new List<Transaction>();
    private List<Transaction> filteredTransactions = new List<Transaction>();

    // ADDED: USER LINKED ACCOUNTS (Using BankAccount model from LinkedAccount.razor)
    private List<BankAccount> userAccounts = new List<BankAccount>(); // LOADED VIA LoadUserAccountsAsync()
    // ADDED: USER CATEGORIES
    private List<Category> userCategories = new List<Category>();      // LOADED VIA DatabaseHelper.GetCategories(userId)

    // REPORT FIELDS
    private string reportName = string.Empty;
    private string reportDescription = string.Empty;

    // CALCULATED TOTALS
    private decimal totalDebit => filteredTransactions.Where(t => t.TransactionType == "e").Sum(t => t.Amount);
    private decimal totalCredit => filteredTransactions.Where(t => t.TransactionType == "i").Sum(t => t.Amount);

    protected override async Task OnInitializedAsync()
    {
        int userId = UserStateService.UserId;
        @* if (userId <= 0)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        SetPageTitle("Reports"); *@

        // LOAD TRANSACTIONS FOR CURRENT USER
        var allFromDb = await TransactionHelper.GetTransactionsAsync(userId);
        transactions = allFromDb.ToList();
        filteredTransactions = transactions; // DEFAULT: SHOW ALL

        // ADDED: LOAD USER LINKED ACCOUNTS FROM DATABASE
        await LoadUserAccountsAsync(userId);

        // ADDED: LOAD USER CATEGORIES FROM DATABASE
        userCategories = DatabaseHelper.GetCategories(userId);
    }

    // ADDED: METHOD TO LOAD USER ACCOUNTS FROM THE ACCOUNTS TABLE
    private async Task LoadUserAccountsAsync(int userId)
    {
        var accounts = new List<BankAccount>();
        using (var connection = DatabaseHelper.GetConnection())
        {
            await connection.OpenAsync();
            string query = "SELECT AccountID, AccountName, AccountTypeID, Balance, AccountNumber FROM Accounts WHERE UserID = @UserID";
            using (var command = new SqliteCommand(query, connection))
            {
                command.Parameters.AddWithValue("@UserID", userId);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        accounts.Add(new BankAccount
                        {
                            AccountId = reader.GetInt32(reader.GetOrdinal("AccountID")),   // MATCHES model property
                            AccountName = reader.GetString(reader.GetOrdinal("AccountName")),
                            AccountTypeID = reader.GetInt32(reader.GetOrdinal("AccountTypeID")),
                            Balance = (int)reader.GetDecimal(reader.GetOrdinal("Balance")),  // Explicitly cast Balance to int
                            AccountNumber = reader.GetInt32(reader.GetOrdinal("AccountNumber")).ToString()  // Convert to string for display
                        });
                    }
                }
            }
        }
        userAccounts = accounts;
    }

    // -------------------------
    // Create Custom Report Modal
    // -------------------------
    private void OpenCreateReportModal()
    {
        showCreateReportModal = true;
        categoryError = string.Empty;
        dateError = string.Empty;
    }
    private void CloseCreateReportModal() => showCreateReportModal = false;

    // -------------------------
    // Report Results Modal (Custom Report)
    // -------------------------
    private void OpenResultsModal() => showResultsModal = true;
    private void CloseResultsModal() => showResultsModal = false;

    // -------------------------
    // View Report (Custom Report)
    // -------------------------
    private void ViewReport()
    {
        if (useLast6Months)
        {
            fromDate = DateTime.Now.AddMonths(-6);
            toDate = DateTime.Now;
        }
        if (!ValidateCategories() | !ValidateDates())
            return;
        // FILTER TRANSACTIONS BASED ON SELECTED CATEGORIES AND DATE RANGE
        filteredTransactions = transactions
            .Where(t => selectedCategories.Contains("All") || selectedCategories.Contains(t.CategoryID.ToString()))
            .Where(t => t.Date >= fromDate && t.Date <= toDate)
            .ToList();
        CloseCreateReportModal();
        OpenResultsModal();
    }

    // -------------------------
    // View Current Month Expenses Modal
    // -------------------------
    private void ViewCurrentMonthExpenses()
    {
        var currentMonth = DateTime.Now.Month;
        var currentYear = DateTime.Now.Year;
        filteredTransactions = transactions
            .Where(t => t.Date.Month == currentMonth && t.Date.Year == currentYear && t.TransactionType == "e")
            .ToList();
        showCurrentMonthExpensesModal = true;
    }

    // -------------------------
    // View Current Month Savings Modal
    // -------------------------
    private void ViewCurrentMonthSavings()
    {
        var currentMonth = DateTime.Now.Month;
        var currentYear = DateTime.Now.Year;
        filteredTransactions = transactions
            .Where(t => t.Date.Month == currentMonth && t.Date.Year == currentYear && t.TransactionType == "i")
            .ToList();
        showCurrentMonthSavingsModal = true;
    }

    // VALIDATION METHODS
    private bool ValidateCategories()
    {
        if (selectedCategories.Count == 0)
        {
            categoryError = "Please select at least one category.";
            return false;
        }
        categoryError = string.Empty;
        return true;
    }
    private bool ValidateDates()
    {
        if (toDate < fromDate)
        {
            dateError = "The 'To' date cannot be before the 'From' date.";
            return false;
        }
        dateError = string.Empty;
        return true;
    }
    private void OnFromDateChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var newDate))
            fromDate = newDate;
        ValidateDates();
    }
    private void OnToDateChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var newDate))
            toDate = newDate;
        ValidateDates();
    }
    private void OnCategoriesChange(ChangeEventArgs e)
    {
        // UPDATE SELECTED CATEGORIES FROM DROPDOWN VALUE(S)
        var selectedOptions = (e.Value as IEnumerable<string>)?.ToList() ?? new List<string>();
        selectedCategories = selectedOptions;
        ValidateCategories();
    }
    private bool CanViewReport => string.IsNullOrEmpty(categoryError) && string.IsNullOrEmpty(dateError);

    // RETURN FROM "REPORT RESULTS" TO "CREATE CUSTOM REPORT"
    private void GoBackToFilters()
    {
        showResultsModal = false;
        showCreateReportModal = true;
    }

    // -------------------------
    // EXPORT CSV/PDF (UNCHANGED)
    // -------------------------
    private void ExportToCsv()
    {
        if (useLast6Months)
        {
            fromDate = DateTime.Now.AddMonths(-6);
            toDate = DateTime.Now;
        }
        var catParam = string.Join(",", selectedCategories);
        var url = $"/export/csv?reportName={Uri.EscapeDataString(reportName)}" +
                  $"&description={Uri.EscapeDataString(reportDescription)}" +
                  $"&fromDate={fromDate:o}&toDate={toDate:o}" +
                  $"&categories={Uri.EscapeDataString(catParam)}";
        NavigationManager.NavigateTo(url, forceLoad: true);
    }
    private void ExportToPdf()
    {
        if (useLast6Months)
        {
            fromDate = DateTime.Now.AddMonths(-6);
            toDate = DateTime.Now;
        }
        var catParam = string.Join(",", selectedCategories);
        var url = $"/export/pdf?reportName={Uri.EscapeDataString(reportName)}" +
                  $"&description={Uri.EscapeDataString(reportDescription)}" +
                  $"&fromDate={fromDate:o}&toDate={toDate:o}" +
                  $"&categories={Uri.EscapeDataString(catParam)}";
        NavigationManager.NavigateTo(url, forceLoad: true);
    }

    // -------------------------
    // RENDER CHARTS USING REAL DATA
    // -------------------------
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderMonthlyBudgetChart();
            await RenderMonthlySavingsChart();
        }
    }

    // RENDER MONTHLY EXPENSES CHART
    private async Task RenderMonthlyBudgetChart()
    {
        var months = new[]
        {
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        };

        // AGGREGATE EXPENSE DATA FROM REAL TRANSACTIONS
        // CAPSLOCK COMMENT: SKIP TRANSACTIONS WITH A DATE IN THE FUTURE (NOT YET DONE)
        var expenseData = new decimal[12];
        foreach (var trans in transactions)
        {
            if (trans.Date > DateTime.Now) continue; // DO NOT INCLUDE FUTURE TRANSACTIONS
            if (trans.TransactionType == "e")
            {
                int monthIndex = trans.Date.Month - 1;
                expenseData[monthIndex] += trans.Amount;
            }
        }

        var chartData = new
        {
            labels = months,
            datasets = new[]
            {
                new
                {
                    label = "Monthly Expenses",
                    data = expenseData,
                    backgroundColor = "rgba(75, 192, 192, 0.2)",
                    borderColor = "rgba(75, 192, 192, 1)",
                    borderWidth = 1,
                    borderRadius = 0
                }
            }
        };

        await JS.InvokeVoidAsync("initializeBarChart", "monthlyBudgetChart", chartData);
    }

    // RENDER MONTHLY SAVINGS CHART
    private async Task RenderMonthlySavingsChart()
    {
        var months = new[]
        {
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        };

        // AGGREGATE INCOME DATA FROM REAL TRANSACTIONS
        // SKIP FUTURE TRANSACTIONS FOR SAVINGS CHART
        var incomeData = new decimal[12];
        foreach (var trans in transactions)
        {
            if (trans.Date > DateTime.Now) continue; // DO NOT INCLUDE FUTURE TRANSACTIONS
            if (trans.TransactionType == "i")
            {
                int monthIndex = trans.Date.Month - 1;
                incomeData[monthIndex] += trans.Amount;
            }
        }

        var chartData = new
        {
            labels = months,
            datasets = new[]
            {
                new
                {
                    label = "Monthly Savings",
                    data = incomeData,
                    backgroundColor = "rgba(153, 102, 255, 0.2)",
                    borderColor = "rgba(153, 102, 255, 1)",
                    borderWidth = 1,
                    borderRadius = 0
                }
            }
        };

        await JS.InvokeVoidAsync("initializeBarChart", "monthlySavingsChart", chartData);
    }
}

<style>

.reports-page {
    padding: 20px !important;
    font-family: Arial, sans-serif !important;
    display: flex !important;
    flex-direction: column !important;
    align-items: center !important;
    width: 100% !important;
}
.reports-page .report-container {
    width: 100% !important;
    max-width: 1200px !important;
    margin-bottom: 20px !important;
}
.reports-page .export-buttons {
    display: flex !important;
    gap: 10px !important;
    margin: 10px 0 !important;
}
.reports-page .reports-btn {
    padding: 5px 10px !important;
    background-color: #62AD41 !important;
    color: white !important;
    border: none !important;
    border-radius: 5px !important;
    cursor: pointer !important;
    transition: background-color 0.2s !important;
}
.reports-page .reports-btn:hover {
    background-color: #58a93b !important;
}
.reports-page .reports-custom-btn {
    padding: 12px 24px !important;
    background-color: white !important;
    color: #62AD41 !important;
    font-size: 18px !important;
    border: none !important;
    border-radius: 5px !important;
    cursor: pointer !important;
    margin-top: 20px !important;
    display: block !important;
    margin-left: auto !important;
    margin-right: auto !important;
    transition: background-color 0.2s, color 0.2s !important;
}
.reports-page .reports-custom-btn:hover {
    background-color: #62AD41 !important;
    color: #e3f2dc !important;
}
.reports-page .graph-card {
    border: 1px solid #e0e0e0 !important;
    border-radius: 12px !important;
    padding: 25px !important;
    margin: 10px 0 !important;
    height: 250px !important;
    text-align: center !important;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1) !important;
    background-color: #ffffff !important;
}
.reports-page .create-report-modal,
.reports-page .results-modal {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    background-color: rgba(0,0,0,0.5) !important;
    z-index: 9999 !important;
}
.reports-page .modal-content {
    background-color: #fff !important;
    width: 90% !important;
    max-width: 900px !important;
    border-radius: 10px !important;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2) !important;
    padding: 20px !important;
    position: relative !important;
}
.reports-page .create-report-modal .modal-content input,
.reports-page .create-report-modal .modal-content textarea {
    color: #000 !important;
}
.reports-page .create-report-modal .modal-content input::placeholder,
.reports-page .create-report-modal .modal-content textarea::placeholder {
    color: #888 !important;
    opacity: 1 !important;
}
.reports-page .close {
    color: #aaa !important;
    float: right !important;
    font-size: 28px !important;
    font-weight: bold !important;
    cursor: pointer !important;
}
.reports-page .close:hover {
    color: #000 !important;
}
.reports-page .modal-body {
    margin-top: 20px !important;
}
.reports-page .form-group {
    margin-bottom: 15px !important;
}
.reports-page .form-group label {
    display: block !important;
    margin-bottom: 5px !important;
    font-weight: bold !important;
}
.reports-page .form-group input,
.reports-page .form-group select,
.reports-page .form-group textarea {
    width: 100% !important;
    padding: 8px !important;
    border: 1px solid #ccc !important;
    border-radius: 4px !important;
}
/* ADDED: CUSTOM DROPDOWN STYLE */
.reports-page .custom-dropdown {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: url('down-arrow-icon.png');
    background-repeat: no-repeat;
    background-position: right 10px center;
    padding-right: 30px;
}
.reports-page .form-group .multi-select {
    width: 100% !important;
    padding: 8px !important;
    border: 1px solid #ccc !important;
    border-radius: 4px !important;
    background-color: #fff !important;
}
.reports-page .form-group .date-range {
    display: flex !important;
    align-items: center !important;
}
.reports-page .form-group .date-range label {
    display: flex !important;
    align-items: center !important;
    margin-right: 20px !important;
}
.reports-page .form-group .date-range input[type="checkbox"] {
    margin-right: 5px !important;
    position: relative !important;
    top: -2px !important;
}
.reports-page .form-group .date-range .date-inputs {
    display: flex !important;
    gap: 10px !important;
}
.reports-page .form-group .date-range .date-inputs input {
    flex: 1 !important;
}
.reports-page .error-message {
    color: red !important;
    font-size: 0.9em !important;
    margin-top: 5px !important;
}
.reports-page .report-results {
    margin-top: 20px !important;
    width: 100% !important;
    max-width: 1200px !important;
}
.reports-page .transactions-table {
    width: 100% !important;
    border-collapse: collapse !important;
}
.reports-page .transactions-table th,
.reports-page .transactions-table td {
    padding: 10px !important;
    border: 1px solid #ccc !important;
    text-align: left !important;
}
.reports-page .transactions-table th {
    background-color: #f5f5f5 !important;
}
.reports-page .negative {
    color: red !important;
}
.reports-page .positive {
    color: green !important;
}
</style>

<div class="reports-page">
    <!-- EXPENSES REPORT OVERVIEW WITH CHART -->
    <div class="report-container">
        <h3>Expenses Report Overview</h3>
        <div class="graph-card">
            <canvas id="monthlyBudgetChart"></canvas>
        </div>
        <div class="export-buttons">
            <button class="reports-btn" @onclick="ViewCurrentMonthExpenses">View Current Month Expenses</button>
        </div>
    </div>

    <!-- SAVINGS REPORT OVERVIEW WITH CHART -->
    <div class="report-container">
        <h3>Savings Report Overview</h3>
        <div class="graph-card">
            <canvas id="monthlySavingsChart"></canvas>
        </div>
        <div class="export-buttons">
            <button class="reports-btn" @onclick="ViewCurrentMonthSavings">View Current Month Savings</button>
        </div>
        <button class="reports-custom-btn" @onclick="OpenCreateReportModal">
            Create Custom Report
        </button>
    </div>

    <!-- Create Custom Report Modal (UPDATED DROPDOWNS) -->
    @if (showCreateReportModal)
    {
        <div class="create-report-modal">
            <div class="modal-content">
                <span class="close" @onclick="CloseCreateReportModal">&times;</span>
                <h3>Create Custom Report</h3>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Enter the name of the report:</label>
                        <input type="text" @bind="reportName" placeholder="Report Name" />
                    </div>
                    <div class="form-group">
                        <label>Select accounts: (use ctrl to multi-select)</label>
                        <!-- UPDATED: POPULATE ACCOUNTS FROM THE CURRENT USER -->
                        <select class="multi-select custom-dropdown" multiple>
                            <option value="All">All</option>
                            @foreach (var account in userAccounts)
                            {
                                <option value="@account.AccountId">@account.AccountName</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Select categories: (use ctrl to multi-select)</label>
                        <!-- UPDATED: POPULATE CATEGORIES FROM THE CURRENT USER -->
                        <select class="multi-select custom-dropdown" multiple @onchange="OnCategoriesChange">
                            <option value="All">All</option>
                            @foreach (var category in userCategories)
                            {
                                <option value="@category.CategoryID">@category.Name</option>
                            }
                        </select>
                        @if (!string.IsNullOrEmpty(categoryError))
                        {
                            <div class="error-message">@categoryError</div>
                        }
                    </div>
                    <div class="form-group">
                        <label>Date range:</label>
                        <div class="date-range">
                            <label>
                                <input type="checkbox" @bind="useLast6Months" />
                                Last 6 Months
                            </label>
                            <div class="date-inputs">
                                <input type="date" disabled="@useLast6Months"
                                       value="@fromDate.ToString("yyyy-MM-dd")"
                                       @onchange="OnFromDateChange" />
                                <input type="date" disabled="@useLast6Months"
                                       value="@toDate.ToString("yyyy-MM-dd")"
                                       @onchange="OnToDateChange"
                                       min="@fromDate.ToString("yyyy-MM-dd")" />
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(dateError))
                        {
                            <div class="error-message">@dateError</div>
                        }
                    </div>
                    <div class="form-group">
                        <label>Description:</label>
                        <textarea @bind="reportDescription" placeholder="Enter description"></textarea>
                    </div>
                    <button class="reports-custom-btn"
                            @onclick="ViewReport"
                            disabled="@(!CanViewReport)">
                        View Report
                    </button>
                </div>
            </div>
        </div>
    }

    <!-- Report Results Modal (Custom Report) -->
    @if (showResultsModal)
    {
        <div class="results-modal">
            <div class="modal-content">
                <span class="close" @onclick="CloseResultsModal">&times;</span>
                <h3>Report Results</h3>
                <div style="margin-bottom: 15px;">
                    <strong>Report Name:</strong> @reportName <br />
                    <strong>Description:</strong> @reportDescription <br />
                    <strong>Date Range:</strong> @($"{fromDate:dd MMM yyyy}") - @($"{toDate:dd MMM yyyy}")
                </div>
                <div class="report-results">
                    @if (filteredTransactions.Count == 0)
                    {
                        <p>No transactions found for the selected filters.</p>
                    }
                    else
                    {
                        <table class="transactions-table">
                            <thead>
                                <tr>
                                    <th>Description</th>
                                    <th>Category</th>
                                    <th>Date</th>
                                    <th>Debit</th>
                                    <th>Credit</th>
                                    <th>Frequency</th>
                                    <th>End Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var t in filteredTransactions)
                                {
                                    <tr>
                                        <td>@t.Description</td>
                                        <td>@t.CategoryID</td>
                                        <td>@t.Date.ToString("dd MMM yyyy")</td>
                                        <td class="@(t.TransactionType == "e" ? "negative" : "")">
                                            @(t.Amount != 0 ? t.Amount.ToString("C") : "")
                                        </td>
                                        <td class="@(t.TransactionType == "i" ? "positive" : "")">
                                            @(t.Amount != 0 ? t.Amount.ToString("C") : "")
                                        </td>
                                        <td>@(string.IsNullOrEmpty(t.Frequency) ? "" : t.Frequency)</td>
                                        <td>@(t.EndDate.HasValue ? t.EndDate.Value.ToString("dd MMM yyyy") : "")</td>
                                    </tr>
                                }
                                <tr>
                                    <td colspan="3"><strong>Totals:</strong></td>
                                    <td><strong>@totalDebit.ToString("C")</strong></td>
                                    <td><strong>@totalCredit.ToString("C")</strong></td>
                                    <td></td>
                                    <td></td>
                                </tr>
                            </tbody>
                        </table>
                        <div class="export-buttons">
                            <button class="reports-btn" @onclick="ExportToCsv">Export to CSV</button>
                            <button class="reports-btn" @onclick="ExportToPdf">Export to PDF</button>
                        </div>
                    }
                    <button class="reports-custom-btn" @onclick="GoBackToFilters">
                        Back to Filters
                    </button>
                </div>
            </div>
        </div>
    }

    <!--Current Month Expenses Modal -->
    @if (showCurrentMonthExpensesModal)
    {
        <div class="results-modal">
            <div class="modal-content">
                <span class="close" @onclick="() => showCurrentMonthExpensesModal = false">&times;</span>
                <h3>Current Month Expenses</h3>
                <div style="margin-bottom: 15px;">
                    <strong>Month:</strong> @($"{DateTime.Now:MMMM yyyy}")
                </div>
                <div class="report-results">
                    @if (filteredTransactions.Count == 0)
                    {
                        <p>No expense transactions found for the current month.</p>
                    }
                    else
                    {
                        <table class="transactions-table">
                            <thead>
                                <tr>
                                    <th>Description</th>
                                    <th>Category</th>
                                    <th>Date</th>
                                    <th>Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var t in filteredTransactions)
                                {
                                    <tr>
                                        <td>@t.Description</td>
                                        <td>@t.CategoryID</td>
                                        <td>@t.Date.ToString("dd MMM yyyy")</td>
                                        <td class="negative">
                                            @t.Amount.ToString("C")
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    <button class="reports-custom-btn" @onclick="() => showCurrentMonthExpensesModal = false">
                        Close
                    </button>
                </div>
            </div>
        </div>
    }

    <!-- Current Month Savings Modal -->
    @if (showCurrentMonthSavingsModal)
    {
        <div class="results-modal">
            <div class="modal-content">
                <span class="close" @onclick="() => showCurrentMonthSavingsModal = false">&times;</span>
                <h3>Current Month Savings</h3>
                <div style="margin-bottom: 15px;">
                    <strong>Month:</strong> @($"{DateTime.Now:MMMM yyyy}")
                </div>
                <div class="report-results">
                    @if (filteredTransactions.Count == 0)
                    {
                        <p>No savings transactions found for the current month.</p>
                    }
                    else
                    {
                        <table class="transactions-table">
                            <thead>
                                <tr>
                                    <th>Description</th>
                                    <th>Category</th>
                                    <th>Date</th>
                                    <th>Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var t in filteredTransactions)
                                {
                                    <tr>
                                        <td>@t.Description</td>
                                        <td>@t.CategoryID</td>
                                        <td>@t.Date.ToString("dd MMM yyyy")</td>
                                        <td class="positive">
                                            @t.Amount.ToString("C")
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    <button class="reports-custom-btn" @onclick="() => showCurrentMonthSavingsModal = false">
                        Close
                    </button>
                </div>
            </div>
        </div>
    }
</div>
