@page "/bulk-transactions"

@using Jamper_Financial.Shared.Pages.Components;
@using Jamper_Financial.Shared.Utilities
@using Jamper_Financial.Shared.Services
@inject UserStateService UserStateService
@inject TransactionParser TransactionParser;
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@code {
    [CascadingParameter] private Action<string> SetPageTitle { get; set; } = default!;
    private bool norecords = true;
    private bool ShowUploadReceiptsModal = false;
    private List<Transaction> transactions = new List<Transaction>();
    private int currentUserId;

    // Get the base directory of the application (where the executable runs)
    string baseDirectory = "..\\Jamper-Financial.Shared";

    // Combine the base directory with a "temp" folder (you can name it differently)
    string tempDirectory;

    protected override void OnInitialized()
    {
        currentUserId = UserStateService.UserId;
        if (currentUserId <= 0)
        {
            Navigation.NavigateTo("/login");
        }

        SetPageTitle("Bulk Transactions");

        // Get the base directory of the application (where the executable runs)
        baseDirectory = "../Jamper-Financial.Shared";

        // Combine the base directory with a "temp" folder (you can name it differently)
        tempDirectory = Path.Combine(baseDirectory, "temp");

        // Create the temporary directory if it doesn't exist
        Directory.CreateDirectory(tempDirectory);
    }

    public void OpenExcelModal()
    {
        ShowUploadReceiptsModal = true;
        Console.WriteLine("Open Excel Modal");
    }

    public void OpenReceiptsModal()
    {
        ShowUploadReceiptsModal = true;
        Console.WriteLine("Open Receipts Modal");
    }

    private void CloseUploadReceiptsModal()
    {
        ShowUploadReceiptsModal = false;
    }

    private void HandleReceiptsUpload(List<byte[]> uploadedImages)
    {

        Console.WriteLine("Handle Receipts Upload");
        // Process the uploaded receipt images and update the transactions list
        foreach (var image in uploadedImages)
        {
            // Generate a unique filename within the temporary directory
            string tempFileName = Guid.NewGuid().ToString("N") + ".png"; // Or .jpg, etc.
            string tempFilePath = Path.Combine(tempDirectory, tempFileName);

            // Save the image to the temporary file
            File.WriteAllBytes(tempFilePath, image);

            Console.WriteLine($"Temporary file created: {tempFilePath}");

            // Parse a single transaction from the image
            var parsedTransaction = TransactionParser.ParseTransactionsSingleLoop(tempFilePath);
            if (parsedTransaction != null)
            {
                // Set the UserID and TemporaryReceiptFilePath for the parsed transaction
                parsedTransaction.UserID = currentUserId;
                parsedTransaction.TemporaryReceiptFilePath = tempFilePath;

                transactions.Add(parsedTransaction);
            }
        }

        norecords = transactions.Count == 0;

    }

    private void SaveTransactions()
    {
        // Save the transactions to the database
        foreach (var transaction in transactions)
        {
            // Save each transaction to the database
            // TransactionService.SaveTransaction(transaction);
        }
        // Clear the transactions list after saving
        transactions.Clear();
        norecords = true;

        //delete the temporary files
        foreach (var file in Directory.GetFiles(tempDirectory, "*.jpg"))
        {
            File.Delete(file);
        }
    }

    private async void ViewReceipts(Transaction transaction)
    {
        if (transaction.TemporaryReceiptFilePath != null)
        {
            await JSRuntime.InvokeVoidAsync("openInNewTab", transaction.TemporaryReceiptFilePath);
        }
    }

    private void CancelImport()
    {
        // Clear the transactions list and close the modal
        transactions.Clear();
        norecords = true;
        ShowUploadReceiptsModal = false;
        //delete the temporary files
        foreach (var file in Directory.GetFiles(Path.GetTempPath(), "*.jpg"))
        {
            File.Delete(file);
        }
    }
}

<div class="bulktransaction-container">
    <div class="transactions-section">
        <div class="transactions-header">
            <h3 class="section-title">Recent Transactions</h3>
            <div style="display: flex; gap: 10px;">
                <button class="add-viaCsv" @onclick="OpenExcelModal">Import via Excel</button>
                <button class="add-viaReceipt" @onclick="OpenReceiptsModal">Import via Receipts</button>
            </div>
        </div>
    </div>
    <div class="transactions-table scrollable-table">
        <table>
            <thead>
                <tr>
                    @* <th></th> *@
                    <th>Description</th>
                    <th>Transaction Type</th>
                    <th>Account Name</th>
                    <th>Category Name</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Receipt</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
            @if (norecords)
            {
                <tr>
                    <td>No records to import</td>
                </tr>
            }
            else
            {
                foreach (var transaction in transactions)
                {
                    <tr>
                        @* <td><InputCheckbox bind-Value="itemid"></InputCheckbox></td>    *@ 
                        <td>
                            <input type="text" value="@transaction.Description"/>
                        </td>
                        <td>
                            <select id="@transaction.TransactionType" required>
                                <option value="e"> Expense </option>
                                <option value="i"> Income </option>
                            </select>
                        </td>
                        <td>
                            <input type="text" value="@transaction.AccountID" />
                            <div class="form-group">
                                <label for="accountname">Account:</label>
                                @*<select id="accountname" @bind="NewTransaction.AccountID" required>
                                    <option value="">Select Account</option>
                                    @foreach (var account in accounts)
                                    {
                                        <option value="@account.AccountId"> @account.AccountName </option>
                                    }
                                </select>  *@
                            </div>
                        </td>
                        <td>
                            <input type="text" value="@transaction.CategoryID" />
                            <div class="form-group">
                                <label for="category">Category:</label>
                                @* <select id="category" @bind="NewTransaction.CategoryID" required>
                                    <option value=""> Select Category</option>
                                    @foreach (var category in Categories)
                                    {
                                        <option value="@category.CategoryID">@category.Name</option>
                                    }
                                </select>      *@
                            </div>
                        </td>
                        <td>
                            <input type="text" value="@transaction.Date" />
                        </td>
                        <td>
                            <input type="text" value="@transaction.Amount" />
                        </td>
                        <td>
                            <button class="view-receipt" @onclick="() => ViewReceipts(transaction)">View Receipt</button>
                        </td>
                    </tr>
                }
            }
        </table>
    </div>
    @if (!norecords)
    {
        <div class="button-container">
            <div class="save-button-container">
                <button class="save-transactions" @onclick="SaveTransactions">Save Transactions</button>
            </div>
            <div class="cancel-button-container">
                <button class="cancel-button" @onclick="CancelImport">Cancel</button>
            </div>
        </div>
    }
</div>


@* Upload Receipts Modal *@
@if (ShowUploadReceiptsModal)
{
    <UploadReceiptsModal IsVisible="ShowUploadReceiptsModal" OnClose="CloseUploadReceiptsModal" OnCloseWithImages="HandleReceiptsUpload" />
}