@page "/bulk-transactions"

@using Jamper_Financial.Shared.Pages.Components;
@using Jamper_Financial.Shared.Utilities
@using Jamper_Financial.Shared.Services
@using Jamper_Financial.Shared.Models;
@using Jamper_Financial.Shared.Data;
@using System.IO;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.Extensions.Hosting;
@using System.Text

@inject UserStateService UserStateService
@inject TransactionParser TransactionParser;
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IAccountService AccountService
@inject IHostEnvironment Environment

@code {
    [CascadingParameter] private Action<string> SetPageTitle { get; set; } = default!;
    private bool norecords = true;
    private bool ShowUploadReceiptsModal = false;
    private bool ShowUploadCsvModal = false;
    private bool ShowConfirmSaveModal = false;
    private bool isLoading = false;
    private int currentUserId;

    private string tempDirectory = string.Empty;
    private const string TempReceiptsFolderName = "temp-receipts";

    private string errorMessage = string.Empty;

    private string toasterMessage = string.Empty;
    private string toasterClass = string.Empty;

    private List<Category> categories = new();
    private List<BankAccount> accounts = new();
    private List<Transaction> transactions = new List<Transaction>();

    // Pagination
    private int currentPage = 1; // Current page number
    private int pageSize = 10; // Number of transactions per page
    private int totalPages => (int)Math.Ceiling((double)transactions.Count / pageSize);

    private IEnumerable<Transaction> PaginatedTransactions =>
        transactions.Skip((currentPage - 1) * pageSize).Take(pageSize);

    protected override async Task OnInitializedAsync()
    {
        currentUserId = UserStateService.UserId;
        if (currentUserId <= 0)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        SetPageTitle("Bulk Transactions");

        var webRootPath = Environment.ContentRootPath;
        var sharedProjectRoot = Path.GetFullPath(Path.Combine(webRootPath, "..", "Jamper-Financial.Shared"));
        tempDirectory = Path.Combine(sharedProjectRoot, "wwwroot", TempReceiptsFolderName);

        Directory.CreateDirectory(tempDirectory);

        isLoading = true;
        try
        {
            categories = (await DatabaseHelper.LoadUserCategoriesAsync(UserStateService.UserId));
            accounts = await AccountService.GetBankAccounts(UserStateService.UserId);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
            Console.Error.WriteLine(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    public void OpenCsvModal()
    {
        ShowUploadCsvModal = true;
    }

    public void CloseCsvModal()
    {
        ShowUploadCsvModal = false;
    }

    public void OpenReceiptsModal()
    {
        ShowUploadReceiptsModal = true;
    }

    private void CloseUploadReceiptsModal()
    {
        ShowUploadReceiptsModal = false;
    }

    private async Task HandleReceiptsUpload(ReceiptUploadEventArgs args)
    {
        List<byte[]> uploadedImages = args.UploadedImages;
        List<string> fileNames = args.FileNames;

        isLoading = true;
        errorMessage = string.Empty;
        try
        {
            foreach (var i in Enumerable.Range(0, uploadedImages.Count))
            {
                var imageBytes = uploadedImages[i];
                var fileName = fileNames[i];
                var tempFilePath = GetTemporaryFilePath(imageBytes, fileName);
                await ProcessReceiptImage(tempFilePath);
            }
            norecords = !transactions.Any();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error processing receipts: {ex.Message}";
            Console.Error.WriteLine(errorMessage);
            await JSRuntime.InvokeVoidAsync("alert", $"Error processing receipts: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleCsvUpload(CsvUploadEventArgs args)
    {
        isLoading = true;
        try
        {
            var csvContent = Encoding.UTF8.GetString(args.CsvData);
            var newTransactions = CsvParser.ParseCsv(
                csvContent,
                args.AccountId,
                currentUserId,
                args.ColumnMappings,
                args.Delimiter,
                args.AdditionalDateFormats
            );

            transactions.AddRange(newTransactions);
            norecords = !transactions.Any();
        }
        catch (Exception ex)
        {
            errorMessage = $"CSV Error: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetTemporaryFilePath(byte[] fileBytes, string originalFileName)
    {
        var extension = Path.GetExtension(originalFileName);
        var tempFileName = $"{Guid.NewGuid():N}{extension}";
        var tempFilePath = Path.Combine(tempDirectory, tempFileName);
        File.WriteAllBytes(tempFilePath, fileBytes);
        return tempFilePath;
    }

    private async Task ProcessReceiptImage(string imagePath)
    {
        var parsedTransaction = TransactionParser.ParseTransactionsSingleLoop(imagePath);
        if (parsedTransaction != null)
        {
            parsedTransaction.UserID = currentUserId;
            parsedTransaction.TemporaryReceiptFilePath = imagePath;
            parsedTransaction.addItem = true;
            parsedTransaction.IsPaid = true;
            parsedTransaction.HasReceipt = true;
            parsedTransaction.Frequency = "None";
            if (parsedTransaction.Date == DateTime.MinValue)
            {
                parsedTransaction.Date = DateTime.Now;
            }
            transactions.Add(parsedTransaction);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Could not reliably parse transaction from one of the receipts.");
        }
    }

    private async Task SaveTransactionsToDatabase()
    {
        if (!transactions.Any(t => t.addItem))
        {
            toasterMessage = "Please select transactions to save.";
            toasterClass = "error";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;
        try
        {
            var transactionsToSave = transactions.Where(t => t.addItem).ToList();
            foreach (var transaction in transactionsToSave)
            {
                if (transaction.AccountID == 0 || transaction.CategoryID == 0)
                {
                    toasterMessage = "Please select a valid account and category for all transactions.";
                    toasterClass = "error";
                    isLoading = false;
                    StateHasChanged();
                    return;
                }

                await TransactionManager.AddOrUpdateTransactionAsync(transaction, false);
                if (!string.IsNullOrEmpty(transaction.TemporaryReceiptFilePath) && File.Exists(transaction.TemporaryReceiptFilePath))
                {
                    File.Delete(transaction.TemporaryReceiptFilePath);
                }
            }
            transactions.RemoveAll(t => t.addItem);
            norecords = !transactions.Any();
            toasterMessage = "Selected transactions saved successfully!";
            toasterClass = "success";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving transactions: {ex.Message}";
            Console.Error.WriteLine(errorMessage);
            toasterMessage = $"Error saving transactions: {ex.Message}";
            toasterClass = "error";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SaveTransactions()
    {
        ShowConfirmSaveModal = true;
    }

    private async Task ConfirmSave()
    {
        ShowConfirmSaveModal = false;
        await SaveTransactionsToDatabase();
    }

    private async void ViewReceipts(Transaction transaction)
    {
        if (!string.IsNullOrEmpty(transaction.TemporaryReceiptFilePath) && File.Exists(transaction.TemporaryReceiptFilePath))
        {
            var fileName = Path.GetFileName(transaction.TemporaryReceiptFilePath);
            var imageUrl = $"/{TempReceiptsFolderName}/{fileName}";
            await JSRuntime.InvokeVoidAsync("openInNewTab", imageUrl);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Receipt file not found.");
        }
    }

    private void CancelImport()
    {
        transactions.Clear();
        norecords = true;
        ShowUploadReceiptsModal = false;
        CleanupTemporaryFiles();
        StateHasChanged();
    }

    private void CleanupTemporaryFiles()
    {
        try
        {
            if (Directory.Exists(tempDirectory))
            {
                var files = Directory.GetFiles(tempDirectory);
                foreach (var file in files)
                {
                    try
                    {
                        File.Delete(file);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error deleting temporary file {file}: {ex.Message}");
                    }
                }
                if (!Directory.GetFileSystemEntries(tempDirectory).Any())
                {
                    Directory.Delete(tempDirectory, true);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cleaning up temporary files/directory: {ex.Message}");
        }
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    private bool selectAll
    {
        get => transactions.All(t => t.addItem); // Check if all transactions are selected
        set
        {
            foreach (var transaction in transactions)
            {
                transaction.addItem = value; // Update all transactions
            }
        }
    }

    private void ToggleSelectAll()
    {
        selectAll = !selectAll; // Toggle the selectAll state
    }
}

<div class="bulktransaction-container">
    <div class="transactions-section">
        <div class="transactions-header">
            <h3 class="section-title">Bulk Transaction Import</h3>
            <p>Import multiple transactions at once using an Excel file or by uploading receipt images.</p>
            <div style="display: flex; gap: 10px;">
                <button class="add-viaCsv" @onclick="OpenCsvModal">Import via Excel</button>
                <button class="add-viaReceipt" @onclick="OpenReceiptsModal" disabled="@isLoading">Import via Receipts</button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <p>Loading...</p>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="error-message">@errorMessage</p>
    }

    <div class="transactions-table scrollable-table">
        <table>
            <thead>
                <tr>
                    <th @onclick="ToggleSelectAll" class="select-all-header">
                        @(selectAll ? "Deselect All" : "Select All")
                    </th>
                    <th>Description</th>
                    <th>Account</th>
                    <th>Category</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Receipt</th>
                </tr>
            </thead>
            <tbody>
                @if (norecords && !isLoading)
                {
                    <tr>
                        <td colspan="7">No transactions have been imported yet. Use the buttons above to import transactions.</td>
                    </tr>
                }
                else
                {
                    @foreach (var transaction in PaginatedTransactions)
                    {
                        <tr>
                            <td>
                                <InputCheckbox @bind-Value="transaction.addItem" class="checkbox"></InputCheckbox>
                            </td>
                            <td><InputText @bind-Value="transaction.Description" class="form-control" /></td>
                            <td>
                                <InputSelect @bind-Value="transaction.AccountID" class="form-control">
                                    @foreach (var account in accounts)
                                    {
                                        <option value="@account.AccountId">@account.AccountName</option>
                                    }
                                </InputSelect>
                            </td>
                            <td>
                                <InputSelect @bind-Value="transaction.CategoryID" class="form-control">
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.CategoryID">@category.Name</option>
                                    }
                                </InputSelect>
                            </td>
                            <td><InputDate @bind-Value="transaction.Date" class="form-control" /></td>
                            <td><InputNumber @bind-Value="transaction.Amount" step="0.01" class="form-control" /></td>
                            <td>
                                @if (!string.IsNullOrEmpty(transaction.TemporaryReceiptFilePath))
                                {
                                    <button class="view-receipt" @onclick="() => ViewReceipts(transaction)">View</button>
                                }
                            </td>
                        </tr>
                    }

                    @* Add empty rows to ensure the table always has 10 rows *@
                    @for (int i = PaginatedTransactions.Count(); i < pageSize; i++)
                    {
                        <tr>
                            <td colspan="7" class="empty-row"></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <div class="pagination-controls">
        <button @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">Next</button>
    </div>

    @if (!norecords && !isLoading)
    {
        <div class="button-container">
            <div class="save-button-container">
                <button class="save-transactions" @onclick="SaveTransactions">Save Selected Transactions</button>
            </div>
            <div class="cancel-button-container">
                <button class="cancel-button" @onclick="CancelImport">Cancel Import</button>
            </div>
        </div>
    }
</div>

@if (ShowUploadReceiptsModal)
{
    <UploadReceiptsModal IsVisible="ShowUploadReceiptsModal"
                         OnClose="CloseUploadReceiptsModal"
                         OnCloseWithImages="@((ReceiptUploadEventArgs args) => HandleReceiptsUpload(args))" />
}

@if (ShowConfirmSaveModal)
{
    <ConfirmSaveModal IsVisible="ShowConfirmSaveModal"
                      OnClose="@(async (bool isVisible) => ShowConfirmSaveModal = isVisible)"
                      OnConfirm="ConfirmSave" />
}

@if (ShowUploadCsvModal)
{
    <UploadCsvModal IsVisible="ShowUploadCsvModal"
                    OnClose="CloseCsvModal"
                    OnCloseWithData="HandleCsvUpload" />
}

@if (!string.IsNullOrEmpty(toasterMessage))
{
    <div class="toaster @toasterClass">
        <span>@toasterMessage</span>
        <button class="close-toaster" @onclick="ClearToaster">×</button>
    </div>
}

@code {
    private void ClearToaster()
    {
        toasterMessage = string.Empty;
        toasterClass = string.Empty;
    }
}
