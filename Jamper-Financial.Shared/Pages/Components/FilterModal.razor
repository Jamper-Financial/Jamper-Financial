@using System.Globalization
@using Jamper_Financial.Shared.Data
@using Jamper_Financial.Shared.Utilities
@using Jamper_Financial.Shared.Models
@using Jamper_Financial.Shared.Services

@if (ShowFilterDropdown)
{
    <div class="filter-modal" @onclick="OnCloseFilterDropdown">
        <div class="filter-modal-content" @onclick:stopPropagation="true">
            <h3>Filter Transactions</h3>
            <div class="filter-form-group">
                <label for="filterCategory">Category:</label>
                <select id="filterCategory" @bind="Filter.Category">
                    <option value="">All</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.CategoryID">@category.Name</option>
                    }
                </select>
            </div>
            <div class="filter-form-group amount-filter">
                <div>
                    <label for="minAmount">Min Amount:</label>
                    <input id="minAmount" type="number" @bind="Filter.MinAmount" />
                </div>
                <div>
                    <label for="maxAmount">Max Amount:</label>
                    <input id="maxAmount" type="number" @bind="Filter.MaxAmount" />
                </div>
            </div>
            <div class="filter-form-group date-filter">
                <div>
                    <label for="dateFrom">Date From:</label>
                    <input id="dateFrom" type="date" @bind="Filter.DateFrom" />
                </div>
                <div>
                    <label for="dateTo">Date To:</label>
                    <input id="dateTo" type="date" @bind="Filter.DateTo" />
                    
                </div>
            </div>
            <div class="filter-form-group">
                <label for="accountId">Account:</label>
                <select id="accountId" @bind="Filter.AccountId">
                    <option value="">All</option>
                    @foreach (var account in Accounts)
                    {
                        <option value="@account.AccountId">@account.AccountName</option>
                    }
                </select>
            </div>
            <div class="filter-form-group">
                <label for="frequency">Frequency:</label>
                <select id="frequency" @bind="Filter.Frequency">
                    <option value="">All</option>
                    <option value="None">None</option>
                    <option value="Monthly">Monthly</option>
                    <option value="Yearly">Yearly</option>
                </select>
            </div>
            @if (Filter.Frequency != "None" && Filter.Frequency != "")
            {
                <div class="filter-form-group date-filter">
                    <div>
                        <label for="endDateFrom">End Date From:</label>
                        <input id="endDateFrom" type="date" @bind="Filter.EndDateFrom" />
                    </div>
                    <div>
                        <label for="endDateTo">End Date To:</label>
                        <input id="endDateTo" type="date" @bind="Filter.EndDateTo" />
                    </div>
                </div>
            }
            <div class="filter-form-group">
                <label for="hasReceipt">Has Receipt:</label>
                <select id="hasReceipt" @bind="HasReceiptString">
                    <option value="">All</option>
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                </select>
            </div>
            <div class="filter-form-group">
                <label for="isPaid">Is Paid:</label>
                <select id="isPaid" @bind="IsPaidString">
                    <option value="">All</option>
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                </select>
            </div>
            <div class="filter-form-group button-group">
                <button type="button" class="reset" @onclick="ResetFilters">Reset</button>
                <button type="button" class="cancel" @onclick="OnCloseFilterDropdown">Cancel</button>
                <button type="button" class="apply" @onclick="ApplyFilters">Apply</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool ShowFilterDropdown { get; set; }
    [Parameter] public List<Category> Categories { get; set; }
    [Parameter] public List<BankAccount> Accounts { get; set; }
    [Parameter] public List<Transaction> Transactions { get; set; }
    [Parameter] public EventCallback<List<Transaction>> OnFilteredTransactionsChanged { get; set; }
    [Parameter] public EventCallback OnCloseFilterDropdown { get; set; }

    [Parameter] public Filter CurrentFilter { get; set; } = new Filter();

    private Filter Filter { get; set; } = new Filter();

    private string HasReceiptString
    {
        get => Filter.HasReceipt.HasValue
               ? Filter.HasReceipt.Value.ToString().ToLower()
               : string.Empty;
        set => Filter.HasReceipt = string.IsNullOrEmpty(value)
               ? null
               : bool.Parse(value);
    }

    private string IsPaidString
    {
        get => Filter.IsPaid.HasValue
               ? Filter.IsPaid.Value.ToString().ToLower()
               : string.Empty;
        set => Filter.IsPaid = string.IsNullOrEmpty(value)
               ? null
               : bool.Parse(value);
    }

    protected override void OnParametersSet()
    {
        if (ShowFilterDropdown)
        {
            Filter = new Filter()
                {
                    Category = CurrentFilter.Category,
                    MinAmount = CurrentFilter.MinAmount,
                    MaxAmount = CurrentFilter.MaxAmount,
                    DateFrom = CurrentFilter.DateFrom,
                    DateTo = CurrentFilter.DateTo,
                    AccountId = CurrentFilter.AccountId,
                    Frequency = CurrentFilter.Frequency,
                    EndDateFrom = CurrentFilter.EndDateFrom,
                    EndDateTo = CurrentFilter.EndDateTo,
                    HasReceipt = CurrentFilter.HasReceipt,
                    IsPaid = CurrentFilter.IsPaid
                };
        }
        base.OnParametersSet();
    }

    private void ApplyFilters()
    {
        var filteredTransactions = FilterUtilities.ApplyFilters(Transactions, Filter);

        CurrentFilter.Category = Filter.Category;
        CurrentFilter.MinAmount = Filter.MinAmount;
        CurrentFilter.MaxAmount = Filter.MaxAmount;
        CurrentFilter.DateFrom = Filter.DateFrom;
        CurrentFilter.DateTo = Filter.DateTo;
        CurrentFilter.AccountId = Filter.AccountId;
        CurrentFilter.Frequency = Filter.Frequency;
        CurrentFilter.EndDateFrom = Filter.EndDateFrom;
        CurrentFilter.EndDateTo = Filter.EndDateTo;
        CurrentFilter.HasReceipt = Filter.HasReceipt;
        CurrentFilter.IsPaid = Filter.IsPaid;

        OnFilteredTransactionsChanged.InvokeAsync(filteredTransactions);
        OnCloseFilterDropdown.InvokeAsync();
    }

    private void ResetFilters()
    {
        Filter = new Filter();
    }
}
