@using Jamper_Financial.Shared.Models;
@using Jamper_Financial.Shared.Services;
@using Jamper_Financial.Shared.Utilities;
@using Microsoft.AspNetCore.Components.Forms;
@inject IJSRuntime JSRuntime;
@inject IAccountService AccountService;
@inject UserStateService UserStateService

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<CsvUploadEventArgs> OnCloseWithData { get; set; }

    private bool isFileUploaded = false;
    private string errorMessage = string.Empty;
    private byte[]? csvFileData;
    private string? csvFileName;
    private int selectedAccountId = 0;
    private string selectedBank = "RBC";
    private List<BankAccount> accounts = new();
    private readonly List<string> supportedBanks = new() { "RBC", "TD", "Scotiabank", "BMO", "CIBC" };

    protected override async Task OnInitializedAsync()
    {
        accounts = await AccountService.GetBankAccounts(UserStateService.UserId);
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        errorMessage = string.Empty;
        isFileUploaded = false;
        csvFileData = null;

        try
        {
            var file = e.File;
            if (!file.Name.EndsWith(".csv", StringComparison.OrdinalIgnoreCase))
            {
                errorMessage = "Only CSV files are supported.";
                return;
            }

            using var stream = new MemoryStream();
            await file.OpenReadStream(5 * 1024 * 1024).CopyToAsync(stream);
            csvFileData = stream.ToArray();
            csvFileName = file.Name;
            isFileUploaded = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Upload failed: {ex.Message}";
        }
    }

    private async Task UploadCsv()
    {
        if (selectedAccountId == 0)
        {
            errorMessage = "Please select an account";
            return;
        }

        try
        {
            var args = new CsvUploadEventArgs
                {
                    CsvData = csvFileData!,
                    FileName = csvFileName,
                    AccountId = selectedAccountId,
                    BankName = selectedBank
                };
            await OnCloseWithData.InvokeAsync(args);
            await CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }


    private async Task CloseModal() => await OnClose.InvokeAsync();
}

<div class="modal-overlay" @onclick="CloseModal">
    <div class="modal-content" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h3>Import Bank CSV</h3>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label>Bank</label>
                <InputSelect @bind-Value="selectedBank" class="form-control">
                    @foreach (var bank in supportedBanks)
                    {
                        <option value="@bank">@bank</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label>Account</label>
                <InputSelect @bind-Value="selectedAccountId" class="form-control">
                    <option value="0">-- Select Account --</option>
                    @foreach (var account in accounts)
                    {
                        <option value="@account.AccountId">@account.AccountName</option>
                    }
                </InputSelect>
            </div>

            <div id="upload-area" class="upload-area">
                <label for="file-upload" class="upload-label">
                    <img src="/images/folder-icon.png" alt="Folder Icon" />
                    <span>Drag and Drop your CSV here to upload</span>
                </label>
                <InputFile id="file-upload" class="file-upload" OnChange="HandleFileUpload" accept=".csv"/>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">@errorMessage</div>
            }

            <button @onclick="UploadCsv"
                    disabled="@(!isFileUploaded || selectedAccountId == 0)"
                    class="upload-button">
                Import Transactions
            </button>
        </div>
    </div>
</div>