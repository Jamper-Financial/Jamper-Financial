@using Jamper_Financial.Shared.Models;
@using Jamper_Financial.Shared.Services;
@using Jamper_Financial.Shared.Utilities;
@using Microsoft.AspNetCore.Components.Forms;
@using System.Text;
@inject IJSRuntime JSRuntime;
@inject IAccountService AccountService;
@inject UserStateService UserStateService;

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<CsvUploadEventArgs> OnCloseWithData { get; set; }

    private bool isFileUploaded = false;
    private string errorMessage = string.Empty;
    private byte[]? csvFileData;
    private string? csvFileName;
    private int selectedAccountId = 0;
    private List<BankAccount> accounts = new();

    private List<string> csvHeaders = new(); // Holds the headers from the uploaded CSV
    private Dictionary<string, int> columnMappings = new(); // Holds the user-selected column mappings
    private string selectedDelimiter = ","; // Default delimiter
    private string additionalDateFormats = ""; // User-specified additional date formats
    private bool isAmountInverted = false; // New flag for inverted amount column

    protected override async Task OnInitializedAsync()
    {
        accounts = await AccountService.GetBankAccounts(UserStateService.UserId);
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        errorMessage = string.Empty;
        isFileUploaded = false;
        csvFileData = null;

        try
        {
            var file = e.File;
            if (!file.Name.EndsWith(".csv", StringComparison.OrdinalIgnoreCase))
            {
                errorMessage = "Only CSV files are supported.";
                return;
            }

            using var stream = new MemoryStream();
            await file.OpenReadStream(5 * 1024 * 1024).CopyToAsync(stream);
            csvFileData = stream.ToArray();
            csvFileName = file.Name;

            // Extract headers from the CSV
            var csvContent = Encoding.UTF8.GetString(csvFileData);
            csvHeaders = csvContent.Split('\n').FirstOrDefault()?.Split(selectedDelimiter).Select(h => h.Trim()).ToList() ?? new List<string>();

            // Initialize column mappings with default values
            columnMappings = new Dictionary<string, int>
            {
                { "Date", -1 },
                { "Description", -1 },
                { "Amount", -1 },
                { "Debit", -1 },
                { "Credit", -1 }
            };

            isFileUploaded = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Upload failed: {ex.Message}";
        }
    }

    private async Task UploadCsv()
    {
        if (selectedAccountId == 0)
        {
            errorMessage = "Please select an account";
            return;
        }

        // Ensure required columns are mapped
        if (columnMappings["Date"] == -1 || columnMappings["Description"] == -1)
        {
            errorMessage = "Please map the required columns: Date and Description.";
            return;
        }

        if (columnMappings["Amount"] == -1 && (columnMappings["Debit"] == -1 || columnMappings["Credit"] == -1))
        {
            errorMessage = "Please map either the Amount column or both Debit and Credit columns.";
            return;
        }

        try
        {
            var args = new CsvUploadEventArgs
                {
                    CsvData = csvFileData!,
                    FileName = csvFileName,
                    AccountId = selectedAccountId,
                    ColumnMappings = columnMappings,
                    Delimiter = selectedDelimiter,
                    AdditionalDateFormats = additionalDateFormats.Split(',', StringSplitOptions.RemoveEmptyEntries),
                    IsAmountInverted = isAmountInverted // Pass the inverted flag
                };
            await OnCloseWithData.InvokeAsync(args);
            await CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task CloseModal() => await OnClose.InvokeAsync();
}

<div class="modal-overlay">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Import CSV</h3>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label>Account</label>
                <InputSelect @bind-Value="selectedAccountId" class="form-control">
                    <option value="0">-- Select Account --</option>
                    @foreach (var account in accounts)
                    {
                        <option value="@account.AccountId">@account.AccountName</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label>Delimiter</label>
                <InputSelect @bind-Value="selectedDelimiter" class="form-control">
                    <option value=",">Comma (,)</option>
                    <option value=";">Semicolon (;)</option>
                    <option value="\t">Tab</option>
                </InputSelect>
            </div>

            <div class="form-group">
                <label>Additional Date Formats (comma-separated)</label>
                <InputText @bind-Value="additionalDateFormats" class="form-control" placeholder="e.g., dd MMM yyyy, yyyy.MM.dd" />
            </div>

            <div class="form-group">
                <label>Is the Amount column inverted?</label>
                <InputSelect @bind-Value="isAmountInverted" class="form-control">
                    <option value="false">No (Income are positive, Expenses are negative)</option>
                    <option value="true">Yes (Income are negative, Expenses are positive)</option>
                </InputSelect>
            </div>

            <div id="upload-area" class="upload-area">
                <label for="file-upload" class="upload-label">
                    <img src="/images/folder-icon.png" alt="Folder Icon" />
                    <span>Drag and Drop your CSV here to upload</span>
                </label>
                <InputFile id="file-upload" class="file-upload" OnChange="HandleFileUpload" accept=".csv" />
            </div>

            @if (isFileUploaded)
            {
                <div class="form-group">
                    <h4>Map Columns</h4>
                    @foreach (var attribute in columnMappings.Keys.ToList())
                    {
                        if (attribute == "Amount")
                        {
                            <div>
                                <label>@(attribute)</label>
                                <InputSelect @bind-Value="columnMappings[attribute]" class="form-control">
                                    <option value="-1">-- Select Column --</option>
                                    @for (int i = 0; i < csvHeaders.Count; i++)
                                    {
                                        <option value="@i">@csvHeaders[i]</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="or-text">OR</div>
                        }
                        else if (attribute == "Debit" || attribute == "Credit")
                        {
                            <div class="side-by-side">
                                <div>
                                    <label>@(attribute)</label>
                                    <InputSelect @bind-Value="columnMappings[attribute]" class="form-control">
                                        <option value="-1">-- Select Column --</option>
                                        @for (int i = 0; i < csvHeaders.Count; i++)
                                        {
                                            <option value="@i">@csvHeaders[i]</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div>
                                <label>@(attribute)</label>
                                <InputSelect @bind-Value="columnMappings[attribute]" class="form-control">
                                    <option value="-1">-- Select Column --</option>
                                    @for (int i = 0; i < csvHeaders.Count; i++)
                                    {
                                        <option value="@i">@csvHeaders[i]</option>
                                    }
                                </InputSelect>
                            </div>
                        }
                    }
                </div>
            }


            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">@errorMessage</div>
            }

            <div class="button-container">
                <button class="cancel-button" @onclick="CloseModal">Cancel</button>
                <button @onclick="UploadCsv"
                        disabled="@(!isFileUploaded || selectedAccountId == 0)"
                        class="upload-button">
                    Import Transactions
                </button>
            </div>
        </div>
    </div>
</div>

