@using Jamper_Financial.Shared.Data;
@using Jamper_Financial.Shared.Utilities;
@using Jamper_Financial.Shared.Pages.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using Jamper_Financial.Shared.Models;
@using Jamper_Financial.Shared.Services;

@inject IJSRuntime JSRuntime
@inject UserStateService UserStateService
@inject IAccountService AccountService

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public Transaction Transaction { get; set; }

    private IBrowserFile? uploadedFile;
    private string? receiptPreviewUrl;
    private string toasterMessage = string.Empty;
    private string toasterClass = string.Empty;
    private bool showDeleteConfirmation = false;
    private string? errorMessage;
    private List<Category> categories = new();
    private List<BankAccount> accounts = new();

    protected override async Task OnInitializedAsync()
    {
        if (Transaction.HasReceipt == true)
        {
            Console.WriteLine("Transaction has receipt " + Transaction.HasReceipt);
            await GetReceipt();
        }
        categories = (await DatabaseHelper.LoadUserCategoriesAsync(UserStateService.UserId)).ToList();
        accounts = await AccountService.GetBankAccounts(UserStateService.UserId);
    }

    // Inject the TransactionManager service
    private void CloseModal()
    {
        OnClose.InvokeAsync(false);
    }

    // This method is called when the Save button is clicked
    private async Task SaveReceipt()
    {
        if (uploadedFile == null)
        {
            errorMessage = "Please select a file before saving.";
            return;
        }

        if (Transaction != null && uploadedFile != null)
        {
            Console.WriteLine("Saving receipt...");

            // Implement the logic to save the receipt
            Transaction.HasReceipt = true;
            if (await TransactionManager.UpdateReceiptAsync(Transaction, uploadedFile))
            {
                toasterMessage = "Receipt added successfully!";
                toasterClass = "success";
                await GetReceipt();
                errorMessage = null;
            }
            else
            {
                errorMessage = "Failed to save receipt.";
                Console.WriteLine(errorMessage);
                toasterMessage = errorMessage;
                toasterClass = "error";
                await GetReceipt();
            }
        }
    }

    private void ClearToaster()
    {
        toasterMessage = string.Empty;
        toasterClass = string.Empty;
    }

    private async Task GetReceipt()
    {
        Console.WriteLine("Displaying receipt");
        var receiptData = await TransactionManager.GetReceiptAsync(Transaction);
        if (receiptData != null)
        {
            receiptPreviewUrl = $"data:image/png;base64,{Convert.ToBase64String(receiptData.ReceiptFileData)}";
        }
    }

    private async Task OpenReceiptInNewTab()
    {
        if (receiptPreviewUrl != null)
        {
            await JSRuntime.InvokeVoidAsync("openInNewTab", receiptPreviewUrl);
        }
    }

    // This method is called when a file is selected
    private Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        errorMessage = null;
        return Task.CompletedTask;
    }

    private void ShowDeleteConfirmation()
    {
        showDeleteConfirmation = true;
    }

    private void HideDeleteConfirmation()
    {
        showDeleteConfirmation = false;
    }

    private async Task DeleteReceipt()
    {
        if (Transaction != null)
        {
            Console.WriteLine("Deleting receipt...");
            await TransactionHelper.DeleteReceiptAsync(Transaction.TransactionID);
            Transaction.HasReceipt = false;
            receiptPreviewUrl = null;
            uploadedFile = null;
            showDeleteConfirmation = false;
        }
    }
}

@if (IsVisible)
{
    <div class="modal">
        <div class="modal-content">
            <h3>Receipt Details</h3>
            <p><strong>Description:</strong> @Transaction.Description</p>
            <p>
                <strong>Account:</strong> @accounts.FirstOrDefault(c => c.AccountId == Transaction.AccountID)?.AccountName
            </p>
            <p>
                <strong>Category:</strong> @categories.FirstOrDefault(c => c.CategoryID == Transaction.CategoryID)?.Name
            </p>
        <p><strong>Date:</strong> @Transaction.Date.ToString("dd MMM, hh:mm tt")</p>
        <p><strong>Amount:</strong> @((Transaction.Amount > 0 ? Transaction.Amount : Transaction.Amount).ToString("C"))</p>
        @if (Transaction.HasReceipt == true)
        {
            <p>Receipt is available.</p>
            @if (receiptPreviewUrl != null)
            {
                <img src="@receiptPreviewUrl" alt="Receipt" style="max-width: 100%;" @onclick="OpenReceiptInNewTab" />
            }
            <div class="button-container">
                <button class="cancel-button" @onclick="CloseModal">Cancel</button>
                 <button class="delete-button" @onclick="ShowDeleteConfirmation">Delete</button>
            </div>
        }
        else
        {
            <p>No receipt available.</p>
            <InputFile OnChange="HandleFileSelected" />
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p></p>
                <p class="error-message">@errorMessage</p>
            }
            <div class="button-container">
                <button class="cancel-button" @onclick="CloseModal">Cancel</button>
                <button class="save-button" @onclick=" SaveReceipt">Save</button>
            </div>
        }
    </div>
            </div>
}

@if (showDeleteConfirmation)
{
    <div class="modal" @onclick="HideDeleteConfirmation">
        <div class="modal-content" @onclick:stopPropagation="true">
            <h3>Confirm Delete</h3>
            <p>Are you sure you want to delete this receipt?</p>
            <div class="button-container">
                <button class="cancel-button" @onclick="HideDeleteConfirmation">Cancel</button>
                <button class="save-button" @onclick="DeleteReceipt">Yes</button>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(toasterMessage))
{
    <div class="toaster @toasterClass">
        <span>@toasterMessage</span>
        <button class="close-toaster" @onclick="ClearToaster">×</button>
    </div>
}