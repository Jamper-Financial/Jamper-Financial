@using System.Globalization
@using Jamper_Financial.Shared.Data
@using Jamper_Financial.Shared.Utilities
@using Jamper_Financial.Shared.Models
@using Jamper_Financial.Shared.Services

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsEditMode { get; set; }
    [Parameter] public Transaction NewTransaction { get; set; }
    [Parameter] public List<Category> Categories { get; set; }
    [Parameter] public List<BankAccount> Accounts { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    [Parameter] public EventCallback<bool> OnConfirmDelete { get; set; }

    private bool ShowDeleteConfirmation { get; set; } = false;
    private Transaction? _backupTransaction;

    protected override void OnParametersSet()
    {
        if (!IsEditMode && NewTransaction.Frequency == null)
        {
            NewTransaction.Frequency = "None";
        }

        if (IsVisible)
        {
            _backupTransaction = new Transaction
                {
                    TransactionID = NewTransaction.TransactionID,
                    UserID = NewTransaction.UserID,
                    Date = NewTransaction.Date,
                    Description = NewTransaction.Description,
                    Amount = NewTransaction.Amount,
                    CategoryID = NewTransaction.CategoryID,
                    TransactionType = NewTransaction.TransactionType,
                    HasReceipt = NewTransaction.HasReceipt,
                    Frequency = NewTransaction.Frequency,
                    EndDate = NewTransaction.EndDate,
                    AccountID = NewTransaction.AccountID,
                    IsPaid = NewTransaction.IsPaid
                };
        }
    }

    private async Task HandleAddOrEditTransaction()
    {
        if (NewTransaction.Frequency == "None")
        {
            NewTransaction.Frequency = null;
            NewTransaction.EndDate = null;
        }
        await OnSave.InvokeAsync();
        await OnClose.InvokeAsync();
    }

    private void ShowDeleteConfirmationForm()
    {
        ShowDeleteConfirmation = true;
    }

    private void CancelDeleteTransaction()
    {
        ShowDeleteConfirmation = false;
    }

    private async Task ConfirmDeleteTransaction(bool deleteAll)
    {
        await OnConfirmDelete.InvokeAsync(deleteAll);
    }

    private async Task HandleSubmit()
    {
        await HandleAddOrEditTransaction();
    }

    private async Task HandleCancel()
    {
        if (_backupTransaction != null)
        {
            NewTransaction.TransactionID = _backupTransaction.TransactionID;
            NewTransaction.UserID = _backupTransaction.UserID;
            NewTransaction.Date = _backupTransaction.Date;
            NewTransaction.Description = _backupTransaction.Description;
            NewTransaction.Amount = _backupTransaction.Amount;
            NewTransaction.CategoryID = _backupTransaction.CategoryID;
            NewTransaction.TransactionType = _backupTransaction.TransactionType;
            NewTransaction.HasReceipt = _backupTransaction.HasReceipt;
            NewTransaction.Frequency = _backupTransaction.Frequency;
            NewTransaction.EndDate = _backupTransaction.EndDate;
            NewTransaction.AccountID = _backupTransaction.AccountID;
            NewTransaction.IsPaid = _backupTransaction.IsPaid;
        }

        await OnClose.InvokeAsync();
    }
}

@if (IsVisible)
{
    <div class="modal">
        <div class="modal-content">
            @if (ShowDeleteConfirmation)
            {
                @if (NewTransaction.Frequency != null)
                {
                    <h3>Confirm Deletion</h3>
                    <p>This transaction is recurring. Do you want to delete all occurrences or just this one?</p>
                    <div class="form-group button-group">
                        <button type="button" class="save" @onclick="async () => await ConfirmDeleteTransaction(true)">Delete All</button>
                        <button type="button" class="save" @onclick="async () => await ConfirmDeleteTransaction(false)">Delete This One</button>
                        <button type="button" class="cancel" @onclick="CancelDeleteTransaction">Cancel</button>
                    </div>
                }
                else
                {
                    <h3>Confirm Deletion</h3>
                    <p>Are you sure you want to delete this transaction?</p>
                    <div class="form-group button-group">
                        <button type="button" class="save" @onclick="async () => await ConfirmDeleteTransaction(false)">Confirm</button>
                        <button type="button" class="cancel" @onclick="CancelDeleteTransaction">Cancel</button>
                    </div>
                }
            }
            else
            {
                <h3>@(IsEditMode ? "Edit Transaction" : "Add Transaction")</h3>
                <form @onsubmit="HandleSubmit">
                    <div class="form-group">
                        <label for="description">Description:</label>
                        <input id="description" @bind="NewTransaction.Description" required />
                    </div>
                    <div class="form-group">
                        <label for="accountname">Account:</label>
                        <select id="accountname" @bind="NewTransaction.AccountID" required>
                            <option value="">Select Account</option>
                            @foreach (var account in Accounts)
                            {
                                <option value="@account.AccountId"> @account.AccountName </option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="category">Category:</label>
                        <select id="category" @bind="NewTransaction.CategoryID" required>
                            <option value=""> Select Category</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category.CategoryID">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="amount">Amount:</label>
                        <input id="amount" type="number" step="0.01" @bind="NewTransaction.Amount" required />
                    </div>
                    <div class="form-group">
                        <label for="transactionDate">Transaction Date:</label>
                        <input id="transactionDate" type="date" @bind="NewTransaction.Date" required />
                    </div>
                    <div class="form-group">
                        <label for="frequency">Frequency:</label>
                        <select id="frequency" @bind="NewTransaction.Frequency" required>
                            <option value="None">None</option>
                            <option value="Monthly">Monthly</option>
                            <option value="Yearly">Yearly</option>
                        </select>
                    </div>
                    @if (NewTransaction.Frequency != "None" && NewTransaction.Frequency != null)
                    {
                        <div class="form-group">
                            <label for="endDate">End Date:</label>
                            <input id="endDate" type="date" @bind="NewTransaction.EndDate" required/>
                        </div>
                    }
                    <div class="form-group button-group">
                        @if (IsEditMode)
                        {
                            <button type="button" class="delete" @onclick="ShowDeleteConfirmationForm">Delete</button>
                        }
                        <button type="button" class="cancel" @onclick="async () => await HandleCancel()">Cancel</button>
                        <button type="submit" class="@(IsEditMode ? "save" : "add")">@((IsEditMode ? "Save" : "Add"))</button>
                    </div>
                    @if (IsEditMode)
                    {
                        <input type="checkbox" id="isPaid" class="isPaid" @bind="NewTransaction.IsPaid" @bind:event="onchange" />
                        <label for="isPaid">Is Paid</label>
                    }
                </form>
            }
        </div>
    </div>
}
