@using Jamper_Financial.Shared.Models;
@using Jamper_Financial.Shared.Services;
@inject IUserService UserService

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public UserProfile Profile { get; set; }
    [Parameter] public EventCallback<string> OnAvatarSaved { get; set; } // Add this line

    private IBrowserFile? uploadedFile;
    private string toasterMessage = string.Empty;
    private string toasterClass = string.Empty;
    private string? errorMessage;
    private string? previewAvatar;
    private int userid;
    [Inject] IJSRuntime JSRuntime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userid = Profile.UserId;
        if (Profile.ProfilePicture != null)
        {
            Console.WriteLine("Transaction has avatar ");
            await GetAvatar();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeDragAndDrop", "upload-area", "file-upload");
        }
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync(false);
    }

    private async Task SaveAvatar()
    {
        byte[] fileData;
        if (uploadedFile == null)
        {
            errorMessage = "Please select a file before saving.";
            return;
        }

        if (uploadedFile != null)
        {
            Console.WriteLine("Saving avatar...");

            using (var stream = new MemoryStream())
            {
                await uploadedFile.OpenReadStream().CopyToAsync(stream);
                fileData = stream.ToArray();
            }

            // Implement the logic to save the avatar
            if (await UserService.UpdateUserAvatarAsync(Profile, fileData))
            {
                toasterClass = "success";
            }
            else
            {
                toasterClass = "error";
            }

            await OnAvatarSaved.InvokeAsync(toasterClass); // Notify parent component
            await GetAvatar();
            await CloseModal();
        }
    }

    private void ClearToaster()
    {
        toasterMessage = string.Empty;
        toasterClass = string.Empty;
    }

    private async Task GetAvatar()
    {

        Console.WriteLine("Displaying avatar");
        var avatarData = await UserService.GetUserProfileByIdAsync(userid);
        if (avatarData != null && avatarData.ProfilePicture != null)
        {
            previewAvatar = $"data:image/png;base64,{Convert.ToBase64String(avatarData.ProfilePicture)}";
        }
    }

    private Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        errorMessage = null;
        return Task.CompletedTask;
    }
}

@if (IsVisible)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Upload Avatar</h3>
            </div>
            <div class="modal-body">
                <div class="upload-container">
                    <div class="upload-icon">
                        <img src="/images/upload-icon.png" alt="Upload Icon" />
                    </div>
                    <div>
                        <p>File should be 5MB only</p>
                    </div>
                    <div id="upload-area" class="upload-area">
                        <label for="file-upload" class="upload-label">
                            <img src="/images/folder-icon.png" alt="Folder Icon" />
                            <span>Drag and Drop your avatar here to upload</span>
                        </label>
                        <InputFile id="file-upload" OnChange="HandleFileSelected" />
                    </div>
                    <div class="button-container">
                        <button class="cancel-button" @onclick="CloseModal">Cancel</button>
                        <button id="btn-upload" class="save-button" @onclick="SaveAvatar">Save Avatar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@if (!string.IsNullOrEmpty(toasterMessage))
{
    <div class="toaster @toasterClass">
        <span>@toasterMessage</span>
        <button class="close-toaster" @onclick="ClearToaster">×</button>
    </div>
}
