@page "/budget-insights-page"
@using Jamper_Financial.Shared.Models
@using Jamper_Financial.Shared.Services
@using System.Collections.ObjectModel
@using System.Globalization

@inject NavigationManager Navigation
@inject UserStateService UserStateService
@inject IBudgetInsightsService BudgetInsightsService
@inject IUserService UserService
@inject IAccountService AccountService

@code {
    [CascadingParameter] private Action<string>? SetPageTitle { get; set; }
    [CascadingParameter] private Action<bool>? LoadBlazoriseScripts { get; set; }

    private ObservableCollection<BudgetItem> budgetItems = new ObservableCollection<BudgetItem>();
    private string[] currentColors = { "#FF9AA2", "#B5EAD7", "#FFDAC1", "#C7CEEA" };
    private string[] colors = { "#346A46", "#02B098", "#2A9569", "#6BB2C9" };
    private UserProfile userProfile = new UserProfile();

    private List<string> chartLabels = new List<string>();
    private List<decimal> chartData = new List<decimal>();
    private List<string> chartBackgroundColors = new List<string>();

    private List<BankAccount> userAccounts = new List<BankAccount>();  // Instead of List<Account>

    private decimal income;
    private decimal expenses;
    private decimal totalSavings;
    private decimal totalBalance = 0;
    private int chartVersion = 0;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            SetPageTitle?.Invoke("Budget Insights");
            LoadBlazoriseScripts?.Invoke(true);

            int userId = UserStateService.UserId;
            string username = UserStateService.Username;

            if (userId > 0)
            {
                userProfile = await UserService.GetUserProfileByIdAsync(userId);
                userAccounts = await AccountService.GetBankAccounts(userId);

                //DEBUG LOGS
                Console.WriteLine($"Number of accounts loaded: {userAccounts?.Count}");
                if (userAccounts?.Count > 0)
                {
                    Console.WriteLine($"First account: {userAccounts[0].AccountName}, Balance: {userAccounts[0].Balance}");
                }

                await LoadBudgetItemsAsync();
                CalculateStats();
                await UpdateChartData();
            }
            else
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            // Log the exception (if you have a logging mechanism)
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
    }

    private async Task LoadBudgetItemsAsync()
    {
        try
        {
            var items = await BudgetInsightsService.GetBudgetItemsAsync(UserStateService.UserId);
            budgetItems.Clear(); // Important to clear the existing collection
            foreach (var item in items)
            {
                budgetItems.Add(item);
            }

        }
        catch (Exception ex)
        {
            // Log the exception (if you have a logging mechanism)
            Console.WriteLine($"Error in LoadBudgetItemsAsync: {ex.Message}");
        }
    }


    private void CalculateStats()
    {
        income = budgetItems
            .Where(i => i.TransactionType == "i")
            .Sum(i => i.CurrentAmount);

        expenses = budgetItems
            .Where(i => i.TransactionType == "e")
            .Sum(i => i.CurrentAmount);

        // Calculate total balance from all accounts
        totalBalance = userAccounts.Sum(a => a.Balance);

        Console.WriteLine($"Income: {income}, Expenses: {expenses}");
        totalSavings = income + expenses;  // Now using actual account balances

    }


    private string GetFormattedPlannedAmountForInput(BudgetItem item)
    {
        return item.PlannedAmount.ToString("C", CultureInfo.CreateSpecificCulture("en-US"));
    }

    private void OnPlannedAmountInput(BudgetItem item, ChangeEventArgs e)
    {
        Console.WriteLine($"triggres the keypress");
        if (e.Value != null && decimal.TryParse(e.Value.ToString().Replace("$", "").Replace(",", ""), out var result))
        {
            item.PlannedAmount = result;
            Console.WriteLine($"Updated PlannedAmount for {item.Category}: {item.PlannedAmount}");
        }
    }


    private async Task HandleKeyUp(KeyboardEventArgs e, BudgetItem item)
    {
        Console.Write("tner handle key enter");
        if (e.Key == "Enter")
        {
            Console.Write("Inside if:" + item.PlannedAmount);
            await UpdatePlannedAmount(item);
        }
    }

    private async Task UpdatePlannedAmount(BudgetItem item)
    {
        Console.WriteLine($"UpdatePlannedAmount called for category: {item.Category}, raw value: {item.PlannedAmount}");
        if (decimal.TryParse(item.PlannedAmount.ToString().Replace("$", "").Replace(",", ""), out var parsedAmount))
        {
            try
            {
                await BudgetInsightsService.UpdatePlannedAmountAsync(UserStateService.UserId, item.Category, parsedAmount);
                // Optionally reload data to get formatted value from the service
                await LoadBudgetItemsAsync();
                await UpdateChartData();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in UpdatePlannedAmount: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine($"Error: Could not parse '{item.PlannedAmount}' to decimal.");
        }
    }

    private async Task UpdateChartData()
    {
        Console.WriteLine("UpdateChartData() called");

        var expenseItems = budgetItems
            .Where(i => i.TransactionType == "e")
            .ToList();

        var top3Items = expenseItems
            .OrderByDescending(i => i.PlannedAmount)
            .Take(3)
            .ToList();

        var othersAmount = expenseItems
            .OrderByDescending(i => i.PlannedAmount)
            .Skip(3)
            .Sum(i => i.PlannedAmount);

        // Create NEW lists instead of modifying existing ones
        var newLabels = top3Items.Select(i => i.Category).ToList();
        var newData = top3Items.Select(i => i.PlannedAmount).ToList();
        var newColors = colors.Take(newData.Count).ToList();

        if (othersAmount > 0)
        {
            newLabels.Add("Others");
            newData.Add(othersAmount);
            newColors.Add("#CCCCCC");
        }

        // Replace the existing lists with new instances
        chartLabels = newLabels;
        chartData = newData;
        chartBackgroundColors = newColors;

        Console.WriteLine($"Chart Labels: {string.Join(", ", chartLabels)}");
        Console.WriteLine($"Chart Data: {string.Join(", ", chartData)}");

        chartVersion++;
        Console.WriteLine($"Chart version updated to: {chartVersion}");

        // Force UI update
        StateHasChanged();
    }

    public void Dispose()
    {
        LoadBlazoriseScripts?.Invoke(false);
    }
}

<div class="budget-page">
    <div class="dashboard">
        <div class="table-container">
            <h3>Budget Overview</h3>
            <div class="table-wrapper">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th>Planned Amount</th>
                            <th>Current Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in budgetItems.Where(i => i.TransactionType == "e"))
                        {
                            <tr>
                                <td>@item.Category</td>
                                <td class="planned-column">
                                    <input type="text"
                                           @bind="item.PlannedAmount"
                                           @onblur="() => UpdatePlannedAmount(item)"
                                           @onkeyup="(e) => HandleKeyUp(e, item)"
                                           class="form-control" />
                                </td>
                                <td class="current-column">@item.CurrentAmount.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="expense-distribution">
            <h3 class="mb-3">Expense Distribution</h3>
            <div class="flex-container row-direction">
                <div class="chart-container flex-item">
                    <div class="chart-container flex-item">
                        <PieChart @key="@chartVersion"
                                  Labels="chartLabels"
                                  Data="chartData"
                                  BackgroundColors="chartBackgroundColors" />
                    </div>
                </div>
                <div class="stats-container">
                    <ul class="stats-list">
                        <li class="flex-container row-direction">
                            <img class="stat-icon flex-item" src="images/balance-icon.svg" />
                            <div class="flex-container column-direction">
                                <span class="stat-label flex-item">My Account Balance</span>
                                <span class="stat-value flex-item">@totalBalance.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))</span>
                            </div>
                        </li>
                        <li class="flex-container row-direction">
                            <img class="stat-icon flex-item" src="images/income-icon.svg" />
                            <div class="flex-container column-direction">
                                <span class="stat-label flex-item">Income/year</span>
                                <span class="stat-value flex-item">@income.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))</span>
                            </div>
                        </li>
                        <li class="flex-container row-direction">
                            <img class="stat-icon flex-item" src="images/expense.svg" />
                            <div class="flex-container column-direction">
                                <span class="stat-label flex-item">Expense</span>
                                <span class="stat-value flex-item">@expenses.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))</span>
                            </div>
                        </li>
                        <li class="flex-container row-direction">
                            <img class="stat-icon flex-item" src="images/total-savings-icon.svg" />
                            <div class="flex-container column-direction">
                                <span class="stat-label flex-item">Total Savings</span>
                                <span class="stat-value flex-item">@totalSavings.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))</span>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
