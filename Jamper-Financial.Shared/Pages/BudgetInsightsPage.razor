@page "/budget-insights-page"
@using Jamper_Financial.Shared.Models
@using Jamper_Financial.Shared.Services
@using System.Collections.ObjectModel
@inject NavigationManager Navigation
@inject UserStateService UserStateService
@inject IBudgetInsightsService BudgetInsightsService
@inject IUserService UserService
@inject IAccountService AccountService

@code {
    [CascadingParameter] private Action<string>? SetPageTitle { get; set; }
    [CascadingParameter] private Action<bool>? LoadBlazoriseScripts { get; set; }

    private ObservableCollection<BudgetItem> budgetItems = new ObservableCollection<BudgetItem>();
    private string[] currentColors = { "#FF9AA2", "#B5EAD7", "#FFDAC1", "#C7CEEA" };
    private string[] colors = { "#346A46", "#02B098", "#2A9569", "#6BB2C9" };
    private UserProfile userProfile = new UserProfile();

    private List<string> chartLabels = new List<string>();
    private List<decimal> chartData = new List<decimal>();
    private List<string> chartBackgroundColors = new List<string>();

    private List<BankAccount> userAccounts = new List<BankAccount>();  // Instead of List<Account>

    private decimal income;
    private decimal expenses;
    private decimal totalSavings;
    private decimal totalBalance = 0;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            SetPageTitle?.Invoke("Budget Insights");
            LoadBlazoriseScripts?.Invoke(true);

            int userId = UserStateService.UserId;
            string username = UserStateService.Username;

            if (userId > 0)
            {
                userProfile = await UserService.GetUserProfileByIdAsync(userId);
                userAccounts = await AccountService.GetBankAccounts(userId);

                //DEBUG LOGS
                Console.WriteLine($"Number of accounts loaded: {userAccounts?.Count}");
                if (userAccounts?.Count > 0)
                {
                    Console.WriteLine($"First account: {userAccounts[0].AccountName}, Balance: {userAccounts[0].Balance}");
                }

                await LoadBudgetItemsAsync();
                UpdateChartData();
            }
            else
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            // Log the exception (if you have a logging mechanism)
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
    }

    private async Task LoadBudgetItemsAsync()
    {
        try
        {
            var items = await BudgetInsightsService.GetBudgetItemsAsync(UserStateService.UserId);
            foreach (var item in items)
            {
                budgetItems.Add(item);
            }

            // Calculate income, expenses, and total savings
            CalculateStats();
        }
        catch (Exception ex)
        {
            // Log the exception (if you have a logging mechanism)
            Console.WriteLine($"Error in LoadBudgetItemsAsync: {ex.Message}");
        }
    }


    private void CalculateStats()
    {
        income = budgetItems
            .Where(i => i.TransactionType == 0)
            .Sum(i => i.CurrentAmount);

        expenses = budgetItems
            .Where(i => i.TransactionType == 1)
            .Sum(i => i.CurrentAmount);

        // Calculate total balance from all accounts
        totalBalance = userAccounts.Sum(a => a.Balance);

        Console.WriteLine($"Income: {income}, Expenses: {expenses}");
        //totalSavings = 255010 + income - expenses; // Assuming 255010 is the balance value
        totalSavings = totalBalance + income - expenses;  // Now using actual account balances
		StateHasChanged(); // Forcing UI update

    }


    private string GetFormattedPlannedAmount(BudgetItem item)
    {
        return item.PlannedAmount.ToString("C");
    }

    private void OnPlannedAmountInput(BudgetItem item, ChangeEventArgs e)
    {
        if (e.Value != null && decimal.TryParse(e.Value.ToString().Replace("$", "").Replace(",", ""), out var result))
        {
            item.PlannedAmount = result;
        }
    }

    private async void UpdatePlannedAmount(BudgetItem item)
    {
        try
        {
            await BudgetInsightsService.UpdatePlannedAmountAsync(UserStateService.UserId, item.Category, item.PlannedAmount);
            UpdateChartData();
            CalculateStats();
        }
        catch (Exception ex)
        {
            // Log the exception (if you have a logging mechanism)
            Console.WriteLine($"Error in UpdatePlannedAmount: {ex.Message}");
        }
    }

    private void UpdateChartData()
    {
        try
        {
            var top3Items = budgetItems
                .OrderByDescending(i => i.PlannedAmount)
                .Take(3)
                .ToList();

            var othersAmount = budgetItems
                .OrderByDescending(i => i.PlannedAmount)
                .Skip(3)
                .Sum(i => i.PlannedAmount);

            chartLabels = top3Items.Select(i => i.Category).ToList();
            chartData = top3Items.Select(i => i.PlannedAmount).ToList();
            chartBackgroundColors = colors.Take(chartData.Count).ToList();

            if (othersAmount > 0)
            {
                chartLabels.Add("Others");
                chartData.Add(othersAmount);
                chartBackgroundColors.Add("#CCCCCC"); // Add a color for "Others"
            }
        }
        catch (Exception ex)
        {
            // Log the exception (if you have a logging mechanism)
            Console.WriteLine($"Error in UpdateChartData: {ex.Message}");
        }
    }

    public void Dispose()
    {
        LoadBlazoriseScripts?.Invoke(false);
    }
}

<div class="budget-page">
    <div class="dashboard">
        <div class="table-container">
            <h3 class="mb-3">Budget Overview</h3>
            <div class="table-wrapper">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th>Planned Amount</th>
                            <th>Current Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in budgetItems)
                        {
                            <tr>
                                <td>@item.Category</td>
                                <td class="planned-column">
                                    <input type="text" value="@GetFormattedPlannedAmount(item)" @oninput="(e) => OnPlannedAmountInput(item, e)" @onblur="(e) => UpdatePlannedAmount(item)" />
                                </td>
                                <td class="current-column">@item.CurrentAmount.ToString("C")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="expense-distribution">
            <h3 class="mb-3">Expense Distribution</h3>
            <div class="flex-container row-direction">
                <div class="chart-container flex-item">
                    <PieChart Labels="chartLabels" Data="chartData" BackgroundColors="chartBackgroundColors" />
                </div>
                <div class="stats-container">
                    <ul class="stats-list">
                        <li class="flex-container row-direction">
                            <img class="stat-icon flex-item" src="images/balance-icon.svg" />
                            <div class="flex-container column-direction">
                                <span class="stat-label flex-item">My Balance</span>
                                @* <span class="stat-value flex-item">$255,010</span> *@
                                <span class="stat-value flex-item">@totalBalance.ToString("$#,##0")</span>
                            </div>
                        </li>
                        <li class="flex-container row-direction">
                            <img class="stat-icon flex-item" src="images/income-icon.svg" />
                            <div class="flex-container column-direction">
                                <span class="stat-label flex-item">Income/year</span>
                                <span class="stat-value flex-item">@income.ToString("C")</span>
                            </div>
                        </li>
                        <li class="flex-container row-direction">
                            <img class="stat-icon flex-item" src="images/expense-icon.svg" />
                            <div class="flex-container column-direction">
                                <span class="stat-label flex-item">Expense</span>
                                <span class="stat-value flex-item">@expenses.ToString("C")</span>
                            </div>
                        </li>
                        <li class="flex-container row-direction">
                            <img class="stat-icon flex-item" src="images/total-savings-icon.svg" />
                            <div class="flex-container column-direction">
                                <span class="stat-label flex-item">Total Savings</span>
                                <span class="stat-value flex-item">@totalSavings.ToString("C")</span>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
