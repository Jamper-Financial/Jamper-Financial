@page "/delete-account"
@using System.ComponentModel.DataAnnotations
@using Jamper_Financial.Shared.Data
@using Jamper_Financial.Shared.Services
@using Microsoft.Extensions.Logging
@using Jamper_Financial.Shared.Models
@inject NavigationManager Navigation
@inject ILogger<DeleteAccount> Logger
@inject UserStateService UserStateService

<div class="delete-account-container">
    <div class="delete-account-left">
        <div class="delete-form">
            <h1>Delete Account</h1>
            <h2>Please enter your username or email to confirm account deletion</h2>

            <EditForm Model="@deleteAccountModel" OnValidSubmit="ValidateAndDelete">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="usernameOrEmail">Username or Email <span class="required">*</span></label>
                    <InputText id="usernameOrEmail" class="form-control" @bind-Value="deleteAccountModel.UsernameOrEmail" />
                </div>

                <div class="bottom-buttons">
                    <button type="button" class="btn back-button" @onclick="NavigateBack">Back</button>
                    <button type="submit" class="btn submit-button">Delete My Account</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
@if (showConfirmation)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <p>Are you sure you want to delete your account? This action cannot be undone.</p>
            <div class="modal-buttons">
                <button @onclick="ConfirmDelete" class="btn submit-button">Yes, Delete My Account</button>
                <button @onclick="CancelDelete" class="btn back-button">Cancel</button>
            </div>
        </div>
    </div>
}

<!-- Admin Confirmation Modal -->
@if (showAdminConfirmation)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <p>You are deleting an admin account. Are you sure you want to proceed?</p>
            <div class="modal-buttons">
                <button @onclick="ConfirmAdminDelete" class="btn submit-button">Yes, Delete My Account</button>
                <button @onclick="CancelAdminDelete" class="btn back-button">Cancel</button>
            </div>
        </div>
    </div>
}

<!-- Alert Modal -->
@if (showAlert)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <p>@alertMessage</p>
            <div class="modal-buttons">
                <button @onclick="CloseAlert" class="btn submit-button">OK</button>
            </div>
        </div>
    </div>
}

<!-- Success Confirmation Modal -->
@if (showSuccessConfirmation)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <p>Your account has been successfully deleted.</p>
            <div class="modal-buttons">
                <button @onclick="CloseSuccessConfirmation" class="btn submit-button">OK</button>
            </div>
        </div>
    </div>
}

@code {
    private bool showConfirmation = false;
    private bool showAdminConfirmation = false;
    private bool showAlert = false;
    private bool showSuccessConfirmation = false;
    private string alertMessage = "";
    private bool isAdmin = false;
    private DeleteAccountModel deleteAccountModel = new DeleteAccountModel();

    // Model for the delete account form
    private class DeleteAccountModel
    {
        [Required(ErrorMessage = "Username or email is required.")]
        public string UsernameOrEmail { get; set; }
    }

    // Validates the form and initiates the deletion process
    private async Task ValidateAndDelete()
    {
        try
        {
            // Trim and normalize the entered username or email
            string enteredUsernameOrEmail = deleteAccountModel.UsernameOrEmail.Trim().ToLower();

            // Retrieve the logged-in user's username and email
            string loggedInUsername = UserStateService.Username?.Trim().ToLower();
            string loggedInEmail = UserStateService.Email?.Trim().ToLower();

            // Check if the entered username or email matches the logged-in user's username or email
            if (enteredUsernameOrEmail != loggedInUsername && enteredUsernameOrEmail != loggedInEmail)
            {
                ShowAlert("This is not the username or email registered with this account.");
                return;
            }

            // Retrieve the UserId, ProfileId, and Role by username or email
            var userDetails = DatabaseHelper.GetUserDetailsByUsernameOrEmail(enteredUsernameOrEmail);

            if (!userDetails.HasValue)
            {
                ShowAlert("Username or email not found. Please try again.");
                return;
            }

            int userId = userDetails.Value.UserId;
            string role = userDetails.Value.Role;

            // Check if the user is an admin
            if (role == "Admin")
            {

                showAdminConfirmation = true;
            }
            else
            {

                showConfirmation = true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred while validating the deletion request.");
            ShowAlert("An error occurred. Please try again.");
        }
    }

    // Confirms the deletion for non-admin users
    private async Task ConfirmDelete()
    {
        await DeleteAccountAsync();
        showConfirmation = false;
    }

    // Confirms the deletion for admin users
    private async Task ConfirmAdminDelete()
    {
        await DeleteAccountAsync();
        showAdminConfirmation = false;
    }

    private void CancelDelete()
    {
        showConfirmation = false;
    }

    private void CancelAdminDelete()
    {
        showAdminConfirmation = false;
    }
    private void NavigateBack()
    {
        Navigation.NavigateTo("/profile-page");
    }

    private void ShowAlert(string message)
    {
        alertMessage = message;
        showAlert = true;
    }


    private void CloseAlert()
    {
        showAlert = false;
    }

    private void ShowSuccessConfirmation()
    {
        showSuccessConfirmation = true;
    }

    private void CloseSuccessConfirmation()
    {
        showSuccessConfirmation = false;
        Navigation.NavigateTo("/");
    }

    // Deletes the account
    private async Task DeleteAccountAsync()
    {
        try
        {
            // Retrieve the UserId by username or email
            var userDetails = DatabaseHelper.GetUserDetailsByUsernameOrEmail(deleteAccountModel.UsernameOrEmail);

            if (!userDetails.HasValue)
            {
                ShowAlert("Username or email not found. Please try again.");
                return;
            }

            int userId = userDetails.Value.UserId;

            // Delete the user, profile, and role
            bool success = DatabaseHelper.DeleteUserAndProfile(userId);

            if (success)
            {
                ShowSuccessConfirmation();
            }
            else
            {
                ShowAlert("Failed to delete account. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred while deleting the account.");
            ShowAlert("An error occurred. Please try again.");
        }
    }
}