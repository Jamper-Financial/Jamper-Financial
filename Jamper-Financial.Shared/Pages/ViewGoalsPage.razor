@page "/view-goals-page"
@using Jamper_Financial.Shared.Data
@inherits LayoutComponentBase
@inject GoalState GoalState
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject DatabaseHelperFactory DatabaseHelper

<style>
    .modify-btn {
        border: none;
        border-radius: 1rem;
        width: 20px;
        height: 25px;
        cursor: pointer;
        display: inline-block;
        margin-right: 5px;
        padding: 0.2rem;
        margin: 0 0.2rem 0 0;
    }
    .modify-btn img {
        width: 20px;
        height: 20px;
    }

    .update-goal-btn {
        background-color: #28a745;
        color: #fff;
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-right: 5px;
    }
    .update-goal-btn:hover {
        background-color: #218838;
    }

    .cancel-btn {
        background-color: #fff;
        color: #28a745;
        padding: 8px 16px;
        border: 1px solid #28a745;
        border-radius: 4px;
        cursor: pointer;
    }
    .cancel-btn:hover {
        background-color: #88db9b;
        color:#fff;
    }

    .edit-goal-form {
        border: 1px solid #ccc;
        padding: 1rem;
        margin-top: 1rem;
        border-radius: 5px;
        background-color: #f9f9f9;
    }
</style>

<div class="header-container">
    <h3 class="header">Goals</h3>
</div>
<div class="content-container">
    <div class="view-goals-page">
        <ul>
            @foreach (var goal in goals)
            {
                <li class="goal-item @(goal.IsFadingOut ? "fade-out" : "")">

                    @if (!goal.IsEditing)
                    {
                        <div class="goal-details">
                            <div class="goal-info">
                                @if (goal.IsQuickGoal)
                                {
                                    <h3>@goal.Name</h3>
                                    <p>Type: @goal.Type</p>
                                    <p>Amount: $@goal.Amount</p>
                                    <p>Start Date: @goal.StartDate.ToShortDateString()</p>
                                    <p>End Date: @goal.EndDate.ToShortDateString()</p>
                                }
                                else if (goal.IsRetirementGoal)
                                {
                                    <h3>Retirement Goal</h3>
                                    <p>Target Amount: $@goal.Amount</p>
                                    <p>Retirement Date: @goal.EndDate.ToShortDateString()</p>
                                    @if (goal.ShowDescription)
                                    {
                                        <p>Current Savings: $@goal.Description.Split(',')[0].Split(':')[1].Trim()</p>
                                        <p>Monthly Contribution: $@goal.Description.Split(',')[1].Split(':')[1].Trim()</p>
                                    }
                                }
                                else if (goal.IsEmergencyFundGoal)
                                {
                                    <h3>@goal.Name</h3>
                                    <p>Target Amount: $@goal.Amount</p>
                                    <p>Target Date: @goal.EndDate.ToShortDateString()</p>
                                    @if (goal.ShowDescription)
                                    {
                                        <p>Current Savings: $@goal.Description.Split(',')[0].Split(':')[1].Trim()</p>
                                        <p>Monthly Contribution: $@goal.Description.Split(',')[1].Split(':')[1].Trim()</p>
                                        <p>Description: @goal.Description.Split(',')[2].Split(':')[1].Trim()</p>
                                    }
                                }
                                else if (goal.IsTravelGoal)
                                {
                                    <h3>@goal.Name</h3>
                                    <p>Destination: @goal.Name.Split(' ').Length > 2 ? @goal.Name.Split(' ')[2] : "N/A"</p>
                                    <p>Estimated Cost: $@goal.Amount</p>
                                    <p>Travel Dates: @goal.StartDate.ToShortDateString() - @goal.EndDate.ToShortDateString()</p>
                                    @if (goal.ShowDescription)
                                    {
                                        var descriptionParts = goal.Description.Split(',');
                                        <p>Current Savings: $@(descriptionParts.Length > 0 ? descriptionParts[0].Split(':')[1].Trim() : "N/A")</p>
                                        <p>Monthly Contribution: $@(descriptionParts.Length > 1 ? descriptionParts[1].Split(':')[1].Trim() : "N/A")</p>
                                        <p>Description: @(descriptionParts.Length > 2 ? descriptionParts[2].Split(':')[1].Trim() : "N/A")</p>
                                    }
                                }
                                else if (goal.IsHomeGoal)
                                {
                                    <h3>@goal.Name</h3>
                                    <p>Target Purchase Date: @goal.EndDate.ToShortDateString()</p>
                                    @if (goal.ShowDescription)
                                    {
                                        <p>Home Price: $@goal.Description.Split(',')[0].Split(':')[1].Trim()</p>
                                        <p>Current Savings: $@goal.Description.Split(',')[1].Split(':')[1].Trim()</p>
                                        <p>Monthly Savings: $@goal.Description.Split(',')[2].Split(':')[1].Trim()</p>
                                    }
                                }
                                else
                                {
                                    <h3>@goal.Name</h3>
                                    <p>Account Type: @goal.GoalType</p>
                                    <p>Category: @goal.Category</p>
                                    <p>Start Date: @goal.StartDate.ToShortDateString()</p>
                                    <p>End Date: @goal.EndDate.ToShortDateString()</p>
                                    <p>Amount: $@goal.Amount</p>
                                    @if (goal.ShowDescription)
                                    {
                                        <p>Frequency: @goal.Frequency</p>
                                        <p>Description: @goal.Description</p>
                                    }
                                }
                            </div>
                            <div class="button-container">
                                <button class="see-more-btn" @onclick="() => ToggleDescription(goal)">...</button>
                                <button class="modify-btn" @onclick="() => StartEditing(goal)">
                                    <img src="images/edit.png" alt="Edit" />
                                </button>
                                <button class="delete-btn" @onclick="() => ConfirmDeleteGoal(goal)">
                                    <img src="images/bin.png" alt="Delete" />
                                </button>
                                <button class="check-off-btn" @onclick="() => ConfirmCheckOffGoal(goal)">
                                    <img src="images/check.png" alt="Check Off" />
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="edit-goal-form">
                            @if (goal.IsQuickGoal)
                            {
                                <h3>Editing Quick Goal</h3>
                                <div class="form-group">
                                    <label>Goal Type</label>
                                    <input type="text" @bind="goal.Type" />
                                </div>
                                <div class="form-group">
                                    <label>Name of goal</label>
                                    <input type="text" @bind="goal.Name" />
                                </div>
                                <div class="form-group">
                                    <label>Amount</label>
                                    <input type="number" step="0.01" @bind="goal.Amount" />
                                </div>
                                <div class="form-group">
                                    <label>Start Date</label>
                                    <input type="date" @bind="goal.StartDate" />
                                </div>
                                <div class="form-group">
                                    <label>End Date</label>
                                    <input type="date" @bind="goal.EndDate" />
                                </div>
                            }
                            else if (goal.IsRetirementGoal)
                            {
                                <h3>Editing Retirement Goal</h3>
                                <!-- ADDED: Removed extra fields to match new "Save for Retirement" -->
                                <div class="form-group">
                                    <label>Target Amount</label>
                                    <input type="number" step="0.01" @bind="goal.Amount" />
                                </div>
                                <div class="form-group">
                                    <label>Current Savings</label>
                                    <input type="number" step="0.01" @bind="retCurrentSavings" />
                                </div>
                                <div class="form-group">
                                    <label>Monthly Contribution</label>
                                    <input type="number" step="0.01" @bind="retMonthlyContribution" />
                                </div>
                                <div class="form-group">
                                    <label>Goal Retirement Date</label>
                                    <input type="date" @bind="goal.EndDate" />
                                </div>
                            }
                            else if (goal.IsEmergencyFundGoal)
                            {
                                <h3>Editing Emergency Fund Goal</h3>
                                <div class="form-group">
                                    <label>Target Amount</label>
                                    <input type="number" step="0.01" @bind="goal.Amount" />
                                </div>
                                <div class="form-group">
                                    <label>Current Savings</label>
                                    <input type="number" step="0.01" @bind="emCurrentSavings" />
                                </div>
                                <div class="form-group">
                                    <label>Monthly Contribution</label>
                                    <input type="number" step="0.01" @bind="emMonthlyContribution" />
                                </div>
                                <div class="form-group">
                                    <label>Target Date</label>
                                    <input type="date" @bind="goal.EndDate" />
                                </div>
                                <div class="form-group">
                                    <label>Description</label>
                                    <textarea @bind="emDescription"></textarea>
                                </div>
                            }
                            else if (goal.IsTravelGoal)
                            {
                                <h3>Editing Travel Goal</h3>
                                <!-- ADDED: Removed extra fields to match new "Save for Traveling" -->
                                <div class="form-group">
                                    <label>Destination</label>
                                    <input type="text" @bind="travelDestination" />
                                </div>
                                <div class="form-group">
                                    <label>Start Date</label>
                                    <input type="date" @bind="goal.StartDate" />
                                </div>
                                <div class="form-group">
                                    <label>End Date</label>
                                    <input type="date" @bind="goal.EndDate" />
                                </div>
                                <div class="form-group">
                                    <label>Estimated Cost</label>
                                    <input type="number" step="0.01" @bind="goal.Amount" />
                                </div>
                                <div class="form-group">
                                    <label>Current Savings</label>
                                    <input type="number" step="0.01" @bind="travelCurrentSavings" />
                                </div>
                                <div class="form-group">
                                    <label>Monthly Contribution</label>
                                    <input type="number" step="0.01" @bind="travelMonthlyContribution" />
                                </div>
                                <div class="form-group">
                                    <label>Description</label>
                                    <textarea @bind="travelDescription"></textarea>
                                </div>
                            }
                            else if (goal.IsHomeGoal)
                            {
                                <h3>Editing Home Goal</h3>
                                <!-- ADDED: Removed extra fields to match new "Save to Buy a Home" -->
                                <div class="form-group">
                                    <label>Home Price</label>
                                    <input type="number" step="0.01" @bind="homePrice" />
                                </div>
                                <div class="form-group">
                                    <label>Current Savings</label>
                                    <input type="number" step="0.01" @bind="homeCurrentSavings" />
                                </div>
                                <div class="form-group">
                                    <label>Monthly Savings</label>
                                    <input type="number" step="0.01" @bind="homeMonthlySavings" />
                                </div>
                                <div class="form-group">
                                    <label>Target Purchase Date</label>
                                    <input type="date" @bind="goal.EndDate" />
                                </div>
                            }
                            else
                            {
                                <h3>Editing Custom Goal</h3>
                                <!-- ADDED: Updated to match "Add a Saving Goal" fields -->
                                <div class="form-group">
                                    <label>Name of goal</label>
                                    <input type="text" @bind="goal.Name" />
                                </div>
                                <div class="form-group">
                                    <label>Choose an Account</label>
                                    <select @bind="goal.GoalType">
                                        <option value="">Select an Account</option>
                                        <option value="Savings Account 1">Savings Account 1</option>
                                        <option value="Savings Account 2">Savings Account 2</option>
                                        <option value="Savings Account 3">Savings Account 3</option>
                                        <option value="Checking Account 1">Checking Account 1</option>
                                        <option value="Checking Account 2">Checking Account 2</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Category</label>
                                    <select @bind="goal.Category">
                                        <option value="">Select a Category</option>
                                        <option value="Entertainment">Entertainment</option>
                                        <option value="Debt & Loans">Debt & Loans</option>
                                        <option value="Subscriptions & Memberships">Subscriptions & Memberships</option>
                                        <option value="Savings & Investments">Savings & Investments</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Start Date</label>
                                    <input type="date" @bind="goal.StartDate" />
                                </div>
                                <div class="form-group">
                                    <label>End Date</label>
                                    <input type="date" @bind="goal.EndDate" />
                                </div>
                                <div class="form-group">
                                    <label>Amount</label>
                                    <input type="number" step="0.01" @bind="goal.Amount" />
                                </div>
                                <div class="form-group">
                                    <label>Frequency</label>
                                    <select @bind="goal.Frequency">
                                        <option value="">Select Frequency</option>
                                        <option value="Daily">Daily</option>
                                        <option value="Every 2 Weeks">Every 2 Weeks</option>
                                        <option value="Monthly">Monthly</option>
                                        <option value="Annually">Annually</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Description</label>
                                    <textarea @bind="goal.Description"></textarea>
                                </div>
                            }

                            <button class="update-goal-btn" @onclick="() => SaveGoal(goal)">Save</button>
                            <button class="cancel-btn" @onclick="() => CancelEdit(goal)">Cancel</button>
                        </div>
                    }
                </li>
            }
        </ul>
        <button class="back-button" @onclick="GoBack">Back</button>
    </div>
</div>

@code {
    private List<Goal> goals = new List<Goal>();

    //local fields for Retirement
    private decimal retCurrentSavings;         // ADDED: We'll keep these for new retirement fields
    private decimal retMonthlyContribution;    // ADDED

    // Removed old retirement fields (investmentGrowthRate, inflationRate, etc.) // ADDED

    // local fields for Emergency
    private decimal emCurrentSavings;
    private decimal emMonthlyContribution;
    private string emDescription;

    // local fields for Travel
    private string travelDestination;
    private decimal travelCurrentSavings;
    private decimal travelMonthlyContribution;
    private string travelDescription;  // ADDED: We'll store only a single description now

    // Removed travelCategory, travelAccommodationCosts, travelTransportationCosts, travelFoodEntertainmentCosts // ADDED

    //  local fields for Home
    private decimal homePrice;
    private decimal homeCurrentSavings;
    private decimal homeMonthlySavings;

    // Removed loanInterestRate, loanTerm, propertyTaxes, insurance, otherCosts // ADDED

    protected override void OnInitialized()
    {
        goals = DatabaseHelper.GetGoals();
    }

    private void ToggleDescription(Goal goal)
    {
        goal.ShowDescription = !goal.ShowDescription;
    }

    private async Task DeleteGoal(Goal goal)
    {
        try
        {
            Console.WriteLine($"Attempting to delete goal with ID: {goal.GoalId}");

            // Trigger the fade-out animation
            goal.IsFadingOut = true;
            StateHasChanged();

            await Task.Delay(500);

            DatabaseHelper.DeleteGoal(goal.GoalId);
            await Task.Delay(100);

            var updatedGoals = DatabaseHelper.GetGoals();
            if (updatedGoals.Any(g => g.GoalId == goal.GoalId))
            {
                Console.WriteLine($"Failed to delete goal with ID: {goal.GoalId} from the database.");
                return;
            }

            Console.WriteLine($"Goal with ID: {goal.GoalId} deleted from the database.");

            goals.Remove(goal);

            goals = DatabaseHelper.GetGoals();
            Console.WriteLine($"Reloaded goals from database. Total goals: {goals.Count}");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in DeleteGoal: {ex.Message}");
        }
    }

    private async Task ConfirmDeleteGoal(Goal goal)
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the goal '{goal.Name}'?");
        if (isConfirmed)
        {
            await DeleteGoal(goal);
        }
    }

    private async Task CheckOffGoal(Goal goal)
    {
        try
        {
            goal.IsFadingOut = true;
            StateHasChanged();
            await Task.Delay(500);
            goals.Remove(goal);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in CheckOffGoal: {ex.Message}");
        }
    }

    private async Task ConfirmCheckOffGoal(Goal goal)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to check off the goal '{goal.Name}'?" }))
        {
            await CheckOffGoal(goal);
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/saving-goals-page");
    }

    private void StartEditing(Goal goal)
    {
        goal.IsEditing = true;

        // Save for retirement
        if (goal.IsRetirementGoal && !string.IsNullOrEmpty(goal.Description))
        {
            try
            {
                var parts = goal.Description.Split(',');
                retCurrentSavings = decimal.Parse(parts[0].Split(':')[1].Trim());
                retMonthlyContribution = decimal.Parse(parts[1].Split(':')[1].Trim());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing retirement description: {ex.Message}");
            }
        }

        // Save for Emergency find
        if (goal.IsEmergencyFundGoal && !string.IsNullOrEmpty(goal.Description))
        {
            try
            {
                var parts = goal.Description.Split(',');
                emCurrentSavings = decimal.Parse(parts[0].Split(':')[1].Trim());
                emMonthlyContribution = decimal.Parse(parts[1].Split(':')[1].Trim());
                emDescription = parts[2].Split(':')[1].Trim();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing emergency description: {ex.Message}");
            }
        }

        // Save for Traveling
        if (goal.IsTravelGoal && !string.IsNullOrEmpty(goal.Description))
        {
            try
            {
                var parts = goal.Description.Split(',');
                travelCurrentSavings = decimal.Parse(parts[0].Split(':')[1].Trim());
                travelMonthlyContribution = decimal.Parse(parts[1].Split(':')[1].Trim());
                travelDescription = parts[2].Split(':')[1].Trim();

                if (goal.Name.StartsWith("Travel to "))
                {
                    travelDestination = goal.Name.Substring("Travel to ".Length).Trim();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing travel description: {ex.Message}");
            }
        }

        // Saving for a Home
        if (goal.IsHomeGoal && !string.IsNullOrEmpty(goal.Description))
        {
            try
            {
                var parts = goal.Description.Split(',');
                homePrice = decimal.Parse(parts[0].Split(':')[1].Trim());
                homeCurrentSavings = decimal.Parse(parts[1].Split(':')[1].Trim());
                homeMonthlySavings = decimal.Parse(parts[2].Split(':')[1].Trim());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing home description: {ex.Message}");
            }
        }
    }

    private void SaveGoal(Goal goal)
    {
        try
        {
            // Retirement
            if (goal.IsRetirementGoal)
            {
                goal.Description = $"Current Savings: {retCurrentSavings}, Monthly Contribution: {retMonthlyContribution}";
            }
            else if (goal.IsEmergencyFundGoal)
            {
                goal.Description = $"Current Savings: {emCurrentSavings}, Monthly Contribution: {emMonthlyContribution}, Description: {emDescription}";
            }
            else if (goal.IsTravelGoal)
            {
                // rename the goal to "Travel to X"
                goal.Name = $"Travel to {travelDestination}";
                goal.Description = $"Current Savings: {travelCurrentSavings}, Monthly Contribution: {travelMonthlyContribution}, Description: {travelDescription}";
            }
            else if (goal.IsHomeGoal)
            {
                // store only homePrice, homeCurrentSavings, homeMonthlySavings
                goal.Description = $"Home Price: {homePrice}, Current Savings: {homeCurrentSavings}, Monthly Savings: {homeMonthlySavings}";
            }

            // Update the database
            DatabaseHelper.UpdateGoal(goal);

            // Reload from DB
            goals = DatabaseHelper.GetGoals();

            // End editing
            goal.IsEditing = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SaveGoal: {ex.Message}");
        }
    }

    private void CancelEdit(Goal goal)
    {
        goal.IsEditing = false;
    }
}
