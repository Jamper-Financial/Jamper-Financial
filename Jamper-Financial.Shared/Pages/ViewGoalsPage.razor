@page "/view-goals-page"
@using Jamper_Financial.Shared.Data
@using Jamper_Financial.Shared.Services
@inherits LayoutComponentBase
@inject GoalState GoalState
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject DatabaseHelperFactory DatabaseHelper
@inject UserStateService UserStateService

<style>
    .transactions-page {
    padding: 20px;
    }

    .transactions-section {
    margin-top: 20px;
    }

    .transactions-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    }

    .section-title {
    font-size: 1.5rem;
    font-weight: bold;
    }

    .add-transaction {
    background-color: #28a745;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    }

    .add-transaction:hover {
    background-color: #218838;
    }

    .scrollable-table {
    max-height: 500px;
    overflow-y: auto;
    }

    table {
    width: 100%;
    border-collapse: collapse;
    }

    th, td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #ddd;
    }

    th {
    background-color: #f2f2f2;
    }

    .goal-item:hover {
    background-color: #f5f5f5;
    }

    .modify-btn, .delete-btn, .check-off-btn, .see-more-btn {
    border: none;
    background: none;
    cursor: pointer;
    }

    .modify-btn img, .delete-btn img, .check-off-btn img {
    width: 20px;
    height: 20px;
    }

    .goal-details {
    padding: 10px;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 5px;
    margin-top: 10px;
    }

    .back-button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 20px;
    }

    .back-button:hover {
    background-color: #0056b3;
    }

    .edit-goal-form {
    border: 1px solid #ccc;
    padding: 1rem;
    margin-top: 1rem;
    border-radius: 5px;
    background-color: #f9f9f9;
    }

    .update-goal-btn {
    background-color: #28a745;
    color: #fff;
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-right: 5px;
    }

    .update-goal-btn:hover {
    background-color: #218838;
    }

    .cancel-btn {
    background-color: #fff;
    color: red;
    padding: 8px 16px;
    border: 1px solid red;
    border-radius: 4px;
    cursor: pointer;
    }

    .cancel-btn:hover {
    background-color: darkred;
    color: #fff;
    }

    .modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgb(0,0,0);
    background-color: rgba(0,0,0,0.4);
    padding-top: 60px;
    }

    .modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    margin-left: auto; 
    margin-right: 3rem; 
    }

    .close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    }

    .close:hover,
    .close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
    }

.chart-container {
    background-color: #f9f9f9;
    padding: 20px; /* Add padding inside the container */
    border: 1px solid #ddd;
    border-radius: 20px;
    width: calc(100% - 40px); /* Ensure the container fits within the page, accounting for padding */
    max-width: 800px; /* Limit the maximum width for larger screens */
    height: auto; /* Allow height to adjust dynamically */
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 20px auto; /* Center the container horizontally */
    box-sizing: border-box; /* Include padding and border in width calculation */
    overflow: hidden; /* Prevent content from overflowing */
}

canvas {
    max-width: 100%; /* Ensure the canvas scales with the container */
    height: auto; /* Maintain aspect ratio */
    box-sizing: border-box; /* Include padding and border in width calculation */
}


</style>

<div class="chart-container">
    <canvas id="goalsChart"></canvas>
</div>
<div class="content-container">
    <div class="transactions-page">
        <div class="transactions-section">
            <div class="transactions-header">
                <h3 class="section-title">Goals</h3>
            </div>
            <div class="scrollable-table">
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Amount</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (goals != null)
                        {
                            @foreach (var goal in goals)
                            {
                                <tr class="goal-item @(goal.IsFadingOut ? "fade-out" : "")">
                                    <td>@goal.Name</td>
                                    <td>@goal.Amount.ToString("C")</td>
                                    <td>@goal.StartDate.ToShortDateString()</td>
                                    <td>@goal.EndDate.ToShortDateString()</td>
                                    <td>
                                        <button class="see-more-btn" @onclick="() => ToggleDescription(goal)">...</button>
                                        <button class="modify-btn" @onclick="() => StartEditing(goal)">
                                            <img src="images/edit.png" alt="Edit" />
                                        </button>
                                        <button class="delete-btn" @onclick="() => ConfirmDeleteGoal(goal)">
                                            <img src="images/bin.png" alt="Delete" />
                                        </button>
                                        <button class="check-off-btn" @onclick="() => ConfirmCheckOffGoal(goal)">
                                            <img src="images/check.png" alt="Check Off" />
                                        </button>
                                    </td>
                                </tr>
                                @if (goal.IsEditing)
                                {
                                    <tr>
                                        <td colspan="6">
                                            <div class="edit-goal-form">
                                                <h3>Edit Goal</h3>
                                                <form @onsubmit="async (e) => SaveGoal(goal)">
                                                    @if(goal.IsQuickGoal)
                                                    {
                                                        <div class="form-group">
                                                            <label for="name">Name:</label>
                                                            <input id="name" @bind="goal.Name" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="type">Type:</label>
                                                            <input id="type" @bind="goal.Type" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="amount">Amount:</label>
                                                            <input id="amount" type="number" step="0.01" @bind="goal.Amount" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="startDate">Start Date:</label>
                                                            <input id="startDate" type="date" @bind="goal.StartDate" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="endDate">End Date:</label>
                                                            <input id="endDate" type="date" @bind="goal.EndDate" required />
                                                        </div>
                                                    }
                                                    else if (goal.IsRetirementGoal)
                                                    {
                                                        <div class="form-group">
                                                            <label for="amount">Target Amount:</label>
                                                            <input id="amount" type="number" step="0.01" @bind="goal.Amount" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="retCurrentSavings">Current Savings:</label>
                                                            <input id="retCurrentSavings" type="number" step="0.01" @bind="retCurrentSavings" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="retMonthlyContribution">Monthly Contribution:</label>
                                                            <input id="retMonthlyContribution" type="number" step="0.01" @bind="retMonthlyContribution" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="endDate">End Date:</label>
                                                            <input id="endDate" type="date" @bind="goal.EndDate" required />
                                                        </div>
                                                    }
                                                    else if (goal.IsEmergencyFundGoal)
                                                    {
                                                        <div class="form-group">
                                                            <label for="amount">Target Amount:</label>
                                                            <input id="amount" type="number" step="0.01" @bind="goal.Amount" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="emCurrentSavings">Current Savings:</label>
                                                            <input id="emCurrentSavings" type="number" step="0.01" @bind="emCurrentSavings" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="emMonthlyContribution">Monthly Contribution:</label>
                                                            <input id="emMonthlyContribution" type="number" step="0.01" @bind="emMonthlyContribution" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="endDate">Target Date:</label>
                                                            <input id="endDate" type="date" @bind="goal.EndDate" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="emDescription">Description:</label>
                                                            <input id="emDescription" @bind="emDescription" required />
                                                        </div>
                                                    }
                                                    else if (goal.IsTravelGoal)
                                                    {
                                                        <div class="form-group">
                                                            <label for="travelDestination">Destination:</label>
                                                            <input id="travelDestination" @bind="travelDestination" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="startDate">Start Date:</label>
                                                            <input id="startDate" type="date" @bind="goal.StartDate" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="endDate">End Date:</label>
                                                            <input id="endDate" type="date" @bind="goal.EndDate" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="amount">Estimated Cost:</label>
                                                            <input id="amount" type="number" step="0.01" @bind="goal.Amount" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="travelCurrentSavings">Current Savings:</label>
                                                            <input id="travelCurrentSavings" type="number" step="0.01" @bind="travelCurrentSavings" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="travelMonthlyContribution">Monthly Contribution:</label>
                                                            <input id="travelMonthlyContribution" type="number" step="0.01" @bind="travelMonthlyContribution" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="travelDescription">Description:</label>
                                                            <input id="travelDescription" @bind="travelDescription" required />
                                                        </div>
                                                    }
                                                    else if (goal.IsHomeGoal)
                                                    {
                                                        <div class="form-group">
                                                            <label for="amount">Home Price:</label>
                                                            <input id="amount" type="number" step="0.01" @bind="goal.Amount" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="homeCurrentSavings">Current Savings:</label>
                                                            <input id="homeCurrentSavings" type="number" step="0.01" @bind="homeCurrentSavings" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="homeMonthlySavings">Monthly Savings:</label>
                                                            <input id="homeMonthlySavings" type="number" step="0.01" @bind="homeMonthlySavings" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="endDate">Target Purchase Date:</label>
                                                            <input id="endDate" type="date" @bind="goal.EndDate" required />
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="form-group">
                                                            <label for="name">Name:</label>
                                                            <input id="name" @bind="goal.Name" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="startDate">Start Date:</label>
                                                            <input id="startDate" type="date" @bind="goal.StartDate" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="endDate">End Date:</label>
                                                            <input id="endDate" type="date" @bind="goal.EndDate" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="amount">Amount:</label>
                                                            <input id="amount" type="number" step="0.01" @bind="goal.Amount" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="frequency">Frequency:</label>
                                                            <select id="frequency" @bind="goal.Frequency" required>
                                                                <option value="Daily">Daily</option>
                                                                <option value="Every two Weeks">Every two Weeks</option>
                                                                <option value="Monthly">Monthly</option>
                                                                <option value="Annually">Annually</option>
                                                            </select>
                                                        </div>

                                                        <div class="form-group">
                                                            <label for="description">Description:</label>
                                                            <input id="description" @bind="goal.Description" required />
                                                        </div>
                                                    }

                                                    <div class="form-group button-group">
                                                        <button type="submit" class="update-goal-btn">Save</button>
                                                        <button type="button" class="cancel-btn" @onclick="() => CancelEdit(goal)">Cancel</button>
                                                    </div>
                                                </form>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div id="goalModal" class="modal" style="@(showModal ? "display:block;" : "display:none;")">
    <div class="modal-content">
        <span class="close" @onclick="CloseModal">&times;</span>
        @if (selectedGoal != null)
        {
            <div class="goal-details">
                <h3>Goal Details</h3>
                @if (selectedGoal.IsQuickGoal)
                {
                    <p><strong>Name:</strong> @selectedGoal.Name</p>
                    <p><strong>Type:</strong> @selectedGoal.Type</p>
                    <p><strong>Amount:</strong> @selectedGoal.Amount.ToString("C")</p>
                    <p><strong>Start Date:</strong> @selectedGoal.StartDate.ToShortDateString()</p>
                    <p><strong>End Date:</strong> @selectedGoal.EndDate.ToShortDateString()</p>
                }
                else if (selectedGoal.IsRetirementGoal)
                {
                    var parts = selectedGoal.Description.Split(',');
                    <p><strong>Name:</strong>Retirement</p>
                    <p><strong>Amount:</strong> @selectedGoal.Amount.ToString("C")</p>
                    <p><strong>Current Savings:</strong> $@(parts.Length > 0 ? parts[0].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Monthly Contribution:</strong> $@(parts.Length > 1 ? parts[1].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Retirement Date:</strong> @selectedGoal.EndDate.ToShortDateString()</p>
                }
                else if (selectedGoal.IsEmergencyFundGoal)
                {
                    var parts = selectedGoal.Description.Split(',');
                    <p><strong>Amount:</strong> @selectedGoal.Amount.ToString("C")</p>
                    <p><strong>Current Savings:</strong> $@(parts.Length > 0 ? parts[0].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Monthly Contribution:</strong> $@(parts.Length > 1 ? parts[1].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Target Date:</strong> @selectedGoal.EndDate.ToShortDateString()</p>
                    <p><strong>Description:</strong> @(parts.Length > 2 ? parts[2].Split(':')[1].Trim() : "N/A")</p>
                }
                else if (selectedGoal.IsTravelGoal)
                {
                    var parts = selectedGoal.Description.Split(',');
                    <p><strong>Name:</strong> @selectedGoal.Name</p>
                    <p><strong>Start Date:</strong> @selectedGoal.StartDate.ToShortDateString()</p>
                    <p><strong>End Date:</strong> @selectedGoal.EndDate.ToShortDateString()</p>
                    <p><strong>Estimated Cost:</strong> $@(parts.Length > 0 ? parts[0].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Current Savings:</strong> $@(parts.Length > 0 ? parts[0].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Monthly Contribution:</strong> $@(parts.Length > 1 ? parts[1].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Description:</strong> @(parts.Length > 2 ? parts[2].Split(':')[1].Trim() : "N/A")</p>
                }
                else if (selectedGoal.IsHomeGoal)
                {
                    var parts = selectedGoal.Description.Split(',');
                    <p><strong>Home Price:</strong> @selectedGoal.Amount.ToString("C")</p>
                    <p><strong>Current Savings:</strong> $@(parts.Length > 1 ? parts[1].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Monthly Savings:</strong> $@(parts.Length > 2 ? parts[2].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Targeted Purchase Date:</strong> @selectedGoal.EndDate.ToShortDateString()</p>
                }
                else
                {
                    <p><strong>Name of goal:</strong> @selectedGoal.Name</p>
                    <p><strong>Category:</strong> @selectedGoal.Category</p>
                    <p><strong>Start Date:</strong> @selectedGoal.StartDate.ToShortDateString()</p>
                    <p><strong>End Date:</strong> @selectedGoal.EndDate.ToShortDateString()</p>
                    <p><strong>Amount:</strong> @selectedGoal.Amount.ToString("C")</p>
                    <p><strong>Frequency:</strong> @selectedGoal.Frequency</p>
                    <p><strong>Description:</strong> @selectedGoal.Description</p>
                }
            </div>
        }
    </div>
</div>

@code {
    private bool isChartInitializing = false;
    private DotNetObjectReference<ViewGoalsPage>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isChartInitializing)
        {
            isChartInitializing = true;
            objRef = DotNetObjectReference.Create(this);
            await RenderGoalsChart();
            isChartInitializing = false;
        }
    }
    private List<Goal> goals = new List<Goal>();
    private Goal selectedGoal;
    private bool showModal = false;
    private bool isChartRendered = false;

    // Local fields for Retirement
    private decimal retCurrentSavings;
    private decimal retMonthlyContribution;
    private decimal retInvestmentGrowthRate;
    private decimal retInflationRate;
    private decimal retIncomeNeeds;
    private decimal retOtherIncomeSources;

    // Local fields for Emergency
    private decimal emCurrentSavings;
    private decimal emMonthlyContribution;
    private string emDescription;

    // Local fields for Travel
    private string travelDestination;
    private decimal travelCurrentSavings;
    private decimal travelMonthlyContribution;
    private string travelCategory;
    private string travelDescription;
    private decimal travelAccommodationCosts;
    private decimal travelTransportationCosts;
    private decimal travelFoodEntertainmentCosts;

    // Local fields for Home
    private decimal homePrice;
    private decimal homeCurrentSavings;
    private decimal homeMonthlySavings;
    private decimal homeLoanInterestRate;
    private int homeLoanTerm;
    private decimal homePropertyTaxes;
    private decimal homeInsurance;
    private decimal homeOtherCosts;
    private int userId = 0;

    protected override void OnInitialized()
    {
        userId = UserStateService.LoggedInUser.UserID;
        if (userId <= 0)
        {
            Navigation.NavigateTo("/login");
        }
        
        goals = DatabaseHelper.GetGoals(userId);
    }

    private async Task RenderGoalsChart()
    {
        try
        {
            var isReady = await JSRuntime.InvokeAsync<bool>("isElementReady", "goalsChart");
            if (!isReady) return;

            await JSRuntime.InvokeVoidAsync("safeDestroyChart", "goalsChart");
            await Task.Delay(50);

            var chartData = new
            {
                labels = goals.Select(g => g.Name).ToArray(),
                datasets = new[] {
                    new {
                        label = "Goal Amounts",
                        data = goals.Select(g => g.Amount).ToArray(),
                        backgroundColor = "rgba(75, 192, 192, 0.2)",
                        borderColor = "rgba(75, 192, 192, 1)",
                        borderWidth = 1
                    }
                }
            };

            await JSRuntime.InvokeVoidAsync("initializeBarChart",
                "goalsChart",
                chartData,
                "x",
                false);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chart error: {ex.Message}");
        }
    }

        private void ToggleDescription(Goal goal)
    {
        selectedGoal = goal;
        showModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
        selectedGoal = null;
    }

    private async Task DeleteGoal(Goal goal)
    {
        try
        {
            Console.WriteLine($"Attempting to delete goal with ID: {goal.GoalId}");

            // Trigger the fade-out animation
            goal.IsFadingOut = true;
            StateHasChanged();

            await Task.Delay(500);

            DatabaseHelper.DeleteGoal(goal.GoalId);
            await Task.Delay(100);

            var updatedGoals = DatabaseHelper.GetGoals(userId);
            if (updatedGoals.Any(g => g.GoalId == goal.GoalId))
            {
                Console.WriteLine($"Failed to delete goal with ID: {goal.GoalId} from the database.");
                return;
            }

            Console.WriteLine($"Goal with ID: {goal.GoalId} deleted from the database.");

            goals.Remove(goal);

            goals = DatabaseHelper.GetGoals(userId);
            Console.WriteLine($"Reloaded goals from database. Total goals: {goals.Count}");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in DeleteGoal: {ex.Message}");
        }
    }

    private async Task ConfirmDeleteGoal(Goal goal)
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the goal '{goal.Name}'?");
        if (isConfirmed)
        {
            await DeleteGoal(goal);
        }
    }

    private async Task CheckOffGoal(Goal goal)
    {
        try
        {
            goal.IsFadingOut = true;
            StateHasChanged();
            await Task.Delay(500);
            goals.Remove(goal);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in CheckOffGoal: {ex.Message}");
        }
    }

    private async Task ConfirmCheckOffGoal(Goal goal)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to check off the goal '{goal.Name}'?" }))
        {
            await CheckOffGoal(goal);
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/saving-goals-page");
    }

    private void StartEditing(Goal goal)
    {
        goal.IsEditing = true;

        // If Retirement, parse
        if (goal.IsRetirementGoal && !string.IsNullOrEmpty(goal.Description))
        {
            try
            {
                var parts = goal.Description.Split(',');
                retCurrentSavings = decimal.Parse(parts[0].Split(':')[1].Trim());
                retMonthlyContribution = decimal.Parse(parts[1].Split(':')[1].Trim());
                retInvestmentGrowthRate = decimal.Parse(parts[2].Split(':')[1].Trim().TrimEnd('%'));
                retInflationRate = decimal.Parse(parts[3].Split(':')[1].Trim().TrimEnd('%'));
                retIncomeNeeds = decimal.Parse(parts[4].Split(':')[1].Trim());
                retOtherIncomeSources = decimal.Parse(parts[5].Split(':')[1].Trim());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing retirement description: {ex.Message}");
            }
        }

        // If Emergency, parse
        if (goal.IsEmergencyFundGoal && !string.IsNullOrEmpty(goal.Description))
        {
            try
            {
                var parts = goal.Description.Split(',');
                emCurrentSavings = decimal.Parse(parts[0].Split(':')[1].Trim());
                emMonthlyContribution = decimal.Parse(parts[1].Split(':')[1].Trim());
                emDescription = parts[2].Split(':')[1].Trim();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing emergency description: {ex.Message}");
            }
        }

        // If Travel, parse
        if (goal.IsTravelGoal && !string.IsNullOrEmpty(goal.Description))
        {
            try
            {
                var parts = goal.Description.Split(',');
                travelCurrentSavings = decimal.Parse(parts[0].Split(':')[1].Trim());
                travelMonthlyContribution = decimal.Parse(parts[1].Split(':')[1].Trim());
                travelAccommodationCosts = decimal.Parse(parts[2].Split(':')[1].Trim());
                travelTransportationCosts = decimal.Parse(parts[3].Split(':')[1].Trim());
                travelFoodEntertainmentCosts = decimal.Parse(parts[4].Split(':')[1].Trim());
                travelCategory = parts[5].Split(':')[1].Trim();
                travelDescription = parts[6].Split(':')[1].Trim();

                if (goal.Name.StartsWith("Travel to "))
                {
                    travelDestination = goal.Name.Substring("Travel to ".Length).Trim();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing travel description: {ex.Message}");
            }
        }

        // If Home, parse
        if (goal.IsHomeGoal && !string.IsNullOrEmpty(goal.Description))
        {
            try
            {
                var parts = goal.Description.Split(',');
                homePrice = decimal.Parse(parts[0].Split(':')[1].Trim());
                homeCurrentSavings = decimal.Parse(parts[1].Split(':')[1].Trim());
                homeMonthlySavings = decimal.Parse(parts[2].Split(':')[1].Trim());
                homeLoanInterestRate = decimal.Parse(parts[3].Split(':')[1].Trim().TrimEnd('%'));
                homeLoanTerm = int.Parse(parts[4].Split(':')[1].Trim().Replace("years", ""));
                homePropertyTaxes = decimal.Parse(parts[5].Split(':')[1].Trim());
                homeInsurance = decimal.Parse(parts[6].Split(':')[1].Trim());
                homeOtherCosts = decimal.Parse(parts[7].Split(':')[1].Trim());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing home description: {ex.Message}");
            }
        }
    }

    private void SaveGoal(Goal goal)
    {
        try
        {
            if (goal.IsRetirementGoal)
            {
                goal.Description = $"Current Savings: {retCurrentSavings}, Monthly Contribution: {retMonthlyContribution}, " +
                                   $"Investment Growth Rate: {retInvestmentGrowthRate}%, Inflation Rate: {retInflationRate}%, " +
                                   $"Retirement Income Needs: {retIncomeNeeds}, Other Income Sources: {retOtherIncomeSources}";
            }
            else if (goal.IsEmergencyFundGoal)
            {
                goal.Description = $"Current Savings: {emCurrentSavings}, Monthly Contribution: {emMonthlyContribution}, Description: {emDescription}";
            }
            else if (goal.IsTravelGoal)
            {
                goal.Name = $"Travel to {travelDestination}";

                goal.Description = $"Current Savings: {travelCurrentSavings}, Monthly Contribution: {travelMonthlyContribution}, " +
                                   $"Accommodation Costs: {travelAccommodationCosts}, Transportation Costs: {travelTransportationCosts}, " +
                                   $"Food and Entertainment Costs: {travelFoodEntertainmentCosts}, Travel Category: {travelCategory}, " +
                                   $"Description: {travelDescription}";
            }
            else if (goal.IsHomeGoal)
            {
                goal.Description = $"Home Price: {homePrice}, Current Savings: {homeCurrentSavings}, Monthly Savings: {homeMonthlySavings}, " +
                                   $"Loan Interest Rate: {homeLoanInterestRate}%, Loan Term: {homeLoanTerm} years, Property Taxes: {homePropertyTaxes}, " +
                                   $"Home Insurance: {homeInsurance}, Other Costs: {homeOtherCosts}";
            }

            DatabaseHelper.UpdateGoal(goal);
            goals = DatabaseHelper.GetGoals(userId);
            goal.IsEditing = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SaveGoal: {ex.Message}");
        }
    }

    private void CancelEdit(Goal goal)
    {
        goal.IsEditing = false;
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("safeDestroyChart", "goalsChart");
            objRef?.Dispose();
        }
        catch { /* Ignore cleanup errors */ }
    }
}
                