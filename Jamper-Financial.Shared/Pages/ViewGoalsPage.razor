@page "/view-goals-page"
@using Jamper_Financial.Shared.Data
@inherits LayoutComponentBase
@inject GoalState GoalState
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="header-container">
    <h3 class="header">Goals</h3>
</div>
<div class="content-container">
    <div class="view-goals-page">
        <ul>
            @foreach (var goal in goals)
            {
                <li class="goal-item @(goal.IsFadingOut ? "fade-out" : "")">
                    <div class="goal-details">
                        <div class="goal-info">
                            @if (goal.IsQuickGoal)
                            {
                                <h3>@goal.Name</h3>
                                <p>Type: @goal.Type</p>
                                <p>Amount: $@goal.Amount</p>
                                <p>Date: @goal.Date.ToShortDateString()</p>
                            }
                            else
                            {
                                <h3>@goal.Name</h3>
                                <p>Account Type: @goal.AccountType</p>
                                <p>Category: @goal.Category</p>
                                <p>Start Date: @goal.StartDate.ToShortDateString()</p>
                                <p>End Date: @goal.EndDate.ToShortDateString()</p>
                                <p>Amount: $@goal.Amount</p>
                                @if (goal.ShowDescription)
                                {
                                    <p>Frequency: @goal.Frequency</p>
                                    <p>Description: @goal.Description</p>
                                }
                            }
                        </div>
                        <div class="button-container">
                            <button class="see-more-btn" @onclick="() => ToggleDescription(goal)">...</button>
                            <button class="delete-btn" @onclick="() => ConfirmDeleteGoal(goal)">
                                <img src="images/bin.png" alt="Delete" />
                            </button>
                            <button class="check-off-btn" @onclick="() => ConfirmCheckOffGoal(goal)">
                                <img src="images/check.png" alt="Check Off" />
                            </button>
                        </div>
                    </div>

                </li>
            }
        </ul>
        <button class="add-goal-btn" @onclick="NavigateToAddGoal">Add New Goal</button>
    </div>
</div>

@code {
    private List<Goal> goals = new List<Goal>();

    protected override void OnInitialized()
    {
        goals = GoalState.Goals;
    }

    private void ToggleDescription(Goal goal)
    {
        goal.ShowDescription = !goal.ShowDescription;
    }

    private async Task DeleteGoal(Goal goal)
    {
        try
        {
            goal.IsFadingOut = true;
            await Task.Delay(500);
            GoalState.RemoveGoal(goal);
            goals.Remove(goal);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle exception (e.g., log it)
        }
    }

    private async Task CheckOffGoal(Goal goal)
    {
        try
        {
            goal.IsFadingOut = true;
            await Task.Delay(500);
            GoalState.RemoveGoal(goal);
            goals.Remove(goal);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle exception (e.g., log it)
        }
    }

    private void NavigateToAddGoal()
    {
        Navigation.NavigateTo("/add-saving-goal");
    }

    private async Task ConfirmDeleteGoal(Goal goal)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to delete the goal '{goal.Name}'?" }))
        {
            await DeleteGoal(goal);
        }
    }

    private async Task ConfirmCheckOffGoal(Goal goal)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to check off the goal '{goal.Name}'?" }))
        {
            await CheckOffGoal(goal);
        }
    }
}
