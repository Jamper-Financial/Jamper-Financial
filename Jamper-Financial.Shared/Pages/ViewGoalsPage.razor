@page "/view-goals-page"
@using Jamper_Financial.Shared.Data
@inherits LayoutComponentBase
@inject GoalState GoalState
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject DatabaseHelperFactory DatabaseHelper

<div class="header-container">
    <h3 class="header">Goals</h3>
</div>
<div class="content-container">
    <div class="view-goals-page">
        <ul>
            @foreach (var goal in goals)
            {
                <li class="goal-item @(goal.IsFadingOut ? "fade-out" : "")">
                    <div class="goal-details">
                        <div class="goal-info">
                            @if (goal.IsQuickGoal)
                            {
                                <h3>@goal.Name</h3>
                                <p>Type: @goal.Type</p>
                                <p>Amount: $@goal.Amount</p>
                                <p>Date: @goal.Date.ToShortDateString()</p>
                            }
                            else if (goal.IsRetirementGoal)
                            {
                                <h3>@goal.Name</h3>
                                <p>Target Amount: $@goal.Amount</p>
                                <p>Retirement Date: @goal.EndDate.ToShortDateString()</p>
                                @if (goal.ShowDescription)
                                {
                                    <p>Current Savings: $@goal.Description.Split(',')[0].Split(':')[1].Trim()</p>
                                    <p>Monthly Contribution: $@goal.Description.Split(',')[1].Split(':')[1].Trim()</p>
                                    <p>Investment Growth Rate: @goal.Description.Split(',')[2].Split(':')[1].Trim()</p>
                                    <p>Inflation Rate: @goal.Description.Split(',')[3].Split(':')[1].Trim()</p>
                                    <p>Retirement Income Needs: $@goal.Description.Split(',')[4].Split(':')[1].Trim()</p>
                                    <p>Other Income Sources: $@goal.Description.Split(',')[5].Split(':')[1].Trim()</p>
                                }
                            }
                            else if (goal.IsEmergencyFundGoal)
                            {
                                <h3>@goal.Name</h3>
                                <p>Target Amount: $@goal.Amount</p>
                                <p>Target Date: @goal.EndDate.ToShortDateString()</p>
                                @if (goal.ShowDescription)
                                {
                                    <p>Current Savings: $@goal.Description.Split(',')[0].Split(':')[1].Trim()</p>
                                    <p>Monthly Contribution: $@goal.Description.Split(',')[1].Split(':')[1].Trim()</p>
                                    <p>Description: @goal.Description.Split(',')[2].Split(':')[1].Trim()</p>

                                }
                            }
                            else if (goal.IsTravelGoal)
                            {
                                <h3>@goal.Name</h3>
                                <p>Destination: @goal.Name.Split(' ')[2]</p>
                                <p>Estimated Cost: $@goal.Amount</p>
                                <p>Travel Dates: @goal.StartDate.ToShortDateString() - @goal.EndDate.ToShortDateString()</p>
                                @if (goal.ShowDescription)
                                {
                                    <p>Current Savings: $@goal.Description.Split(',')[0].Split(':')[1].Trim()</p>
                                    <p>Monthly Contribution: $@goal.Description.Split(',')[1].Split(':')[1].Trim()</p>
                                    <p>Accommodation Costs: $@goal.Description.Split(',')[2].Split(':')[1].Trim()</p>
                                    <p>Transportation Costs: $@goal.Description.Split(',')[3].Split(':')[1].Trim()</p>
                                    <p>Food and Entertainment Costs: $@goal.Description.Split(',')[4].Split(':')[1].Trim()</p>
                                    <p>Travel Category: @goal.Description.Split(',')[5].Split(':')[1].Trim()</p>
                                    <p>Description: @goal.Description.Split(',')[6].Split(':')[1].Trim()</p>
                                }
                            }
                            else if (goal.IsHomeGoal)
                            {
                                <h3>@goal.Name</h3>
                                <p>Down Payment: $@goal.Amount</p>
                                <p>Target Purchase Date: @goal.EndDate.ToShortDateString()</p>
                                @if (goal.ShowDescription)
                                {
                                    <p>Home Price: $@goal.Description.Split(',')[0].Split(':')[1].Trim()</p>
                                    <p>Current Savings: $@goal.Description.Split(',')[1].Split(':')[1].Trim()</p>
                                    <p>Monthly Savings: $@goal.Description.Split(',')[2].Split(':')[1].Trim()</p>
                                    <p>Loan Interest Rate: @goal.Description.Split(',')[3].Split(':')[1].Trim()</p>
                                    <p>Loan Term: @goal.Description.Split(',')[4].Split(':')[1].Trim()</p>
                                    <p>Property Taxes: $@goal.Description.Split(',')[5].Split(':')[1].Trim()</p>
                                    <p>Home Insurance: $@goal.Description.Split(',')[6].Split(':')[1].Trim()</p>
                                    <p>Other Costs: $@goal.Description.Split(',')[7].Split(':')[1].Trim()</p>
                                }
                            }
                            else
                            {
                                <h3>@goal.Name</h3>
                                <p>Account Type: @goal.GoalType</p>
                                <p>Category: @goal.Category</p>
                                <p>Start Date: @goal.StartDate.ToShortDateString()</p>
                                <p>End Date: @goal.EndDate.ToShortDateString()</p>
                                <p>Amount: $@goal.Amount</p>
                                @if (goal.ShowDescription)
                                {
                                    <p>Frequency: @goal.Frequency</p>
                                    <p>Description: @goal.Description</p>
                                }
                            }
                        </div>
                        <div class="button-container">
                            <button class="see-more-btn" @onclick="() => ToggleDescription(goal)">...</button>
                            <button class="delete-btn" @onclick="() => ConfirmDeleteGoal(goal)">
                                <img src="images/bin.png" alt="Delete" />
                            </button>
                            <button class="check-off-btn" @onclick="() => ConfirmCheckOffGoal(goal)">
                                <img src="images/check.png" alt="Check Off" />
                            </button>
                        </div>
                    </div>

                </li>
            }
        </ul>
        <button class="back-button" @onclick="GoBack">Back</button>
    </div>
</div>

@code {
    private List<Goal> goals = new List<Goal>();

    protected override void OnInitialized()
    {
        goals = DatabaseHelper.GetGoals();
    }

    private void ToggleDescription(Goal goal)
    {
        goal.ShowDescription = !goal.ShowDescription;
    }
    private async Task DeleteGoal(Goal goal)
    {
        try
        {
            Console.WriteLine($"Attempting to delete goal with ID: {goal.GoalId}");

            // Trigger the fade-out animation
            goal.IsFadingOut = true;
            StateHasChanged(); // Force UI update

            await Task.Delay(500); // Wait for animation to complete

            // Remove from database and check if deletion was successful
            DatabaseHelper.DeleteGoal(goal.GoalId);
            await Task.Delay(100); // Give database time to process

            // Verify that the goal no longer exists
            var updatedGoals = DatabaseHelper.GetGoals();
            if (updatedGoals.Any(g => g.GoalId == goal.GoalId))
            {
                Console.WriteLine($"Failed to delete goal with ID: {goal.GoalId} from the database.");
                return; // Stop further UI updates if DB deletion failed
            }

            Console.WriteLine($"Goal with ID: {goal.GoalId} deleted from the database.");

            // Remove from UI state
            GoalState.RemoveGoal(goal);
            goals.Remove(goal);

            // Reload goals from database to ensure consistency
            goals = DatabaseHelper.GetGoals();
            Console.WriteLine($"Reloaded goals from database. Total goals: {goals.Count}");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in DeleteGoal: {ex.Message}");
        }
    }


    private async Task ConfirmDeleteGoal(Goal goal)
    {
        // Show a confirmation dialog
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the goal '{goal.Name}'?");

        if (isConfirmed)
        {
            // If confirmed, delete the goal
            await DeleteGoal(goal);
        }
    }

    private async Task CheckOffGoal(Goal goal)
    {
        try
        {
            goal.IsFadingOut = true;
            await Task.Delay(500);
            GoalState.RemoveGoal(goal);
            goals.Remove(goal);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in CheckOffGoal: {ex.Message}"); // Log any errors
        }
    }

    private async Task ConfirmCheckOffGoal(Goal goal)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to check off the goal '{goal.Name}'?" }))
        {
            await CheckOffGoal(goal);
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/saving-goals-page");
    }
}
