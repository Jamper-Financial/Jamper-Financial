@page "/view-goals-page"
@using Jamper_Financial.Shared.Data
@inherits LayoutComponentBase
@inject GoalState GoalState
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject DatabaseHelperFactory DatabaseHelper

<style>
    .transactions-page {
    padding: 20px;
    }

    .transactions-section {
    margin-top: 20px;
    }

    .transactions-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    }

    .section-title {
    font-size: 1.5rem;
    font-weight: bold;
    }

    .add-transaction {
    background-color: #28a745;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    }

    .add-transaction:hover {
    background-color: #218838;
    }

    .scrollable-table {
    max-height: 500px;
    overflow-y: auto;
    }

    table {
    width: 100%;
    border-collapse: collapse;
    }

    th, td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #ddd;
    }

    th {
    background-color: #f2f2f2;
    }

    .goal-item:hover {
    background-color: #f5f5f5;
    }

    .modify-btn, .delete-btn, .check-off-btn, .see-more-btn {
    border: none;
    background: none;
    cursor: pointer;
    }

    .modify-btn img, .delete-btn img, .check-off-btn img {
    width: 20px;
    height: 20px;
    }

    .goal-details {
    padding: 10px;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 5px;
    margin-top: 10px;
    }

    .back-button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 20px;
    }

    .back-button:hover {
    background-color: #0056b3;
    .modify-btn {
        border: none;
        border-radius: 1rem;
        width: 20px;
        height: 25px;
        cursor: pointer;
        display: inline-block;
        margin-right: 5px;
        padding: 0.2rem;
        margin: 0 0.2rem 0 0;
    }
    .modify-btn img {
        width: 20px;
        height: 20px;
    }

    .update-goal-btn {
        background-color: #28a745;
        color: #fff;
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-right: 5px;
    }
    .update-goal-btn:hover {
        background-color: #218838;
    }

    .cancel-btn {
        background-color: #fff;
        color: #28a745;
        padding: 8px 16px;
        border: 1px solid #28a745;
        border-radius: 4px;
        cursor: pointer;
    }
    .cancel-btn:hover {
        background-color: #88db9b;
        color:#fff;
    }

    .edit-goal-form {
    border: 1px solid #ccc;
    padding: 1rem;
    margin-top: 1rem;
    border-radius: 5px;
    background-color: #f9f9f9;
    }

    .update-goal-btn {
    background-color: #28a745;
    color: #fff;
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-right: 5px;
    }

    .update-goal-btn:hover {
    background-color: #218838;
    }

    .cancel-btn {
    background-color: #fff;
    color: #28a745;
    padding: 8px 16px;
    border: 1px solid #28a745;
    border-radius: 4px;
    cursor: pointer;
    }

    .cancel-btn:hover {
    background-color: #88db9b;
    color: #fff;
    }

    .modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgb(0,0,0);
    background-color: rgba(0,0,0,0.4);
    padding-top: 60px;
    }

    .modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    }

    .close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    }

    .close:hover,
    .close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
    }
</style>
<div class="content-container">
    <div class="transactions-page">
        <div class="transactions-section">
            <div class="transactions-header">
                <h3 class="section-title">Goals</h3>
            </div>
            <div class="scrollable-table">
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Amount</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (goals != null)
                        {
                            @foreach (var goal in goals)
                            {
                                <tr class="goal-item @(goal.IsFadingOut ? "fade-out" : "")">
                                    <td>@goal.Name</td>
                                    <td>@goal.Amount.ToString("C")</td>
                                    <td>@goal.StartDate.ToShortDateString()</td>
                                    <td>@goal.EndDate.ToShortDateString()</td>
                                    <td>
                                        <button class="see-more-btn" @onclick="() => ToggleDescription(goal)">...</button>
                                        <button class="modify-btn" @onclick="() => StartEditing(goal)">
                                            <img src="images/edit.png" alt="Edit" />
                                        </button>
                                        <button class="delete-btn" @onclick="() => ConfirmDeleteGoal(goal)">
                                            <img src="images/bin.png" alt="Delete" />
                                        </button>
                                        <button class="check-off-btn" @onclick="() => ConfirmDeleteGoal(goal)">
                                            <img src="images/check.png" alt="Check Off" />
                                        </button>
                                    </td>
                                </tr>
                                @if (goal.IsEditing)
    <div class="view-goals-page">
        <ul>
            @foreach (var goal in goals)
            {
                <li class="goal-item @(goal.IsFadingOut ? "fade-out" : "")">

                    @if (!goal.IsEditing)
                    {
                        <div class="goal-details">
                            <div class="goal-info">
                                @if (goal.IsQuickGoal)
                                {
                                    <h3>@goal.Name</h3>
                                    <p>Type: @goal.Type</p>
                                    <p>Amount: $@goal.Amount</p>
                                    <p>Start Date: @goal.StartDate.ToShortDateString()</p>
                                    <p>End Date: @goal.EndDate.ToShortDateString()</p>
                                }
                                else if (goal.IsRetirementGoal)
                                {
                                    <h3>Retirement Goal</h3>
                                    <p>Target Amount: $@goal.Amount</p>
                                    <p>Retirement Date: @goal.EndDate.ToShortDateString()</p>
                                    @if (goal.ShowDescription)
                                    {
                                        <p>Current Savings: $@goal.Description.Split(',')[0].Split(':')[1].Trim()</p>
                                        <p>Monthly Contribution: $@goal.Description.Split(',')[1].Split(':')[1].Trim()</p>
                                    }
                                }
                                else if (goal.IsEmergencyFundGoal)
                                {
                                    <h3>@goal.Name</h3>
                                    <p>Target Amount: $@goal.Amount</p>
                                    <p>Target Date: @goal.EndDate.ToShortDateString()</p>
                                    @if (goal.ShowDescription)
                                    {
                                        <p>Current Savings: $@goal.Description.Split(',')[0].Split(':')[1].Trim()</p>
                                        <p>Monthly Contribution: $@goal.Description.Split(',')[1].Split(':')[1].Trim()</p>
                                        <p>Description: @goal.Description.Split(',')[2].Split(':')[1].Trim()</p>
                                    }
                                }
                                else if (goal.IsTravelGoal)
                                {
                                    <h3>@goal.Name</h3>
                                    <p>Destination: @goal.Name.Split(' ').Length > 2 ? @goal.Name.Split(' ')[2] : "N/A"</p>
                                    <p>Estimated Cost: $@goal.Amount</p>
                                    <p>Travel Dates: @goal.StartDate.ToShortDateString() - @goal.EndDate.ToShortDateString()</p>
                                    @if (goal.ShowDescription)
                                    {
                                        var descriptionParts = goal.Description.Split(',');
                                        <p>Current Savings: $@(descriptionParts.Length > 0 ? descriptionParts[0].Split(':')[1].Trim() : "N/A")</p>
                                        <p>Monthly Contribution: $@(descriptionParts.Length > 1 ? descriptionParts[1].Split(':')[1].Trim() : "N/A")</p>
                                        <p>Description: @(descriptionParts.Length > 2 ? descriptionParts[2].Split(':')[1].Trim() : "N/A")</p>
                                    }
                                }
                                else if (goal.IsHomeGoal)
                                {
                                    <h3>@goal.Name</h3>
                                    <p>Target Purchase Date: @goal.EndDate.ToShortDateString()</p>
                                    @if (goal.ShowDescription)
                                    {
                                        <p>Home Price: $@goal.Description.Split(',')[0].Split(':')[1].Trim()</p>
                                        <p>Current Savings: $@goal.Description.Split(',')[1].Split(':')[1].Trim()</p>
                                        <p>Monthly Savings: $@goal.Description.Split(',')[2].Split(':')[1].Trim()</p>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="6">
                                            <div class="edit-goal-form">
                                                <h3>Edit Goal</h3>
                                                <form @onsubmit="async (e) => SaveGoal(goal)">
                                                    @if(goal.IsQuickGoal)
                                                    {
                                                        <div class="form-group">
                                                            <label for="name">Name:</label>
                                                            <input id="name" @bind="goal.Name" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="type">Type:</label>
                                                            <input id="type" @bind="goal.Type" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="amount">Amount:</label>
                                                            <input id="amount" type="number" step="0.01" @bind="goal.Amount" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="startDate">Start Date:</label>
                                                            <input id="startDate" type="date" @bind="goal.StartDate" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="endDate">End Date:</label>
                                                            <input id="endDate" type="date" @bind="goal.EndDate" required />
                                                        </div>
                                                    }
                                                    else if (goal.IsRetirementGoal)
                                                    {
                                                        <div class="form-group">
                                                            <label for="amount">Target Amount:</label>
                                                            <input id="amount" type="number" step="0.01" @bind="goal.Amount" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="retCurrentSavings">Current Savings:</label>
                                                            <input id="retCurrentSavings" type="number" step="0.01" @bind="retCurrentSavings" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="retMonthlyContribution">Monthly Contribution:</label>
                                                            <input id="retMonthlyContribution" type="number" step="0.01" @bind="retMonthlyContribution" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="endDate">End Date:</label>
                                                            <input id="endDate" type="date" @bind="goal.EndDate" required />
                                                        </div>
                                                    }
                                                    else if (goal.IsEmergencyFundGoal)
                                                    {
                                                        <div class="form-group">
                                                            <label for="amount">Target Amount:</label>
                                                            <input id="amount" type="number" step="0.01" @bind="goal.Amount" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="emCurrentSavings">Current Savings:</label>
                                                            <input id="emCurrentSavings" type="number" step="0.01" @bind="emCurrentSavings" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="emMonthlyContribution">Monthly Contribution:</label>
                                                            <input id="emMonthlyContribution" type="number" step="0.01" @bind="emMonthlyContribution" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="endDate">Target Date:</label>
                                                            <input id="endDate" type="date" @bind="goal.EndDate" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="emDescription">Description:</label>
                                                            <input id="emDescription" @bind="emDescription" required />
                                                        </div>
                                                    }
                                                    else if (goal.IsTravelGoal)
                                                    {
                                                        <div class="form-group">
                                                            <label for="travelDestination">Destination:</label>
                                                            <input id="travelDestination" @bind="travelDestination" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="startDate">Start Date:</label>
                                                            <input id="startDate" type="date" @bind="goal.StartDate" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="endDate">End Date:</label>
                                                            <input id="endDate" type="date" @bind="goal.EndDate" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="amount">Estimated Cost:</label>
                                                            <input id="amount" type="number" step="0.01" @bind="goal.Amount" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="travelCurrentSavings">Current Savings:</label>
                                                            <input id="travelCurrentSavings" type="number" step="0.01" @bind="travelCurrentSavings" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="travelMonthlyContribution">Monthly Contribution:</label>
                                                            <input id="travelMonthlyContribution" type="number" step="0.01" @bind="travelMonthlyContribution" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="travelDescription">Description:</label>
                                                            <input id="travelDescription" @bind="travelDescription" required />
                                                        </div>
                                                    }
                                                    else if (goal.IsHomeGoal)
                                                    {
                                                        <div class="form-group">
                                                            <label for="homePrice">Home Price:</label>
                                                            <input id="homePrice" type="number" step="0.01" @bind="homePrice" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="homeCurrentSavings">Current Savings:</label>
                                                            <input id="homeCurrentSavings" type="number" step="0.01" @bind="homeCurrentSavings" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="homeMonthlySavings">Monthly Savings:</label>
                                                            <input id="homeMonthlySavings" type="number" step="0.01" @bind="homeMonthlySavings" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="endDate">Target Purchase Date:</label>
                                                            <input id="endDate" type="date" @bind="goal.EndDate" required />
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="form-group">
                                                            <label for="name">Name:</label>
                                                            <input id="name" @bind="goal.Name" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="startDate">Start Date:</label>
                                                            <input id="startDate" type="date" @bind="goal.StartDate" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="endDate">End Date:</label>
                                                            <input id="endDate" type="date" @bind="goal.EndDate" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="amount">Amount:</label>
                                                            <input id="amount" type="number" step="0.01" @bind="goal.Amount" required />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="frequency">Frequency:</label>
                                                            <select id="frequency" @bind="goal.Frequency" required>
                                                                <option value="Daily">Daily</option>
                                                                <option value="Every two Weeks">Every two Weeks</option>
                                                                <option value="Monthly">Monthly</option>
                                                                <option value="Annually">Annually</option>
                                                            </select>
                                                        </div>

                                                        <div class="form-group">
                                                            <label for="description">Description:</label>
                                                            <input id="description" @bind="goal.Description" required />
                                                        </div>
                                                    }

                                                    <div class="form-group button-group">
                                                        <button type="submit" class="update-goal-btn">Save</button>
                                                        <button type="button" class="cancel-btn" @onclick="() => CancelEdit(goal)">Cancel</button>
                                                    </div>
                                                </form>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
                            </div>
                            <div class="button-container">
                                <button class="see-more-btn" @onclick="() => ToggleDescription(goal)">...</button>
                                <button class="modify-btn" @onclick="() => StartEditing(goal)">
                                    <img src="images/edit.png" alt="Edit" />
                                </button>
                                <button class="delete-btn" @onclick="() => ConfirmDeleteGoal(goal)">
                                    <img src="images/bin.png" alt="Delete" />
                                </button>
                                <button class="check-off-btn" @onclick="() => ConfirmCheckOffGoal(goal)">
                                    <img src="images/check.png" alt="Check Off" />
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="edit-goal-form">
                            @if (goal.IsQuickGoal)
                            {
                                <h3>Editing Quick Goal</h3>
                                <div class="form-group">
                                    <label>Goal Type</label>
                                    <input type="text" @bind="goal.Type" />
                                </div>
                                <div class="form-group">
                                    <label>Name of goal</label>
                                    <input type="text" @bind="goal.Name" />
                                </div>
                                <div class="form-group">
                                    <label>Amount</label>
                                    <input type="number" step="0.01" @bind="goal.Amount" />
                                </div>
                                <div class="form-group">
                                    <label>Start Date</label>
                                    <input type="date" @bind="goal.StartDate" />
                                </div>
                                <div class="form-group">
                                    <label>End Date</label>
                                    <input type="date" @bind="goal.EndDate" />
                                </div>
                            }
                            else if (goal.IsRetirementGoal)
                            {
                                <h3>Editing Retirement Goal</h3>
                                <!-- ADDED: Removed extra fields to match new "Save for Retirement" -->
                                <div class="form-group">
                                    <label>Target Amount</label>
                                    <input type="number" step="0.01" @bind="goal.Amount" />
                                </div>
                                <div class="form-group">
                                    <label>Current Savings</label>
                                    <input type="number" step="0.01" @bind="retCurrentSavings" />
                                </div>
                                <div class="form-group">
                                    <label>Monthly Contribution</label>
                                    <input type="number" step="0.01" @bind="retMonthlyContribution" />
                                </div>
                                <div class="form-group">
                                    <label>Goal Retirement Date</label>
                                    <input type="date" @bind="goal.EndDate" />
                                </div>
                            }
                            else if (goal.IsEmergencyFundGoal)
                            {
                                <h3>Editing Emergency Fund Goal</h3>
                                <div class="form-group">
                                    <label>Target Amount</label>
                                    <input type="number" step="0.01" @bind="goal.Amount" />
                                </div>
                                <div class="form-group">
                                    <label>Current Savings</label>
                                    <input type="number" step="0.01" @bind="emCurrentSavings" />
                                </div>
                                <div class="form-group">
                                    <label>Monthly Contribution</label>
                                    <input type="number" step="0.01" @bind="emMonthlyContribution" />
                                </div>
                                <div class="form-group">
                                    <label>Target Date</label>
                                    <input type="date" @bind="goal.EndDate" />
                                </div>
                                <div class="form-group">
                                    <label>Description</label>
                                    <textarea @bind="emDescription"></textarea>
                                </div>
                            }
                            else if (goal.IsTravelGoal)
                            {
                                <h3>Editing Travel Goal</h3>
                                <!-- ADDED: Removed extra fields to match new "Save for Traveling" -->
                                <div class="form-group">
                                    <label>Destination</label>
                                    <input type="text" @bind="travelDestination" />
                                </div>
                                <div class="form-group">
                                    <label>Start Date</label>
                                    <input type="date" @bind="goal.StartDate" />
                                </div>
                                <div class="form-group">
                                    <label>End Date</label>
                                    <input type="date" @bind="goal.EndDate" />
                                </div>
                                <div class="form-group">
                                    <label>Estimated Cost</label>
                                    <input type="number" step="0.01" @bind="goal.Amount" />
                                </div>
                                <div class="form-group">
                                    <label>Current Savings</label>
                                    <input type="number" step="0.01" @bind="travelCurrentSavings" />
                                </div>
                                <div class="form-group">
                                    <label>Monthly Contribution</label>
                                    <input type="number" step="0.01" @bind="travelMonthlyContribution" />
                                </div>
                                <div class="form-group">
                                    <label>Description</label>
                                    <textarea @bind="travelDescription"></textarea>
                                </div>
                            }
                            else if (goal.IsHomeGoal)
                            {
                                <h3>Editing Home Goal</h3>
                                <!-- ADDED: Removed extra fields to match new "Save to Buy a Home" -->
                                <div class="form-group">
                                    <label>Home Price</label>
                                    <input type="number" step="0.01" @bind="homePrice" />
                                </div>
                                <div class="form-group">
                                    <label>Current Savings</label>
                                    <input type="number" step="0.01" @bind="homeCurrentSavings" />
                                </div>
                                <div class="form-group">
                                    <label>Monthly Savings</label>
                                    <input type="number" step="0.01" @bind="homeMonthlySavings" />
                                </div>
                                <div class="form-group">
                                    <label>Target Purchase Date</label>
                                    <input type="date" @bind="goal.EndDate" />
                                </div>
                            }
                            else
                            {
                                <h3>Editing Custom Goal</h3>
                                <!-- ADDED: Updated to match "Add a Saving Goal" fields -->
                                <div class="form-group">
                                    <label>Name of goal</label>
                                    <input type="text" @bind="goal.Name" />
                                </div>
                                <div class="form-group">
                                    <label>Choose an Account</label>
                                    <select @bind="goal.GoalType">
                                        <option value="">Select an Account</option>
                                        <option value="Savings Account 1">Savings Account 1</option>
                                        <option value="Savings Account 2">Savings Account 2</option>
                                        <option value="Savings Account 3">Savings Account 3</option>
                                        <option value="Checking Account 1">Checking Account 1</option>
                                        <option value="Checking Account 2">Checking Account 2</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Category</label>
                                    <select @bind="goal.Category">
                                        <option value="">Select a Category</option>
                                        <option value="Entertainment">Entertainment</option>
                                        <option value="Debt & Loans">Debt & Loans</option>
                                        <option value="Subscriptions & Memberships">Subscriptions & Memberships</option>
                                        <option value="Savings & Investments">Savings & Investments</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Start Date</label>
                                    <input type="date" @bind="goal.StartDate" />
                                </div>
                                <div class="form-group">
                                    <label>End Date</label>
                                    <input type="date" @bind="goal.EndDate" />
                                </div>
                                <div class="form-group">
                                    <label>Amount</label>
                                    <input type="number" step="0.01" @bind="goal.Amount" />
                                </div>
                                <div class="form-group">
                                    <label>Frequency</label>
                                    <select @bind="goal.Frequency">
                                        <option value="">Select Frequency</option>
                                        <option value="Daily">Daily</option>
                                        <option value="Every 2 Weeks">Every 2 Weeks</option>
                                        <option value="Monthly">Monthly</option>
                                        <option value="Annually">Annually</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Description</label>
                                    <textarea @bind="goal.Description"></textarea>
                                </div>
                            }

                            <button class="update-goal-btn" @onclick="() => SaveGoal(goal)">Save</button>
                            <button class="cancel-btn" @onclick="() => CancelEdit(goal)">Cancel</button>
                        </div>
                    }
                </li>
            }
        </ul>
        <button class="back-button" @onclick="GoBack">Back</button>
    </div>
</div>

<div id="goalModal" class="modal" style="@(showModal ? "display:block;" : "display:none;")">
    <div class="modal-content">
        <span class="close" @onclick="CloseModal">&times;</span>
        @if (selectedGoal != null)
        {
            <div class="goal-details">
                <h3>Goal Details</h3>
                @if (selectedGoal.IsQuickGoal)
                {
                    <p><strong>Name:</strong> @selectedGoal.Name</p>
                    <p><strong>Type:</strong> @selectedGoal.Type</p>
                    <p><strong>Amount:</strong> @selectedGoal.Amount.ToString("C")</p>
                    <p><strong>Start Date:</strong> @selectedGoal.StartDate.ToShortDateString()</p>
                    <p><strong>End Date:</strong> @selectedGoal.EndDate.ToShortDateString()</p>
                }
                else if (selectedGoal.IsRetirementGoal)
                {
                    var parts = selectedGoal.Description.Split(',');
                    <p><strong>Name:</strong>Retirement</p>
                    <p><strong>Amount:</strong> @selectedGoal.Amount.ToString("C")</p>
                    <p><strong>Current Savings:</strong> $@(parts.Length > 0 ? parts[0].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Monthly Contribution:</strong> $@(parts.Length > 1 ? parts[1].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Retirement Date:</strong> @selectedGoal.Date.ToShortDateString()</p>
                }
                else if (selectedGoal.IsEmergencyFundGoal)
                {
                    var parts = selectedGoal.Description.Split(',');
                    <p><strong>Amount:</strong> @selectedGoal.Amount.ToString("C")</p>
                    <p><strong>Current Savings:</strong> $@(parts.Length > 0 ? parts[0].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Monthly Contribution:</strong> $@(parts.Length > 1 ? parts[1].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Target Date:</strong> @selectedGoal.EndDate.ToShortDateString()</p>
                    <p><strong>Description:</strong> @(parts.Length > 2 ? parts[2].Split(':')[1].Trim() : "N/A")</p>
                }
                else if (selectedGoal.IsTravelGoal)
                {
                    var parts = selectedGoal.Description.Split(',');
                    <p><strong>Name:</strong> @selectedGoal.Name</p>
                    <p><strong>Start Date:</strong> @selectedGoal.StartDate.ToShortDateString()</p>
                    <p><strong>End Date:</strong> @selectedGoal.EndDate.ToShortDateString()</p>
                    <p><strong>Estimated Cost:</strong> $@(parts.Length > 0 ? parts[0].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Current Savings:</strong> $@(parts.Length > 0 ? parts[0].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Monthly Contribution:</strong> $@(parts.Length > 1 ? parts[1].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Description:</strong> @(parts.Length > 2 ? parts[2].Split(':')[1].Trim() : "N/A")</p>
                }
                else if (selectedGoal.IsHomeGoal)
                {
                    var parts = selectedGoal.Description.Split(',');
                    <p><strong>Home Price:</strong> $@(parts.Length > 0 ? parts[0].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Amount:</strong> @selectedGoal.Amount.ToString("C")</p>
                    <p><strong>Current Savings:</strong> $@(parts.Length > 1 ? parts[1].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>Monthly Savings:</strong> $@(parts.Length > 2 ? parts[2].Split(':')[1].Trim() : "N/A")</p>
                    <p><strong>targetted Purchase Date:</strong> @selectedGoal.EndDate.ToShortDateString()</p>
                }
                else
                {
                    <p><strong>Name of goal:</strong> @selectedGoal.Name</p>
                    <p><strong>Account:</strong> @selectedGoal.Type</p>
                    <p><strong>Category:</strong> @selectedGoal.Category</p>
                    <p><strong>Start Date:</strong> @selectedGoal.StartDate.ToShortDateString()</p>
                    <p><strong>End Date:</strong> @selectedGoal.EndDate.ToShortDateString()</p>
                    <p><strong>Amount:</strong> @selectedGoal.Amount.ToString("C")</p>
                    <p><strong>Frequency:</strong> @selectedGoal.Frequency</p>
                    <p><strong>Description:</strong> @selectedGoal.Description</p>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<Goal> goals = new List<Goal>();
    private Goal selectedGoal;
    private bool showModal = false;

    // Local fields for Retirement
    private decimal retTargetAmount;
    private decimal retCurrentSavings;
    private decimal retMonthlyContribution;
    //local fields for Retirement
    private decimal retCurrentSavings;         // ADDED: We'll keep these for new retirement fields
    private decimal retMonthlyContribution;    // ADDED

    // Removed old retirement fields (investmentGrowthRate, inflationRate, etc.) // ADDED

    // Local fields for Emergency
    private decimal emCurrentSavings;
    private decimal emMonthlyContribution;
    private string emDescription;

    // Local fields for Travel
    private string travelDestination;
    private decimal travelCurrentSavings;
    private decimal travelMonthlyContribution;
    private string travelDescription;
    private string travelDescription;  // ADDED: We'll store only a single description now

    // Removed travelCategory, travelAccommodationCosts, travelTransportationCosts, travelFoodEntertainmentCosts // ADDED


    // Local fields for Home
    private decimal homePrice;
    private decimal homeCurrentSavings;
    private decimal homeMonthlySavings;

    // Removed loanInterestRate, loanTerm, propertyTaxes, insurance, otherCosts // ADDED

    protected override void OnInitialized()
    {
        goals = DatabaseHelper.GetGoals();
    }

    private void ToggleDescription(Goal goal)
    {
        selectedGoal = goal;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        selectedGoal = null;
    }

    private async Task DeleteGoal(Goal goal)
    {
        try
        {
            Console.WriteLine($"Attempting to delete goal with ID: {goal.GoalId}");

            // Trigger the fade-out animation
            goal.IsFadingOut = true;
            StateHasChanged();

            await Task.Delay(500);

            DatabaseHelper.DeleteGoal(goal.GoalId);
            await Task.Delay(100);

            var updatedGoals = DatabaseHelper.GetGoals();
            if (updatedGoals.Any(g => g.GoalId == goal.GoalId))
            {
                return;
            }
            goals.Remove(goal);
            goals = DatabaseHelper.GetGoals();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            
        }
    }

    private async Task ConfirmDeleteGoal(Goal goal)
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", $" {goal.Name} will permanently be gone, are you sure!");
        if (isConfirmed)
        {
            await DeleteGoal(goal);
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/saving-goals-page");
    }

    private void StartEditing(Goal goal)
    {
        goal.IsEditing = true;

        // Save for retirement
        if (goal.IsRetirementGoal && !string.IsNullOrEmpty(goal.Description))
        {
            try
            {
                var parts = goal.Description.Split(',');
                retCurrentSavings = decimal.Parse(parts[0].Split(':')[1].Trim());
                retMonthlyContribution = decimal.Parse(parts[1].Split(':')[1].Trim());
            }
            catch (Exception ex)
            {

            }
        }

        // Save for Emergency find
        if (goal.IsEmergencyFundGoal && !string.IsNullOrEmpty(goal.Description))
        {
            try
            {
                var parts = goal.Description.Split(',');
                emCurrentSavings = decimal.Parse(parts[0].Split(':')[1].Trim());
                emMonthlyContribution = decimal.Parse(parts[1].Split(':')[1].Trim());
                emDescription = parts[2].Split(':')[1].Trim();
            }
            catch (Exception ex)
            {

            }
        }

        // Save for Traveling
        if (goal.IsTravelGoal && !string.IsNullOrEmpty(goal.Description))
        {
            try
            {
                var parts = goal.Description.Split(',');
                travelCurrentSavings = decimal.Parse(parts[0].Split(':')[1].Trim());
                travelMonthlyContribution = decimal.Parse(parts[1].Split(':')[1].Trim());
                travelDescription = parts[6].Split(':')[1].Trim();
                travelDescription = parts[2].Split(':')[1].Trim();

                if (goal.Name.StartsWith("Travel to "))
                {
                    travelDestination = goal.Name.Substring("Travel to ".Length).Trim();
                }
            }
            catch (Exception ex)
            {

            }
        }

        // Saving for a Home
        if (goal.IsHomeGoal && !string.IsNullOrEmpty(goal.Description))
        {
            try
            {
                var parts = goal.Description.Split(',');
                homePrice = decimal.Parse(parts[0].Split(':')[1].Trim());
                homeCurrentSavings = decimal.Parse(parts[1].Split(':')[1].Trim());
                homeMonthlySavings = decimal.Parse(parts[2].Split(':')[1].Trim());
            }
            catch (Exception ex)
            {

            }
        }
    }

    private void SaveGoal(Goal goal)
    {
        try
        {
            if (goal.IsRetirementGoal)
            {
                goal.Description = $"Current Savings: {retCurrentSavings}, Monthly Contribution: {retMonthlyContribution},";
            // Retirement
            if (goal.IsRetirementGoal)
            {
                goal.Description = $"Current Savings: {retCurrentSavings}, Monthly Contribution: {retMonthlyContribution}";
            }
            else if (goal.IsEmergencyFundGoal)
            {
                goal.Description = $"Current Savings: {emCurrentSavings}, Monthly Contribution: {emMonthlyContribution}, Description: {emDescription}";
            }
            else if (goal.IsTravelGoal)
            {
                goal.Name = $"Travel to {travelDestination}";
                goal.Description = $"Current Savings: {travelCurrentSavings}, Monthly Contribution: {travelMonthlyContribution}, " +
                                   $"Description: {travelDescription}";
            }
            else if (goal.IsHomeGoal)
            {
                goal.Description = $"Home Price: {homePrice}, Current Savings: {homeCurrentSavings}, Monthly Savings: {homeMonthlySavings}, ";
            }

            DatabaseHelper.UpdateGoal(goal);
            goals = DatabaseHelper.GetGoals();
            goal.IsEditing = false;
            showModal = false;
                // rename the goal to "Travel to X"
                goal.Name = $"Travel to {travelDestination}";
                goal.Description = $"Current Savings: {travelCurrentSavings}, Monthly Contribution: {travelMonthlyContribution}, Description: {travelDescription}";
            }
            else if (goal.IsHomeGoal)
            {
                // store only homePrice, homeCurrentSavings, homeMonthlySavings
                goal.Description = $"Home Price: {homePrice}, Current Savings: {homeCurrentSavings}, Monthly Savings: {homeMonthlySavings}";
            }

            // Update the database
            DatabaseHelper.UpdateGoal(goal);

            // Reload from DB
            goals = DatabaseHelper.GetGoals();

            // End editing
            goal.IsEditing = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SaveGoal: {ex.Message}");
        }
    }

    private void CancelEdit(Goal goal)
    {
        goal.IsEditing = false;
    }
}
