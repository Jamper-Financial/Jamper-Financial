@page "/dashboard-page"
@inherits LayoutComponentBase
@using Jamper_Financial.Shared.Data
@using Jamper_Financial.Shared.Services
@using Jamper_Financial.Shared.Models
@inject NavigationManager Navigation
@inject IUserService UserService
@inject LoginStateService LoginState
@inject UserStateService UserStateService
@inject IExpenseService ExpenseService
@inject IJSRuntime JS

@code {
    [CascadingParameter] private Action<string> SetPageTitle { get; set; }

    private UserProfile userProfile = new UserProfile();
    private int currentIndex = 0;
    private List<CardItem> cards = new List<CardItem>
    {
        new CardItem { Title = "History", Route = "/dashboard-page", ChartType = "HistoryChart" },
        new CardItem { Title = "Recent Transactions", Route = "/transactions-page", ChartType = "SavingsGoalsChart" },
        new CardItem { Title = "Manage Saving Goals", Route = "/view-goals-page", ChartType = "SavingsGoalsChart" },
        // new CardItem { Title = "Budget vs Planned", Route = "/budget-Insights", ChartType = "BudgetInsigts" },
        // new CardItem { Title = "Subscription Due", Route = "/calendar", ChartType = "UpcomingSubscriptions" },

    };
    private List<Expense> weeklyExpenses = new List<Expense>();
    private List<Expense> monthlyExpenses = new List<Expense>();
    private bool isChartRendered = false;
    string username = "";

    protected override async Task OnInitializedAsync()
    {
        SetPageTitle("Dashboard");

        // Get the logged-in user's ID and username from the UserStateService
        int userId = UserStateService.UserId;
        username = UserStateService.Username;

        Console.WriteLine(username);

        if (userId > 0)
        {
            userProfile = await UserService.GetUserProfileByIdAsync(userId);
            weeklyExpenses = await ExpenseService.GetExpensesAsync(userId, "weekly");
            monthlyExpenses = await ExpenseService.GetExpensesAsync(userId, "monthly");
            Console.WriteLine(weeklyExpenses.Count);
        }
        else
        {
            Navigation.NavigateTo("/login");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderHistoryChart();
            await RenderSavingGoalsChart();
            await RenderWeeklyChart();
            isChartRendered = true;
        }
    }

    private async Task RenderWeeklyChart()
    {
        var daysOfWeek = new[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
        var expenseData = new decimal[7];
        var salaryData = new decimal[7];

        foreach (var expense in weeklyExpenses)
        {
            var dayOfWeek = (int)expense.Date.DayOfWeek;
            expenseData[dayOfWeek] += expense.ExpenseAmount;
            salaryData[dayOfWeek] += expense.SalaryAmount;
        }

        var chartData = new
        {
            labels = daysOfWeek,
            datasets = new[]
            {
                new
                {
                    label = "Expenses",
                    data = expenseData,
                    backgroundColor = "rgba(75, 192, 192, 0.2)",
                    borderColor = "rgba(75, 192, 192, 1)",
                    borderWidth = 1,
                    borderRadius = 0
                },
                new
                {
                    label = "Salary",
                    data = salaryData,
                    backgroundColor = "rgba(153, 102, 255, 0.2)",
                    borderColor = "rgba(153, 102, 255, 1)",
                    borderWidth = 1 ,
                    borderRadius = 10
                }
            }
        };
        await JS.InvokeVoidAsync("initializeBarChart", "weeklyActivityChart", chartData, "y");
    }

    private async Task RenderHistoryChart()
    {
        var months = new[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
        var incomeData = new decimal[12];
        var expenseData = new decimal[12];
        var differenceData = new decimal[12];

        foreach (var expense in monthlyExpenses)
        {
            var month = expense.Date.Month - 1; // Month is 1-based, array is 0-based
            expenseData[month] += expense.ExpenseAmount;
            incomeData[month] += expense.SalaryAmount;
        }

        for (int i = 0; i < 12; i++)
        {
            differenceData[i] = incomeData[i] - expenseData[i];
        }

        var chartData = new
        {
            labels = months,
            datasets = new[]
            {
            new
            {
                label = "Total Income - Expenses",
                data = differenceData,
                backgroundColor = "rgba(75, 192, 192, 0.2)",
                borderColor = "rgba(75, 192, 192, 1)",
                // fill = "origin",
                // borderWidth = 1,
                // borderRadius = 0,
                // fill = {
                //     target: "origin",
                //     above: "rgb(255, 0, 0)",   Area will be red above the origin
                //     below: "rgb(0, 0, 255)"   And blue below the origin
                //     },
                // lineTension = 0.5
            }
        }
        };
        await JS.InvokeVoidAsync("initializeLineChart", "HistoryChart", chartData);
    }


    private async Task RenderSavingGoalsChart()
    {
        var daysOfWeek = new[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
        var expenseData = new decimal[7];
        var salaryData = new decimal[7];

        foreach (var expense in weeklyExpenses)
        {
            var dayOfWeek = (int)expense.Date.DayOfWeek;
            expenseData[dayOfWeek] += expense.ExpenseAmount;
            salaryData[dayOfWeek] += expense.SalaryAmount;
        }

        var chartData = new
        {
            labels = daysOfWeek,
            datasets = new[]
            {
                new
                {
                    label = "Expenses",
                    data = expenseData,
                    backgroundColor = "rgba(75, 192, 192, 0.2)",
                    borderColor = "rgba(75, 192, 192, 1)",
                    borderWidth = 1,
                    borderRadius = 0
                },
                new
                {
                    label = "Salary",
                    data = salaryData,
                    backgroundColor = "rgba(153, 102, 255, 0.2)",
                    borderColor = "rgba(153, 102, 255, 1)",
                    borderWidth = 1 ,
                    borderRadius = 10
                }
            }
        };
        await JS.InvokeVoidAsync("initializeBarChart", "SavingsGoalsChart", chartData);
    }

    private void NextCard()
    {
        currentIndex = (currentIndex + 1) % cards.Count;
    }

    private void NavigateToPage(string route)
    {
        Navigation.NavigateTo(route);
    }

    private class CardItem
    {
        public string Title { get; set; }
        public string Route { get; set; }
        public string ChartType { get; set; }
    }
}

<div class="dashboard-container">
    <div class="dashboard-header">
        <h3>Welcome back <span>@username</span> to Finance!</h3>
    </div>

    <!-- Carousel Section -->
    <div class="carousel">
        @foreach (var card in cards)
        {
            <div class="flex-column flex">
                <h3 class="card-title flex-item">
                    @card.Title
                </h3>
                <div class="card flex-item" @onclick="@(() => NavigateToPage(card.Route))">
                    <canvas id="@card.ChartType"></canvas>
                </div>
            </div>
        }
        <button class="carousel-button" @onclick="NextCard">&#10095;</button>
    </div>

    <!-- History Section -->
    <div class="weekly-activity">
        <h3>Weekly Activity</h3>
        <div class="card">
            <canvas id="weeklyActivityChart"></canvas>
        </div>
    </div>
</div>