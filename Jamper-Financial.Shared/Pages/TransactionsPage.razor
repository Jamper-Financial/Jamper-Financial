@page "/Transactions-Page"
@inherits LayoutComponentBase

@using Jamper_Financial.Shared.Data;
@using Jamper_Financial.Shared.Utilities;

<div class="transactions-page">

    @* Expenses Section *@
    <div class="expenses-section">
        <div class="expenses-header">
            <h3 class="section-title">Expenses</h3>
        </div>
        <div class="charts-container">
            <div class="chart">
                <div class="chart-placeholder">[Bar Chart]</div>
            </div>
            <div class="chart">
                <div class="chart-placeholder">[Line Chart]</div>
            </div>
            <div class="chart">
                <div class="chart-placeholder">[Pie Chart 1]</div>
            </div>
        </div>
    </div>

    @* Transactions Section *@
    <div class="transactions-section">
        <div class="transactions-header">
            <h3 class="section-title">Recent Transactions</h3>
            <button class="add-transaction" @onclick="OpenAddTransactionModal">+ Add Transaction</button>
        </div>
        <div class="transactions-table scrollable-table">
            <table>
                <thead>
                    <tr>
                        <th>Description</th>
                        <th>Transaction ID</th>
                        <th>Type</th>
                        <th>Card</th>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Receipt</th>
                    </tr>
                </thead>
                <tbody>
                    @if (transactions != null)
                    {
                        @foreach (var transaction in transactions)
                        {
                            <tr class="transaction-item" @onclick="() => ShowEditTransactionModal(transaction)" style="cursor: pointer;">
                                <td>@transaction.Description</td>
                                <td>@transaction.TransactionID</td>
                                <td>@transaction.Category</td>
                                <td>1234 ****</td>
                                <td>@transaction.Date.ToString("dd MMM, hh:mm tt")</td>
                                <td class="@(transaction.Debit > 0 ? "negative" : "positive")">@((transaction.Debit > 0 ? transaction.Debit : transaction.Credit).ToString("C"))</td>
                                <td><button class="view-details">View Receipt</button></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@* Add/Edit Transaction Modal *@
@if (ShowAddTransactionModal)
{
    <div class="modal">
        <div class="modal-content">
            @if (ShowDeleteConfirmation)
            {
                <h3>Confirm Deletion</h3>
                <p>Are you sure you want to delete this transaction?</p>
                <div class="form-group button-group">
                    <button type="button" class="save" @onclick="ConfirmDeleteTransaction">Confirm</button>
                    <button type="button" class="cancel" @onclick="CancelDeleteTransaction">Cancel</button>
                </div>
            }
            else
            {
                <h3>@(IsEditMode ? "Edit Transaction" : "Add Transaction")</h3>
                <form @onsubmit="HandleAddOrEditTransaction">
                    <div class="form-group">
                        <label for="description">Description:</label>
                        <input id="description" @bind="NewTransaction.Description" required />
                    </div>
                    <div class="form-group">
                        <label for="category">Category:</label>
                        <select id="category" @onchange="HandleCategoryChange" required>
                            <option value="Expenses">Expenses</option>
                            <option value="Income">Income</option>
                            <option value="Debts & Loans">Debts & Loans</option>
                            <option value="Savings & Investments">Savings & Investments</option>
                            <option value="Subscriptions & Memberships">Subscriptions & Memberships</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="amount">Amount:</label>
                        <input id="amount" type="number" step="0.01" @bind="Amount" required />
                    </div>
                    <div class="form-group">
                        <label for="transactionDate">Transaction Date:</label>
                        <input id="transactionDate" type="date" @bind="NewTransaction.Date" required />
                    </div>
                    <div class="form-group">
                        <label for="frequency">Frequency:</label>
                        <select id="frequency" @bind="NewTransaction.Frequency" @bind:event="onchange" required>
                            <option value="None">None</option>
                            <option value="Monthly">Monthly</option>
                            <option value="Yearly">Yearly</option>
                        </select>
                    </div>
                    @if (NewTransaction.Frequency != "None")
                    {
                        <div class="form-group">
                            <label for="endDate">End Date:</label>
                            <input id="endDate" type="date" @bind="NewTransaction.EndDate" required />
                        </div>
                    }
                    @if (NewTransaction.Category == "Subscriptions & Memberships")
                    {
                        <div class="form-group">
                            <label for="color">Color:</label>
                            <input id="color" type="color" @bind="NewTransaction.Color" />
                        </div>
                    }
                    <div class="form-group button-group">
                        @if (IsEditMode)
                        {
                            <button type="button" class="delete" @onclick="ShowDeleteConfirmationForm">Delete</button>
                        }
                        <button type="button" class="cancel" @onclick="CloseAddTransactionModal">Cancel</button>
                        <button type="submit" class="@(IsEditMode ? "save" : "add")">@((IsEditMode ? "Save" : "Add"))</button>
                    </div>
                </form>
            }
        </div>
    </div>
}

@code {
    private List<Transaction> transactions;
    public bool ShowAddTransactionModal { get; set; } = false;
    public bool IsEditMode { get; set; } = false;
    public bool ShowDeleteConfirmation { get; set; } = false;
    public Transaction NewTransaction { get; set; } = new Transaction();
    public decimal Amount { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionManager.LoadTransactionsAsync();
    }

    private void OpenAddTransactionModal()
    {
        NewTransaction = new Transaction
            {
                Date = DateTime.Now,
                Description = string.Empty,
                Category = "Expenses",
                Debit = 0,
                Credit = 0,
                Color = GetColorForCategory("Expenses"),
                Frequency = "None",
                EndDate = DateTime.Now
            };
        Amount = 0;
        IsEditMode = false;
        ShowDeleteConfirmation = false;
        ShowAddTransactionModal = true;
    }

    private void ShowEditTransactionModal(Transaction transaction)
    {
        NewTransaction = transaction;
        Amount = transaction.Debit > 0 ? transaction.Debit : transaction.Credit;
        IsEditMode = true;
        ShowDeleteConfirmation = false;
        ShowAddTransactionModal = true;
        if (string.IsNullOrEmpty(NewTransaction.Frequency))
        {
            NewTransaction.Frequency = "None";
        }
    }

    private void CloseAddTransactionModal()
    {
        ShowAddTransactionModal = false;
    }

    private async Task HandleAddOrEditTransaction()
    {
        NewTransaction.Amount = Amount;
        await TransactionManager.AddOrUpdateTransactionAsync(NewTransaction, IsEditMode);
        CloseAddTransactionModal();
        transactions = await TransactionManager.LoadTransactionsAsync();
    }

    private void ShowDeleteConfirmationForm()
    {
        ShowDeleteConfirmation = true;
    }

    private void CancelDeleteTransaction()
    {
        ShowDeleteConfirmation = false;
    }

    private async Task ConfirmDeleteTransaction()
    {
        await TransactionManager.DeleteTransactionAsync(NewTransaction);
        transactions.RemoveAll(t => t.TransactionID == NewTransaction.TransactionID);
        CloseAddTransactionModal();
        transactions = await TransactionManager.LoadTransactionsAsync();
    }

    private void HandleCategoryChange(ChangeEventArgs e)
    {
        var selectedCategory = e.Value.ToString();
        NewTransaction.Category = selectedCategory;
        if (selectedCategory == "Subscriptions & Memberships")
        {
            // Do not change the color if it is already set (i.e., user selected a custom color)
            if (string.IsNullOrEmpty(NewTransaction.Color))
            {
                NewTransaction.Color = GetRandomColor();
            }
        }
        else
        {
            NewTransaction.Color = GetColorForCategory(selectedCategory);
        }
    }

    private string GetColorForCategory(string category)
    {
        return category switch
        {
            "Expenses" => "#FF0000", // Red
            "Income" => "#00FF00", // Green
            "Debts & Loans" => "#FFA500", // Orange
            "Savings & Investments" => "#005AFF", // Blue
            "Subscriptions & Memberships" => GetRandomColor(), // Random color for subscriptions
            _ => "#000000" // Default color
        };
    }

    private string GetRandomColor()
    {
        var random = new Random();
        return $"#{random.Next(0x1000000):X6}";
    }
}

