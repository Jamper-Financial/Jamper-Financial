@page "/Transactions-Page"
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

@using Jamper_Financial.Shared.Data;
@using Jamper_Financial.Shared.Utilities;
@using Jamper_Financial.Shared.Pages.Components;
@using Jamper_Financial.Shared.Models;
@using Jamper_Financial.Shared.Services;

@inject SearchService SearchService
@inject UserStateService UserStateService
@inject IAccountService AccountService

@code {
    [CascadingParameter] private Action<string> SetPageTitle { get; set; }

    protected override void OnInitialized()
    {
        SetPageTitle("Transactions");
    }
}

<div class="transactions-page">

    @* Expenses Section *@
    <div class="expenses-section">
        <div class="expenses-header">
            <h3 class="section-title">Expenses</h3>
        </div>
        <div class="charts-container">
            <div class="chart">
                <div class="chart-placeholder">[Bar Chart]</div>
            </div>
            <div class="chart">
                <div class="chart-placeholder">[Line Chart]</div>
            </div>
            <div class="chart">
                <div class="chart-placeholder">[Pie Chart]</div>
            </div>
        </div>
    </div>

    @* Transactions Section *@
    <div class="transactions-section">
        <div class="transactions-header">
            <h3 class="section-title">Recent Transactions</h3>
            <div style="display: flex; gap: 10px;">
                <button class="add-transaction" @onclick="OpenAddTransactionModal">+ Add Transaction</button>
                <button class="manage-categories-btn" @onclick="NavigateToManageCategories">Manage Categories</button>
            </div>
        </div>
        <div class="transactions-table scrollable-table">
            <table>
                <thead>
                    <tr>
                        <th @onclick='() => SortTransactions("Date")'>Date @GetSortIndicator("Date")</th>
                        <th @onclick='() => SortTransactions("Description")'>Description @GetSortIndicator("Description")</th>
                        <th @onclick='() => SortTransactions("CategoryName")'>Category @GetSortIndicator("CategoryName")</th>
                        <th @onclick='() => SortTransactions("AccountName")'>Account Name @GetSortIndicator("AccountName")</th>
                        <th @onclick='() => SortTransactions("AccountNumber")'>Account Number @GetSortIndicator("AccountNumber")</th>
                        <th @onclick='() => SortTransactions("Amount")'>Amount @GetSortIndicator("Amount")</th>
                        <th>Receipt</th>
                    </tr>
                </thead>
                <tbody>
                    @if (transactions != null)
                    {
                        @foreach (var transaction in filteredTransactions.OrderBy(t => t.Date))
                        {
                            <tr class="transaction-item" @onclick="() => ShowEditTransactionModal(transaction)" style="cursor: pointer;">
                                <td>@transaction.Date.ToString("dd MMM yyyy")</td>
                                <td>@transaction.Description</td>
                                <td>@GetCategoryName(transaction.CategoryID)</td>
                                <td>@GetAccountName(transaction.AccountID)</td>
                                <td>@GetAccountNumber(transaction.AccountID)</td>
                                <td class="@(transaction.TransactionType == "e" ? "negative" : "positive")">@((transaction.Amount > 0 ? transaction.Amount : transaction.Amount).ToString("C"))</td>
                                <td @onclick:stopPropagation="true"><button class="view-details" @onclick="() => OpenReceiptModal(transaction)">View Receipt</button></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@* Add/Edit Transaction Modal *@
@if (ShowAddTransactionModal)
{
    <TransactionModal IsVisible="ShowAddTransactionModal"
                      IsEditMode="IsEditMode"
                      NewTransaction="NewTransaction"
                      Categories="Categories"
                      Accounts="accounts"
                      OnClose="CloseAddTransactionModal"
                      OnSave="HandleAddOrEditTransaction"
                      OnDelete="ShowDeleteConfirmationForm"
                      OnConfirmDelete="ConfirmDeleteTransaction" />
}

@* Receipt Modal *@
@if (ShowReceiptModal)
{
    <ReceiptModal IsVisible="ShowReceiptModal"
                  Transaction="SelectedTransaction"
                  OnClose="CloseReceiptModal" />
}

@code {
    private List<Transaction> transactions;
    private List<Transaction> filteredTransactions;
    private List<Category> Categories = new();
    private List<BankAccount> accounts = new();
    public bool ShowAddTransactionModal { get; set; } = false;
    public bool ShowReceiptModal { get; set; } = false;
    public bool IsEditMode { get; set; } = false;
    public bool ShowDeleteConfirmation { get; set; } = false;
    public Transaction NewTransaction { get; set; } = new Transaction();
    public Transaction SelectedTransaction { get; set; } = new Transaction();
    private string currentSortColumn = string.Empty;
    private bool isAscending = true;

    protected override async Task OnInitializedAsync()
    {
        transactions = (await TransactionManager.LoadTransactionsAsync(UserStateService.UserId)).ToList();
        Categories = (await DatabaseHelper.LoadUserCategoriesAsync(UserStateService.UserId)).ToList();
        accounts = await AccountService.GetBankAccounts(UserStateService.UserId);
        filteredTransactions = transactions;
        SearchService.OnSearchQueryChanged += FilterTransactions;
    }

    private void FilterTransactions()
    {
        if (string.IsNullOrEmpty(SearchService.SearchQuery))
        {
            filteredTransactions = transactions;
        }
        else
        {
            filteredTransactions = transactions
                .Where(t => t.Description.Contains(SearchService.SearchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        SearchService.OnSearchQueryChanged -= FilterTransactions;
    }

    private void NavigateToManageCategories()
    {
        NavigationManager.NavigateTo("/manage-categories");
    }

    private void OpenReceiptModal(Transaction transaction)
    {
        SelectedTransaction = transaction;
        ShowReceiptModal = true;
    }

    private void CloseReceiptModal()
    {
        ShowReceiptModal = false;
    }

    private void OpenAddTransactionModal()
    {
        NewTransaction = new Transaction
            {
                Date = DateTime.Now,
                Description = string.Empty,
                CategoryID = 0,
                Amount = 0,
                Frequency = null,
                EndDate = DateTime.Now,
                UserID = UserStateService.UserId,
                AccountID = 0

            };
        IsEditMode = false;
        ShowDeleteConfirmation = false;
        ShowAddTransactionModal = true;
    }

    private void ShowEditTransactionModal(Transaction transaction)
    {
        NewTransaction = transaction;
        IsEditMode = true;
        ShowDeleteConfirmation = false;
        ShowAddTransactionModal = true;
        if (string.IsNullOrEmpty(NewTransaction.Frequency))
        {
            NewTransaction.Frequency = null;
        }
    }

    private void CloseAddTransactionModal()
    {
        ShowAddTransactionModal = false;
    }

    private async Task HandleAddOrEditTransaction()
    {
        try
        {
            await TransactionManager.AddOrUpdateTransactionAsync(NewTransaction, IsEditMode);
            transactions = (await TransactionManager.LoadTransactionsAsync(UserStateService.UserId)).ToList();
            filteredTransactions = transactions;
        }
        catch
        {
            // Handle any errors if needed
            throw;
        }
        finally
        {
            CloseAddTransactionModal();
        }
    }

    private void ShowDeleteConfirmationForm()
    {
        ShowDeleteConfirmation = true;
    }

    private void CancelDeleteTransaction()
    {
        ShowDeleteConfirmation = false;
    }

    private async Task ConfirmDeleteTransaction(bool deleteAll)
    {
        if (deleteAll)
        {
            await TransactionManager.DeleteRecurringTransactionsAsync(NewTransaction);
            transactions.RemoveAll(t => t.Description == NewTransaction.Description &&
                                    t.CategoryID == NewTransaction.CategoryID &&
                                    t.Frequency == NewTransaction.Frequency &&
                                    t.Date > NewTransaction.Date);
        }
        else
        {
            await TransactionManager.DeleteTransactionAsync(NewTransaction);
            transactions.RemoveAll(t => t.TransactionID == NewTransaction.TransactionID);
        }
        CloseAddTransactionModal();
        transactions = (await TransactionManager.LoadTransactionsAsync(UserStateService.UserId)).ToList();
        filteredTransactions = transactions;
    }

    private string GetAccountName(int accountId)
    {
        var account = accounts.FirstOrDefault(a => a.AccountId == accountId);
        return account != null ? account.AccountName : "Unknown Account";
    }

    private string GetCategoryName(int categoryId)
    {
        var category = Categories.FirstOrDefault(c => c.CategoryID == categoryId);
        return category != null ? category.Name : "Unknown Category";
    }

    private string GetAccountNumber(int accountId)
    {
        var account = accounts.FirstOrDefault(a => a.AccountId == accountId);
        return account != null ? account.AccountNumber : "Unknown Account Number";
    }

    private void SortTransactions(string column)
    {
        if (currentSortColumn == column)
        {
            if (isAscending)
            {
                isAscending = false;
            }
            else
            {
                currentSortColumn = string.Empty;
                isAscending = true;
            }
        }
        else
        {
            currentSortColumn = column;
            isAscending = true;
        }

        if (string.IsNullOrEmpty(currentSortColumn))
        {
            filteredTransactions = transactions;
        }
        else
        {
            filteredTransactions = Sort.ApplySort(transactions, currentSortColumn, isAscending, Categories, accounts);
        }
    }

    private string GetSortIndicator(string column)
    {
        if (currentSortColumn == column)
        {
            return isAscending ? "↑" : "↓";
        }
        return string.Empty;
    }
}
