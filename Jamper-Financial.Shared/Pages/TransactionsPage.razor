@page "/Transactions-Page"
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

@using Jamper_Financial.Shared.Data;
@using Jamper_Financial.Shared.Utilities;
@using Jamper_Financial.Shared.Pages.Components;
@using Jamper_Financial.Shared.Models;
@using Jamper_Financial.Shared.Services;

@inject SearchService SearchService
@inject UserStateService UserStateService
@inject IAccountService AccountService
@inject IJSRuntime JS

@code {
    [CascadingParameter] private Action<string> SetPageTitle { get; set; }

    protected override void OnInitialized()
    {
        SetPageTitle("Transactions");
    }
}

<div class="transactions-page">

    @* Expenses Section *@
    <div class="expenses-section">
        <div class="expenses-header">
            <h3 class="section-title">Expenses</h3>
        </div>
        <div class="charts-container">
            <div class="chart">
                <canvas id="monthlyIncomeExpenseChart"></canvas>
            </div>
            <div class="chart">
                <canvas id="thirtyDayMovementChart"></canvas>
            </div>
            <div class="chart">
                <canvas id="categorySpendingChart"></canvas>
            </div>
        </div>
    </div>

    @* Transactions Section *@
    <div class="transactions-section">
        <div class="transactions-header">
            <h3 class="section-title">Recent Transactions</h3>
            <div class="filter-hamburger">
                <button class="filter-button" @onclick="ToggleFilterDropdown">Filter</button>
                <button class="hamburger-button" @onclick="ToggleMenu">☰</button>
                @if (isMenuOpen)
                {
                    <div class="hamburger-menu">
                        <button class="dropdown-item" @onclick="OpenAddTransactionModal">Add Transaction</button>
                        <button class="dropdown-item" @onclick="NavigateToBulkTransactions">Import Transactions</button>
                        <button class="dropdown-item" @onclick="ShowAddAccountModal">Add Account</button>
                        <button class="dropdown-item" @onclick="NavigateToManageCategories">Manage Categories</button>
                    </div>
                }
            </div>
        </div>
        <div class="transactions-table">
            <table>
                <thead>
                    <tr>
                        <th @onclick='() => SortTransactions("Date", isAscending)'>Date @GetSortIndicator("Date")</th>
                        <th @onclick='() => SortTransactions("Description", isAscending)'>Description @GetSortIndicator("Description")</th>
                        <th @onclick='() => SortTransactions("CategoryName", isAscending)'>Category @GetSortIndicator("CategoryName")</th>
                        <th @onclick='() => SortTransactions("AccountName", isAscending)'>Account Name @GetSortIndicator("AccountName")</th>
                        <th @onclick='() => SortTransactions("AccountNumber", isAscending)'>Account Number @GetSortIndicator("AccountNumber")</th>
                        <th @onclick='() => SortTransactions("Amount", isAscending)'>Amount @GetSortIndicator("Amount")</th>
                        <th>Receipt</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Transactions != null)
                    {
                        var maxRows = 10; // Adjust this value based on your viewport
                        var rowsToFill = maxRows - PaginatedTransactions.Count();

                        @foreach (var transaction in PaginatedTransactions)
                        {
                            <tr class="transaction-item" @onclick="() => ShowEditTransactionModal(transaction)" style="cursor: pointer;">
                                <td>@transaction.Date.ToString("dd MMM yyyy")</td>
                                <td>@transaction.Description</td>
                                <td>@GetCategoryName(transaction.CategoryID)</td>
                                <td>@GetAccountName(transaction.AccountID)</td>
                                <td>@GetAccountNumber(transaction.AccountID)</td>
                                <td class="@(transaction.TransactionType == "e" ? "negative" : "positive")">
                                    @(transaction.Amount > 0 ? "-" : "+")@((transaction.Amount > 0 ? transaction.Amount : transaction.Amount).ToString("C"))
                                </td>
                                <td @onclick:stopPropagation="true"><button class="view-details" @onclick="() => OpenReceiptModal(transaction)">View Receipt</button></td>
                            </tr>
                        }

                        @for (int i = 0; i < rowsToFill; i++)
                        {
                            <tr class="empty-row">
                                <td colspan="7"></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="pagination">
            <button @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
            <span>Page @currentPage of @totalPages</span>
            <button @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
        </div>
    </div>
</div>

@* Add/Edit Transaction Modal *@
@if (ShowAddTransactionModal)
{
    <TransactionModal IsVisible="ShowAddTransactionModal"
    IsEditMode="IsEditMode"
    NewTransaction="NewTransaction"
    Categories="Categories"
    Accounts="Accounts"
    OnClose="CloseAddTransactionModal"
    OnSave="HandleAddOrEditTransaction"
    OnDelete="ShowDeleteConfirmationForm"
    OnConfirmDelete="ConfirmDeleteTransaction" />
}

@* Add Account Modal *@
@if (showAddAccountModal)
{
    <AddAccountModal IsVisible="showAddAccountModal"
                     OnClose="CloseAddAccountModal"
                     OnAccountSaved="HandleAccountSaved"
                     newAccount="newAccount" />
}

@* Receipt Modal *@
@if (ShowReceiptModal)
{
    <ReceiptModal IsVisible="ShowReceiptModal"
    Transaction="SelectedTransaction"
    OnClose="CloseReceiptModal" />
}

@* Filter Modal *@
@if (ShowFilterDropdown)
{
    <FilterModal ShowFilterDropdown="ShowFilterDropdown"
    Categories="Categories"
    Accounts="Accounts"
    Transactions="Transactions"
    CurrentFilter="CurrentFilter"
    OnFilteredTransactionsChanged="HandleFilteredTransactionsChanged"
    OnCloseFilterDropdown="CloseFilterDropdown" />
}

@code {
    private List<Transaction> Transactions;
    private List<Transaction> FilteredTransactions;
    private List<Category> Categories = new();
    private List<BankAccount> Accounts = new();
    public bool ShowAddTransactionModal { get; set; } = false;
    public bool showAddAccountModal { get; set; } = false;
    public bool ShowReceiptModal { get; set; } = false;
    public bool IsEditMode { get; set; } = false;
    public bool ShowDeleteConfirmation { get; set; } = false;
    public Transaction NewTransaction { get; set; } = new Transaction();
    public Transaction SelectedTransaction { get; set; } = new Transaction();
    private string currentSortColumn = "Date";
    private bool isAscending = true;
    public bool ShowFilterDropdown { get; set; } = false;
    public Filter CurrentFilter { get; set; } = new Filter();
    private BankAccount newAccount = new BankAccount();

    // Chart data
    private List<Transaction> monthlyTransactions = new List<Transaction>();
    private List<Transaction> thirtyDayTransactions = new List<Transaction>();
    private Dictionary<string, decimal> categoryTotals = new Dictionary<string, decimal>();

    // Pagination properties
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)FilteredTransactions.Count / pageSize);
    private bool HasPreviousPage => currentPage > 1;
    private bool HasNextPage => currentPage < totalPages;
    private IEnumerable<Transaction> PaginatedTransactions => FilteredTransactions.Skip((currentPage - 1) * pageSize).Take(pageSize);

    protected override async Task OnInitializedAsync()
    {
        Transactions = (await TransactionManager.LoadTransactionsAsync(UserStateService.UserId)).ToList();
        Categories = (await DatabaseHelper.LoadUserCategoriesAsync(UserStateService.UserId)).ToList();
        Accounts = await AccountService.GetBankAccounts(UserStateService.UserId);
        FilteredTransactions = Transactions.ToList();
        SearchService.OnSearchQueryChanged += SearchTransactions;
    }

    private bool isMenuOpen = false;

    private void ToggleMenu()
    {
        isMenuOpen = !isMenuOpen;
    }

    private void SearchTransactions()
    {
        if (string.IsNullOrEmpty(SearchService.SearchQuery))
        {
            FilteredTransactions = Transactions;
        }
        else
        {
            FilteredTransactions = Transactions
                .Where(t => t.Description.Contains(SearchService.SearchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        currentPage = 1; // Reset to first page after filtering
        StateHasChanged();
    }

    public void Dispose()
    {
        SearchService.OnSearchQueryChanged -= SearchTransactions;
    }

    private void NavigateToBulkTransactions()
    {
        NavigationManager.NavigateTo("/bulk-transactions");
    }

    private void NavigateToManageCategories()
    {
        NavigationManager.NavigateTo("/manage-categories");
    }

    private void OpenReceiptModal(Transaction transaction)
    {
        SelectedTransaction = transaction;
        ShowReceiptModal = true;
    }

    private void CloseReceiptModal()
    {
        ShowReceiptModal = false;
    }

    private async void LoadBankAccounts()
    {
        Accounts = await AccountService.GetBankAccounts(UserStateService.UserId);
    }

    private void ShowAddAccountModal()
    {
        newAccount = new BankAccount
            {
                AccountTypeID = 0,
                AccountName = string.Empty,
                Balance = 0,
                AccountNumber = string.Empty,
                UserId = UserStateService.UserId

            };
        showAddAccountModal = true;
    }

    private async Task CloseAddAccountModal(bool isVisible)
    {
        showAddAccountModal = isVisible;
    }

    private void HandleAccountSaved(string message)
    {
        // Handle the account saved event if needed
        showAddAccountModal = false;
        LoadBankAccounts();
    }

    private void OpenAddTransactionModal()
    {
        NewTransaction = new Transaction
            {
                Date = DateTime.Now,
                Description = string.Empty,
                CategoryID = 0,
                Amount = 0,
                Frequency = "None",
                EndDate = DateTime.Now,
                UserID = UserStateService.UserId,
                AccountID = 0

            };
        IsEditMode = false;
        ShowDeleteConfirmation = false;
        ShowAddTransactionModal = true;
    }

    private void ShowEditTransactionModal(Transaction transaction)
    {
        NewTransaction = transaction;
        IsEditMode = true;
        ShowDeleteConfirmation = false;
        ShowAddTransactionModal = true;
    }

    private void CloseAddTransactionModal()
    {
        ShowAddTransactionModal = false;
    }

    private async Task HandleAddOrEditTransaction()
    {
        try
        {
            await TransactionManager.AddOrUpdateTransactionAsync(NewTransaction, IsEditMode);

            // Save current sort state
            var currentSortColumn = this.currentSortColumn;
            var currentIsAscending = this.isAscending;
            var currentFilters = CurrentFilter;

            // Reload data
            Transactions = (await TransactionManager.LoadTransactionsAsync(UserStateService.UserId)).ToList();

            // Reapply filters and sorting
            FilteredTransactions = FilterUtilities.ApplyFilters(Transactions, currentFilters);
            if (!string.IsNullOrEmpty(currentSortColumn))
            {
                FilteredTransactions = SortUtilities.ApplySort(FilteredTransactions, currentSortColumn, currentIsAscending, Categories, Accounts);
            }

            // Reset pagination
            currentPage = 1;
            await RefreshCharts();
        }
        catch
        {
            // Handle any errors if needed
            throw;
        }
        finally
        {
            CloseAddTransactionModal();
        }
    }

    private void ShowDeleteConfirmationForm()
    {
        ShowDeleteConfirmation = true;
    }

    private void CancelDeleteTransaction()
    {
        ShowDeleteConfirmation = false;
    }

    private async Task ConfirmDeleteTransaction(bool deleteAll)
    {
        // Save current sort state
        var currentSortColumn = this.currentSortColumn;
        var currentIsAscending = this.isAscending;
        var currentFilters = CurrentFilter;

        if (deleteAll)
        {
            await TransactionManager.DeleteRecurringTransactionsAsync(NewTransaction);
            Transactions.RemoveAll(t => t.Description == NewTransaction.Description &&
                                    t.CategoryID == NewTransaction.CategoryID &&
                                    t.Frequency == NewTransaction.Frequency &&
                                    t.Date > NewTransaction.Date);
        }
        else
        {
            await TransactionManager.DeleteTransactionAsync(NewTransaction);
            Transactions.RemoveAll(t => t.TransactionID == NewTransaction.TransactionID);
        }

        // Reapply filters and sorting
        FilteredTransactions = FilterUtilities.ApplyFilters(Transactions, currentFilters);
        if (!string.IsNullOrEmpty(currentSortColumn))
        {
            FilteredTransactions = SortUtilities.ApplySort(FilteredTransactions, currentSortColumn, currentIsAscending, Categories, Accounts);
        }

        // Reset pagination
        currentPage = 1;
        await RefreshCharts();
        CloseAddTransactionModal();
    }

    private string GetAccountName(int accountId)
    {
        var account = Accounts.FirstOrDefault(a => a.AccountId == accountId);
        return account != null ? account.AccountName : "Unknown Account";
    }

    private string GetCategoryName(int categoryId)
    {
        var category = Categories.FirstOrDefault(c => c.CategoryID == categoryId);
        return category != null ? category.Name : "Unknown Category";
    }

    private string GetAccountNumber(int accountId)
    {
        var account = Accounts.FirstOrDefault(a => a.AccountId == accountId);
        return account != null ? account.AccountNumber : "Unknown Account Number";
    }

    private void SortTransactions(string column, bool isAscending)
    {
        // Toggle sort state
        if (currentSortColumn == column)
        {
            if (this.isAscending)
            {
                this.isAscending = false;
            }
            else
            {
                currentSortColumn = string.Empty;
                this.isAscending = true;
            }
        }
        else
        {
            currentSortColumn = column;
            this.isAscending = true;
        }

        // Apply filters and sorting
        var filteredTransactions = FilterUtilities.ApplyFilters(Transactions, CurrentFilter);
        if (!string.IsNullOrEmpty(currentSortColumn))
        {
            FilteredTransactions = SortUtilities.ApplySort(filteredTransactions, currentSortColumn, this.isAscending, Categories, Accounts);
        }
        else
        {
            FilteredTransactions = filteredTransactions; // No sorting, just filtered
        }

        currentPage = 1;
        StateHasChanged();
    }

    private string GetSortIndicator(string column)
    {
        if (currentSortColumn == column)
        {
            return isAscending ? "↑" : "↓";
        }
        return string.Empty;
    }

    private void PreviousPage()
    {
        if (HasPreviousPage)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (HasNextPage)
        {
            currentPage++;
        }
    }

    private void HandleFilteredTransactionsChanged(List<Transaction> FilteredTransactions)
    {
        this.FilteredTransactions = FilteredTransactions;
        currentPage = 1;
        InvokeAsync(async () => await RefreshCharts());
        StateHasChanged();
    }

    private void CloseFilterDropdown()
    {
        ShowFilterDropdown = false;
    }

    private void ToggleFilterDropdown()
    {
        ShowFilterDropdown = !ShowFilterDropdown;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeCharts();
        }
    }

    private async Task InitializeCharts()
    {
        // Filter transactions for the charts
        var now = DateTime.Now;
        monthlyTransactions = Transactions
            .Where(t => t.Date >= now.AddMonths(-4) && t.Date <= now)
            .ToList();

        thirtyDayTransactions = Transactions
            .Where(t => t.Date >= now.AddDays(-30) && t.Date <= now)
            .ToList();

        // Calculate category totals
        CalculateCategoryTotals();

        // Initialize the charts
        await RenderMonthlyIncomeExpenseChart();
        await RenderThirtyDayMovementChart();
        await RenderCategorySpendingChart();
    }

    private void CalculateCategoryTotals()
    {
        categoryTotals.Clear();

        foreach (var transaction in Transactions.Where(t => t.TransactionType == "e"))
        {
            var categoryName = GetCategoryName(transaction.CategoryID);
            if (categoryTotals.ContainsKey(categoryName))
            {
                categoryTotals[categoryName] += transaction.Amount;
            }
            else
            {
                categoryTotals[categoryName] = transaction.Amount;
            }
        }
    }

    private async Task RenderMonthlyIncomeExpenseChart()
    {
        var months = Enumerable.Range(0, 4)
            .Select(i => DateTime.Now.AddMonths(-i))
            .Select(d => d.ToString("MMM yyyy"))
            .Reverse()
            .ToArray();

        var incomeData = new decimal[4];
        var expenseData = new decimal[4];

        foreach (var transaction in monthlyTransactions)
        {
            var monthIndex = 3 - (DateTime.Now.Month - transaction.Date.Month);
            if (monthIndex >= 0 && monthIndex < 4)
            {
                if (transaction.TransactionType == "i")
                {
                    incomeData[monthIndex] += transaction.Amount;
                }
                else
                {
                    expenseData[monthIndex] += transaction.Amount;
                }
            }
        }

        var chartData = new
        {
            labels = months,
            datasets = new[]
            {
            new
            {
                label = "Income",
                data = incomeData,
                backgroundColor = "rgba(40, 167, 69, 0.8)", // Green
                borderColor = "rgba(40, 167, 69, 1)",
                borderWidth = 1
            },
            new
            {
                label = "Expenses",
                data = expenseData,
                backgroundColor = "rgba(220, 53, 69, 0.8)", // Red
                borderColor = "rgba(220, 53, 69, 1)",
                borderWidth = 1
            }
        }
        };

        await JS.InvokeVoidAsync("initializeBarChart", "monthlyIncomeExpenseChart", chartData, "x", true); 
    }

    private async Task RenderThirtyDayMovementChart()
    {
        var days = Enumerable.Range(0, 30)
            .Select(i => DateTime.Now.AddDays(-i).ToString("MMM dd"))
            .Reverse()
            .ToArray();

        var netMovement = new decimal[30];

        foreach (var transaction in thirtyDayTransactions)
        {
            var dayIndex = 29 - (int)(DateTime.Now - transaction.Date).TotalDays;
            if (dayIndex >= 0 && dayIndex < 30)
            {
                netMovement[dayIndex] += transaction.TransactionType == "i"
                    ? transaction.Amount
                    : -transaction.Amount;
            }
        }

        var chartData = new
        {
            labels = days,
            datasets = new[]
            {
            new
            {
                label = "Net Movement",
                data = netMovement,
                backgroundColor = "rgba(23, 162, 184, 0.2)", // Teal
                borderColor = "rgba(23, 162, 184, 1)",
                borderWidth = 2,
                tension = 0.4, 
                fill = true
            }
        }
    };
        

    await JS.InvokeVoidAsync("initializeLineChart", "thirtyDayMovementChart", chartData, "x", false);

    }


    private async Task RenderCategorySpendingChart()
    {
        var totalExpenses = categoryTotals.Values.Sum(v => Math.Abs(v));
        var labels = categoryTotals.Keys.ToArray();
        var data = categoryTotals.Values
            .Select(v => Math.Abs(v))
            .Select(v => Math.Round((v / totalExpenses) * 100, 2))
            .ToArray();

        var backgroundColors = GenerateColors(labels.Length);

        var chartData = new
        {
            labels = labels,
            datasets = new[]
            {
            new
            {
                label = "Spending by Category",
                data = data,
                backgroundColor = backgroundColors,
                borderColor = backgroundColors.Select(c => c.Replace("0.8", "1")),
                borderWidth = 1
            }
        }
        };

        await JS.InvokeVoidAsync("initializePieChart", "categorySpendingChart", chartData, false);
    }

    private string[] GenerateColors(int count)
    {
        var colors = new[]
        {
        "rgba(255, 99, 132, 0.8)",   // Red
        "rgba(54, 162, 235, 0.8)",   // Blue
        "rgba(255, 206, 86, 0.8)",   // Yellow
        "rgba(75, 192, 192, 0.8)",   // Teal
        "rgba(153, 102, 255, 0.8)",  // Purple
        "rgba(255, 159, 64, 0.8)",   // Orange
        "rgba(199, 199, 199, 0.8)",  // Gray
        "rgba(83, 102, 255, 0.8)",   // Indigo
        "rgba(40, 167, 69, 0.8)",    // Green
        "rgba(108, 117, 125, 0.8)"   // Gray
    };

        return colors.Take(count).ToArray();
    }

    private async Task RefreshCharts()
    {
        var now = DateTime.Now;
        monthlyTransactions = Transactions
            .Where(t => t.Date >= now.AddMonths(-4))
            .ToList();

        thirtyDayTransactions = Transactions
            .Where(t => t.Date >= now.AddDays(-30))
            .ToList();

        CalculateCategoryTotals();

        await RenderMonthlyIncomeExpenseChart();
        await RenderThirtyDayMovementChart();
        await RenderCategorySpendingChart();
    }

}
