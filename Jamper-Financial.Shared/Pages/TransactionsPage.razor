@page "/Transactions-Page"
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

@using Jamper_Financial.Shared.Data;
@using Jamper_Financial.Shared.Utilities;
@using Jamper_Financial.Shared.Pages.Components;
@using Jamper_Financial.Shared.Models;
@using Jamper_Financial.Shared.Services;
                                                                                                                 
@inject SearchService SearchService
@inject UserStateService UserStateService
@inject IAccountService AccountService

@code {
    [CascadingParameter] private Action<string> SetPageTitle { get; set; }

    protected override void OnInitialized()
    {
        SetPageTitle("Transactions");
    }
}

<div class="transactions-page">

    @* Expenses Section *@
    <div class="expenses-section">
        <div class="expenses-header">
            <h3 class="section-title">Expenses</h3>
        </div>
        <div class="charts-container">
            <div class="chart">
                <div class="chart-placeholder">[Bar Chart]</div>
            </div>
            <div class="chart">
                <div class="chart-placeholder">[Line Chart]</div>
            </div>
            <div class="chart">
                <div class="chart-placeholder">[Pie Chart]</div>
            </div>
        </div>
    </div>

    @* Transactions Section *@
    <div class="transactions-section">
        <div class="transactions-header">
            <h3 class="section-title">Recent Transactions</h3>
            <div style="display: flex; gap: 10px;">
                <button class="add-transaction" @onclick="OpenAddTransactionModal">+ Add Transaction</button>
                <button class="manage-categories-btn" @onclick="NavigateToManageCategories">Manage Categories</button>
            </div>
        </div>
        <div class="transactions-table scrollable-table">
            <table>
                <thead>
                    <tr>
                        <th>Description</th>
                        <th>Transaction ID</th>
                        <th>Type</th>
                        <th>Card</th>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Receipt</th>
                    </tr>
                </thead>
                <tbody>
                    @if (transactions != null)
                    {
                        @foreach (var transaction in filteredTransactions)
                        {
                            <tr class="transaction-item" @onclick="() => ShowEditTransactionModal(transaction)" style="cursor: pointer;">
                                <td>@transaction.Description</td>
                                <td>@transaction.TransactionID</td>
                                <td>@(transaction.TransactionType == "e" ? "Expense" : "Income")</td>
                                <td>@transaction.TransactionID</td>
                                <td>@transaction.Date.ToString("dd MMM, hh:mm tt")</td>
                                <td class="@(transaction.TransactionType == "e" ? "negative" : "positive")">@((transaction.Amount > 0 ? transaction.Amount : transaction.Amount).ToString("C"))</td>
                                <td @onclick:stopPropagation="true"><button class="view-details" @onclick="() => OpenReceiptModal(transaction)">View Receipt</button></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@* Add/Edit Transaction Modal *@
@if (ShowAddTransactionModal)
{
    <div class="modal">
        <div class="modal-content">
            @if (ShowDeleteConfirmation)
            {
                @if (NewTransaction.Frequency != "None")
                {
                    <h3>Confirm Deletion</h3>
                    <p>This transaction is recurring. Do you want to delete all occurrences or just this one?</p>
                    <div class="form-group button-group">
                        <button type="button" class="save" @onclick="() => ConfirmDeleteTransaction(true)">Delete All</button>
                        <button type="button" class="save" @onclick="() => ConfirmDeleteTransaction(false)">Delete This One</button>
                        <button type="button" class="cancel" @onclick="CancelDeleteTransaction">Cancel</button>
                    </div>
                }
                else
                {
                    <h3>Confirm Deletion</h3>
                    <p>Are you sure you want to delete this transaction?</p>
                    <div class="form-group button-group">
                        <button type="button" class="save" @onclick="() => ConfirmDeleteTransaction(false)">Confirm</button>
                        <button type="button" class="cancel" @onclick="CancelDeleteTransaction">Cancel</button>
                    </div>
                }
            }
            else
            {
                <h3>@(IsEditMode ? "Edit Transaction" : "Add Transaction")</h3>
                <form @onsubmit="HandleAddOrEditTransaction">
                    <div class="form-group">
                        <label for="description">Description:</label>
                        <input id="description" @bind="NewTransaction.Description" required />
                    </div>
                    <div class="form-group">
                        <label for="accountname">Account:</label>
                        <select id="accountname" @bind="NewTransaction.AccountID" required>
                            <option value="">Select Account</option>
                            @foreach (var account in accounts)
                            {
                                <option value = "@account.AccountId" > @account.AccountName </option >
                            }
                        </select>
                    </div>
                    <div class="form-group">
                    <label for="category">Category:</label>
                    <select id="category" @bind="NewTransaction.CategoryID" required>
                        <option value=""> Select Category</option>
                            @foreach (var category in Categories)
                            {
                            <option value="@category.CategoryID">@category.Name</option>
                            }
                    </select>
            </div>
            <div class="form-group">
                <label for="amount">Amount:</label>
                <input id="amount" type="number" step="0.01" @bind="Amount" required />
            </div>
            <div class="form-group">
                <label for="transactionDate">Transaction Date:</label>
                <input id="transactionDate" type="date" @bind="NewTransaction.Date" required />
            </div>
            <div class="form-group">
                <label for="frequency">Frequency:</label>
                <select id="frequency" @bind="NewTransaction.Frequency" @bind:event="onchange" required>
                    <option value="None">None</option>
                    <option value="Monthly">Monthly</option>
                    <option value="Yearly">Yearly</option>
                </select>
            </div>
                @if (NewTransaction.Frequency != "None")
                {
                <div class="form-group">
                    <label for="endDate">End Date:</label>
                    <input id="endDate" type="date" @bind="NewTransaction.EndDate" required />
                </div>
                }
            <div class="form-group button-group">
                    @if (IsEditMode)
                    {
                    <button type="button" class="delete" @onclick="ShowDeleteConfirmationForm">Delete</button>
                    }
                <button type="button" class="cancel" @onclick="CloseAddTransactionModal">Cancel</button>
                <button type="submit" class="@(IsEditMode ? "Save" : "add")">@((IsEditMode ? "Save" : "Add"))</button>
            </div>
            </form>
            }
    </div>
            </div>
}

@* Receipt Modal *@
@if (ShowReceiptModal)
{
    <ReceiptModal IsVisible="ShowReceiptModal" Transaction="SelectedTransaction" OnClose="CloseReceiptModal" />
}

@code {
    private List<Transaction> transactions;
    private List<Transaction> filteredTransactions;
    private List<Category> Categories = new();
    private List<BankAccount> accounts = new();
    public bool ShowAddTransactionModal { get; set; } = false;
    public bool ShowReceiptModal { get; set; } = false;
    public bool IsEditMode { get; set; } = false;
    public bool ShowDeleteConfirmation { get; set; } = false;
    public Transaction NewTransaction { get; set; } = new Transaction();
    public Transaction SelectedTransaction { get; set; } = new Transaction();
    public decimal Amount { get; set; } = 0;


    protected override async Task OnInitializedAsync()
    {
        transactions = (await TransactionManager.LoadTransactionsAsync(UserStateService.UserId)).ToList();
        Categories = (await DatabaseHelper.LoadUserCategoriesAsync(UserStateService.UserId)).ToList();
        accounts = await AccountService.GetBankAccounts(UserStateService.UserId);
        filteredTransactions = transactions;
        SearchService.OnSearchQueryChanged += FilterTransactions;
    }

    private void FilterTransactions()
    {
        if (string.IsNullOrEmpty(SearchService.SearchQuery))
        {
            filteredTransactions = transactions;
        }
        else
        {
            filteredTransactions = transactions
                .Where(t => t.Description.Contains(SearchService.SearchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        SearchService.OnSearchQueryChanged -= FilterTransactions;
    }

    private void NavigateToManageCategories()
    {
        NavigationManager.NavigateTo("/manage-categories");
    }

    private void OpenReceiptModal(Transaction transaction)
    {
        SelectedTransaction = transaction;
        ShowReceiptModal = true;
    }

    private void CloseReceiptModal()
    {
        ShowReceiptModal = false;
    }

    private void OpenAddTransactionModal()
    {
        NewTransaction = new Transaction
            {
                Date = DateTime.Now,
                Description = string.Empty,
                CategoryID = 0,
                Amount = 0,
                Frequency = "None",
                EndDate = DateTime.Now,
                UserID = UserStateService.UserId,
                AccountID = 0

            };
        IsEditMode = false;
        ShowDeleteConfirmation = false;
        ShowAddTransactionModal = true;
    }

    private void ShowEditTransactionModal(Transaction transaction)
    {
        NewTransaction = transaction;
        Amount = transaction.Amount > 0 ? transaction.Amount : transaction.Amount;
        IsEditMode = true;
        ShowDeleteConfirmation = false;
        ShowAddTransactionModal = true;
        if (string.IsNullOrEmpty(NewTransaction.Frequency))
        {
            NewTransaction.Frequency = "None";
        }
    }

    private void CloseAddTransactionModal()
    {
        ShowAddTransactionModal = false;
    }

    private async Task HandleAddOrEditTransaction()
    {
        try
        {
            NewTransaction.Amount = Amount;
            await TransactionManager.AddOrUpdateTransactionAsync(NewTransaction, IsEditMode);
            transactions = (await TransactionManager.LoadTransactionsAsync(UserStateService.UserId)).ToList();
            filteredTransactions = transactions;                                                                                                    
        }
        catch
        {
            // Handle any errors if needed
            throw;
        }
        finally
        {
            CloseAddTransactionModal();
        }
    }

    private void ShowDeleteConfirmationForm()
    {
        ShowDeleteConfirmation = true;
    }

    private void CancelDeleteTransaction()
    {
        ShowDeleteConfirmation = false;
    }

    private async Task ConfirmDeleteTransaction(bool deleteAll)
    {
        if (deleteAll)
        {
            await TransactionManager.DeleteRecurringTransactionsAsync(NewTransaction);
            transactions.RemoveAll(t => t.Description == NewTransaction.Description &&
                                    t.CategoryID == NewTransaction.CategoryID &&
                                    t.Frequency == NewTransaction.Frequency &&
                                    t.Date > NewTransaction.Date);
        }
        else
        {
            await TransactionManager.DeleteTransactionAsync(NewTransaction);
            transactions.RemoveAll(t => t.TransactionID == NewTransaction.TransactionID);
        }
        CloseAddTransactionModal();
        transactions = (await TransactionManager.LoadTransactionsAsync(UserStateService.UserId)).ToList();
        filteredTransactions = transactions;
    }
}