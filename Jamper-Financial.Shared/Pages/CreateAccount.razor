@page "/create-account"
@using Jamper_Financial.Shared.Data
@using Jamper_Financial.Shared.Services
@using Jamper_Financial.Shared.Models
@inject NavigationManager Navigation
@inject AuthenticationService AuthenticationService

@* MGE 03/13/2025 Remove Birth Date as per review*@

<div class="registration-container">
    <div class="registration-left">
        <h1>Welcome! Let's get started</h1>
        <div class="registration-form">
            <h2>Please enter your details below</h2>
            <form>
                <label for="first-name">First name <span class="required">*</span></label>
                <input id="first-name" type="text" placeholder="Enter your first name" @bind="userProfile.FirstName" />

                <label for="last-name">Last name <span class="required">*</span></label>
                <input id="last-name" type="text" placeholder="Enter your last name" @bind="userProfile.LastName" />

                <label for="username">Username <span class="required">*</span></label>
                <input id="username" type="text" placeholder="Enter your username" @bind="userProfile.Username" />

                @* <label for="birthdate">Birth date (yyyy-mm-dd) <span class="required">*</span></label> *@
                @* <input id="birthdate" type="date" placeholder="YYYY-MM-DD" @bind="BirthDate" /> *@

                <label for="email">Email <span class="required">*</span></label>
                <input id="email" type="email" placeholder="Enter your email" @bind="userProfile.Email" />

                <label for="password">Password <span class="required">*</span></label>
                <input id="password" type="password" placeholder="Create your password" @bind="userProfile.Password" />

                <label for="confirm-password">Confirm Password <span class="required">*</span></label>
                <input id="confirm-password" type="password" placeholder="Confirm your password" @bind="ConfirmPassword" />
                <small class="password-hint">Password must be at least 8 characters long, contain uppercase, lowercase, digit, and special character.</small>
                <div class="bottom-buttons">
                    <button type="button" class="back-button" @onclick="NavigateToLoginPage">Back</button>
                    <button type="button" class="submit-button" @onclick="CreateUserAccount">Submit</button>
                </div>

                <p class="terms">
                    By pressing submit you agree with the
                    <a href="#">Terms of Use</a> and <a href="#">Privacy Policy</a>.
                </p>
            </form>
        </div>
    </div>
    <div class="registration-right">
        <img src="/images/logo.png" alt="Jamper Logo" />
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

@if (AccountCreated)
{
    <div class="alert alert-success" role="alert">
        Account created successfully! Redirecting to login...
    </div>
}

@code {
    private UserProfile userProfile = new UserProfile();
    private string ConfirmPassword { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    private bool AccountCreated { get; set; } = false;

    private void NavigateToLoginPage()
    {
        Navigation.NavigateTo("/login");
    }

    private bool ValidateForm()
    {
        if (string.IsNullOrWhiteSpace(userProfile.FirstName) || string.IsNullOrWhiteSpace(userProfile.LastName) ||
            string.IsNullOrWhiteSpace(userProfile.Username) || string.IsNullOrWhiteSpace(userProfile.Email) ||
            string.IsNullOrWhiteSpace(userProfile.Password) || string.IsNullOrWhiteSpace(ConfirmPassword))
        {
            ErrorMessage = "Please fill in all fields.";
            return false;
        }

        if (userProfile.Password != ConfirmPassword)
        {
            ErrorMessage = "Passwords do not match.";
            return false;
        }

        if (!IsPasswordStrong(userProfile.Password))
        {
            ErrorMessage = "Password must be at least 8 characters long, include uppercase and lowercase letters, a digit, and a special character.";
            return false;
        }

        if (DatabaseHelper.IsUsernameTaken(userProfile.Username))
        {
            ErrorMessage = "Username is already taken. Please choose another.";
            return false;
        }

        if (DatabaseHelper.IsEmailTaken(userProfile.Email))
        {
            ErrorMessage = "You already have an account with this email. Please log in.";
            return false;
        }

        ErrorMessage = string.Empty;
        return true;
    }

    private bool IsPasswordStrong(string password)
    {
        return password.Length >= 8 &&
            password.Any(char.IsUpper) &&
            password.Any(char.IsLower) &&
            password.Any(char.IsDigit) &&
            password.Any(ch => "!@#$%^&*()_+-=[]{}|;:',.<>?/".Contains(ch));
    }

    private async Task CreateUserAccount()
    {
        if (!ValidateForm())
        {
            Console.WriteLine($"Validation failed: {ErrorMessage}");
            return;
        }

        var user = new User
            {
                Username = userProfile.Username,
                Email = userProfile.Email,
                Password = userProfile.Password,
                IsGoogleSignIn = 0 // Assuming this is a normal sign-in
            };

        AuthenticationService.CreateUserAccount(user, userProfile);

        // Show success message
        AccountCreated = true;

        // Redirect to login page after a short delay
        Task.Delay(2000).ContinueWith(_ => NavigateToLoginPage());
    }
}

