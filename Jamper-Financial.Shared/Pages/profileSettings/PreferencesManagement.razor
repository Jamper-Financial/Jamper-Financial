@using Jamper_Financial.Shared.Data
@using Jamper_Financial.Shared.Services
@using Jamper_Financial.Shared.Models
@inject NavigationManager Navigation
@inject IUserService UserService
@inject UserStateService UserStateService

@namespace Jamper_Financial.Shared.Pages.profileSettings

<div class="profile-management">
    <h3>Preferences and Notifications</h3>
    <h4 class="localization-text">Localizations</h4>
    <div class="localization flex-column gap-2">
        <div class="currency flex-item">
            <div class="text">Currency</div>
            <div class="box">
                <select @bind="selectedCurrency" @bind:event="onchange" class="sub-text">
                    @foreach (var currency in currencies)
                    {
                        <option value="@currency">@currency</option>
                    }
                </select>
            </div>
        </div>
        <div class="time-zone flex-item">
            <div class="text">Time Zone</div>
            <div class="box">
                <div class="sub-text">(GMT-12:00) International Date Line West</div>
            </div>
        </div>
    </div>
    <h4 class="notification-text">Notification</h4>
    <div class="notification flex-column gap-2">
        <div class="subscriptions flex-item">
            <label class="switch">
                <input type="checkbox" id="toggleSubscription" @bind="enableSubscription" onclick="EditSubscription" />
                <span class="slider round"></span>
            </label>
            <label for="toggleSubscription">Subscriptions</label>
        </div>
        <div class="goals flex-item">
            <label class="switch">
                <input type="checkbox" id="toggleGoals" @bind="enableGoals" onclick="EditGoals" />
                <span class="slider round"></span>
            </label>
            <label for="toggleGoals">Goals</label>
        </div>
        <div class="budget flex-item">
            <label class="switch">
                <input type="checkbox" id="toggleBudget" @bind="enableBudget" onclick="EditBudget" />
                <span class="slider round"></span>
            </label>
            <label for="toggleBudget">Budget</label>
        </div>
    </div>
</div>

@code {
    private UserProfile userProfile = new UserProfile();
    private UserSettings userSettings = new UserSettings();
    private bool enableSubscription = false;
    private bool enableGoals = false;
    private bool enableBudget = false;
    private string selectedCurrency = "CAD";
    private List<string> currencies = new List<string> { "CAD", "USD", "EUR", "GBP", "AUD", "JPY", "INR" };


    protected override async Task OnInitializedAsync()
    {
        // Get the logged-in user's ID and username from the UserStateService
        int userId = UserStateService.LoggedInUser.UserID;

        if (userId <= 0)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            userProfile = await UserService.GetUserProfileByIdAsync(userId);
            //TODO: set the settings froM DB
            userSettings = await UserService.GetUserSettingsByIdAsync(userId) ?? new UserSettings { UserId = userId };
            selectedCurrency = userSettings.Currency ?? "CAD";
            enableSubscription = userSettings.EnableSubscriptionNotification;
            enableGoals = userSettings.EnableGoalsNotification;
            enableBudget = userSettings.EnableBudgetNotification;
  

        }
    }

    private async Task UpdateCurrency(ChangeEventArgs e)
    {
        selectedCurrency = e.Value.ToString();
        userSettings.Currency = selectedCurrency;
        await UserService.UpdateUserSettingsAsync(userSettings);
    }

    protected async Task EditSubscription()
    {
        if (enableSubscription)
        {
            userSettings.EnableSubscriptionNotification = enableSubscription;
            await UserService.UpdateUserSettingsAsync(userSettings);
            Console.Write("Enable Notif for Subscription");
        }
        else
        {
            Console.Write("Disable Notif for Subsription");
        }
    }

    protected async Task EditGoals()
    {
        if (enableGoals)
        {
            userSettings.EnableGoalsNotification = enableGoals;
            await UserService.UpdateUserSettingsAsync(userSettings);
            Console.Write("Enable Notif for Goals");
        }
        else
        {
            Console.Write("Disable Notif for Goals");
        }
    }

    protected async Task EditBudgets()
    {
        if (enableBudget)
        {
            userSettings.EnableBudgetNotification = enableBudget;
            await UserService.UpdateUserSettingsAsync(userSettings);
            Console.Write("Enable Notif for Goals");
        }
        else
        {
            Console.Write("Disable Notif for Budgets");
        }
    }
}