@page "/profile-management"

@using Jamper_Financial.Shared.Data
@using Jamper_Financial.Shared.Services
@using Jamper_Financial.Shared.Models
@using Jamper_Financial.Shared.Pages.Components;
@inject NavigationManager Navigation
@inject IUserService UserService
@inject UserStateService UserStateService


@namespace Jamper_Financial.Shared.Pages.profileSettings
@code {
    private UserProfile userProfile = new UserProfile();
    private string statusMessage = string.Empty;
    private bool showStatusMessage;
    private string statusMessageClass = string.Empty;
    private bool updateStatus;
    private bool ShowUploadAvatarModal = false;

    // Toaster variables
    private string toasterMessage = string.Empty;
    private string toasterClass = string.Empty;
    private System.Threading.Timer toasterTimer;


    protected override async Task OnInitializedAsync()
    {
        // Get the logged-in user's ID and username from the UserStateService
        int userId =  UserStateService.UserId;

        if (userId > 0)
        {
            userProfile = await UserService.GetUserProfileByIdAsync(userId);
        }
        else
        {
            Navigation.NavigateTo("/login");
        }
    }

    private void DeleteProfile()
    {
        Navigation.NavigateTo("/delete-account");
    }

    private async Task SaveProfile()
    {
        updateStatus = await UserService.UpdateUserProfileAsync(userProfile);

        if (updateStatus)
        {
            statusMessage = "Save successful!";
        }
        else
        {
            statusMessage = "Failed to save profile!";
        }

        showStatusMessage = true;
        StateHasChanged();
    }

    private void AutoCloseToaster(object state)
    {
        InvokeAsync(() =>
        {
            ClearToaster();
            StateHasChanged(); // Update the UI
        });
    }

    private void ClearToaster()
    {
        toasterMessage = string.Empty;
        toasterClass = string.Empty;
    }

    private void CloseModal()
    {
        showStatusMessage = false;
        StateHasChanged();
    }

    private void HandleClickOutsideModal(MouseEventArgs e)
    {
        if (showStatusMessage)
        {
            CloseModal();
        }
    }

    private void SelectAvatar()
    {
        ShowUploadAvatarModal = true;
    }

    private void CloseUploadAvatarModal()
    {
        ShowUploadAvatarModal = false;
        StateHasChanged();
    }

    private void HandleAvatarSaved(string message)
    {
        // Set the toaster message and class based on the result
        if (message == "success")
            {
                toasterMessage = "Avatar added successfully!";
                toasterClass = "success";
            }
            else
            {
            toasterMessage = "Failed to save Avatar.";
                toasterClass = "error";
            }

        Console.WriteLine(message);
        ShowUploadAvatarModal = false;

        // Start the timer to auto-close the toaster
        toasterTimer?.Dispose(); // Dispose of any existing timer
        toasterTimer = new System.Threading.Timer(AutoCloseToaster, null, 5000, Timeout.Infinite);
        StateHasChanged();
    }
}

<div>
    <div>
        <h3>Profile Details</h3>
    </div>
    <div>
        <EditForm Model="userProfile" OnValidSubmit="SaveProfile">
            <DataAnnotationsValidator />
    @* <ValidationSummary /> *@

            @if (userProfile != null)
            {
                <div class="content-container" @onclick="HandleClickOutsideModal">
                    <div class="profile-management">
                        <div class="profile-management-column flex-column">
                            <div class="profile-picture">
                                @if (userProfile.ProfilePicture != null)
                                {
                                    <img src="data:image/png;base64,@Convert.ToBase64String(userProfile.ProfilePicture)" />
                                }
                                else
                                {
                                    <img src = "./images/placeholder.png" />
                                }
                            </div>
                            <div class="edit-icon">
                                <div class="absolute">
                                    <button type="button" @onclick="() => SelectAvatar()" class="btn_editavatar">
                                        <span class="flex items-center gap-1">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="var(--primary-color">
                                                <path fill="url(#pencil-gradient-school_svg__a)" d="M4.167 15.833h1.187L13.5 7.688 12.313 6.5l-8.146 8.146zM3.333 17.5a.8.8 0 0 1-.593-.24.8.8 0 0 1-.24-.593v-2.021a1.65 1.65 0 0 1 .48-1.167L13.5 2.98q.25-.229.553-.354.302-.125.634-.125.333 0 .646.125.315.125.542.375l1.146 1.167q.25.229.364.541t.115.625q0 .334-.115.636a1.6 1.6 0 0 1-.364.552l-10.5 10.5q-.23.229-.532.354a1.65 1.65 0 0 1-.635.125zm9.563-10.396-.584-.604L13.5 7.688z">

                                                </path>
                                                <defs>
                                                    <linearGradient id="pencil-gradient-school_svg__a" x1="1.328" x2="22.308" y1="1.295" y2="10.476" gradientUnits="userSpaceOnUse">
                                                        <stop stop-color="#2BA8FC"></stop>
                                                        <stop offset="1" stop-color="#5F57FF"></stop>
                                                    </linearGradient>
                                                </defs>
                                            </svg>
                                        </span>
                                    </button>
                                </div>
                                <input accept="image/*" id="avatar-upload" class="visually-hidden" type="file">
                            </div>
                            <div class="username">
                                <label>@userProfile.Username</label>
                            </div>
                        </div>
                        <div class="profile-management-column">
                            <div class="your-name">
                                <label class="text">First Name</label>
                                <div class="box">
                                    <InputText class="sub-text input-style" @bind-Value="userProfile.FirstName" placeholder="First Name" />
                                    <ValidationMessage For="@(() => userProfile.FirstName)" />
                                </div>
                            </div>
                            <div class="email">
                                <label class="text">Email</label>
                                <div class="box">
                                    <InputText type="email" class="sub-text input-style" @bind-Value="userProfile.Email" placeholder="Email address" />
                                    <ValidationMessage For="@(() => userProfile.Email)" />
                                </div>
                            </div>
                        </div>
                        <div class="profile-management-column">
                            <div class="last-name">
                                <label class="text">Last Name</label>
                                <div class="box">
                                    <InputText class="sub-text input-style" @bind-Value="userProfile.LastName" placeholder="Last Name" />
                                    <ValidationMessage For="@(() => userProfile.LastName)" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Delete Button -->
                    <div class="profile-button-container">
                        <div class="delete-button-container">
                            <button @onclick="DeleteProfile" class="delete-button">
                                Delete Profile
                            </button>
                        </div>
                        <div class="save-button-container">
                            <button type="submit" class="save-button">
                                Save Profile
                            </button>
                        </div>
                    </div>

                    <!-- Status Message -->
                    @if (showStatusMessage)
                        @if (updateStatus)
                        {
                            <div class="modal fade show" id="settingsSavedModal" tabindex="-1" role="dialog" @onclick="CloseModal">
                                <div class="modal-dialog" role="document" @onclick:stopPropagation>
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h3 class="modal-title">Edit Profile</h3>
                                        </div>
                                        <div class="modal-body">
                                            <div class="icon">
                                                <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                    <g clip-path="url(#clip0_491_1018)">
                                                        <path d="M12.1107 16.4322C11.558 15.8292 10.6032 15.7789 10.0002 16.3317C9.39718 16.8844 9.34687 17.8392 9.89964 18.4422L17.4876 26.6835C17.7891 26.985 18.1409 27.1859 18.5428 27.1859C18.5428 27.1859 18.5428 27.1859 18.5931 27.1859C18.9951 27.1859 19.3971 27.0352 19.6483 26.7337L38.8444 7.58795C39.4474 6.98497 39.4474 6.03015 38.8444 5.47738C38.2415 4.8744 37.2866 4.8744 36.7339 5.47738L18.6435 23.5176L12.1107 16.4322Z" fill="#78DB57" />
                                                        <path d="M38.4925 18.4925C37.6382 18.4925 36.985 19.1457 36.985 20C36.985 29.3467 29.3468 36.9849 20.0001 36.9849C10.6533 36.9849 3.01509 29.3468 3.01509 20.0001C3.01509 10.6534 10.6533 3.01509 20.0001 3.01509C20.8544 3.01509 21.5076 2.3618 21.5076 1.50759C21.5076 0.653379 20.8543 0 20.0001 0C8.99495 0 0 8.99495 0 20.0001C0 31.0052 8.99495 40.0001 20.0001 40.0001C31.0052 40.0001 40.0001 31.0052 40.0001 20.0001C40 19.1457 39.3468 18.4925 38.4925 18.4925Z" fill="#78DB57" />
                                                    </g>
                                                    <defs>
                                                        <clipPath id="clip0_491_1018">
                                                            <rect width="40" height="40" fill="white" />
                                                        </clipPath>
                                                    </defs>
                                                </svg>
                                            </div>
                                            <p class="success-text">Settings Successfully saved.</p>
                                            <div class="flex flex-col items-center space-y-4">
                                                <p class="text-center text-base text-green-400">Your information has been successfully updated. Thank you for keeping your details current!</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                </div>
            }
            else
            {
                <p>Loading...</p>
            }
        </EditForm>
    </div>
</div>

@* Upload Avatar Modal *@
@if (ShowUploadAvatarModal)
{
    <UploadAvatarModal IsVisible="ShowUploadAvatarModal" OnClose="CloseUploadAvatarModal" Profile="userProfile" OnAvatarSaved="HandleAvatarSaved" />
}

@if (!string.IsNullOrEmpty(toasterMessage))
{
    <div class="toaster @toasterClass">
        <span>@toasterMessage</span>
        <button class="close-toaster" @onclick="ClearToaster">×</button>
    </div>
}
