<script type="module" src="/js/firebase-auth.js"></script>

@page "/login"
@using Jamper_Financial.Shared.Data
@using Jamper_Financial.Shared.Services
@inject LoginStateService LoginState
@inject UserStateService UserStateService
@using Jamper_Financial.Shared.Models

<div class="login-container">
    <div class="login-left">
        <h1>Stay in charge of your finances!</h1>
        <div class="login-form">
            
            <h2>JAMPER Finance</h2>
            <form @onsubmit="HandleLoginAsync">
                <label for="email">Username or Email</label>
                <input id="email" type="text" placeholder="Enter your email or username" @bind="Identifier" />

                <label for="password">Password</label>
                <input id="password" type="password" placeholder="********" @bind="Password" />

                <div class="remember-me">
                    <input type="checkbox" id="remember" @bind="RememberMe" />
                    <label for="remember">Remember me</label>
                </div>

                <button type="submit" class="login-button">ðŸ”’ Log in</button>

                @* display error message if any *@
                @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @ErrorMessage
                    </div>
                }

                <a href="#" class="forgot-password">Forgot your password or username?</a>
                <div class="social-login">
                    <button type="button" class="social-button google" @onclick="SignInWithGoogle">Continue using Google</button>
                </div>

                <div class="bottom-buttons">
                    <button type="button" class="back-button" @onclick="NavigateToBannerPage">Back</button>
                    <button type="button" class="create-account-button" @onclick="NavigateToCreateAccount">Create an Account</button>
                </div>
                <p class="terms">Terms & Conditions privacy policy</p>
            </form>
        </div>
    </div>
    <div class="login-right">
        <img src="/images/logo.png" alt="Jamper Logo" />
    </div>
</div>

@code {
    // Inject NavigationManager
    [Inject]
    private NavigationManager Navigation { get; set; }
    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    // To determine if it is a google login or not
    private bool IsGoogleLogin { get; set; } = false;

    // Properties
    private string Identifier { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    private bool RememberMe { get; set; } = false;
    private string Email { get; set; } = string.Empty;
    private string UserName { get; set; } = string.Empty;

    private string FilePath => Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "credentials.txt");

    protected override void OnInitialized()
    {
        if (File.Exists(FilePath))
        {
            var lines = File.ReadAllLines(FilePath);
            if (lines.Length == 2)
            {
                Identifier = lines[0];
                Password = lines[1];
                RememberMe = true;
            }
        }
    }

    // Navigate to create account page
    private void NavigateToCreateAccount()
    {
        Navigation.NavigateTo("/create-account");
    }

    // Navigate to banner page
    private void NavigateToBannerPage()
    {
        Navigation.NavigateTo("/");
    }

    // Google login
    private async Task SignInWithGoogle()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("signInWithGoogle");
            LoginState.IsGoogleLogin = true; // Set flag for Google Login
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error during Google login: {ex.Message}";
        }
    }

    // Handle login process
    private async Task HandleLoginAsync()
    {
        // Simulate login process
        if (string.IsNullOrWhiteSpace(Identifier) || string.IsNullOrWhiteSpace(Password))
        {
            ErrorMessage = "Please enter your email/username and password.";
            return;
        }

        var isValid = await Task.Run(() => AuthenticationService.ValidateUserCredentials(Identifier, Password));
        if (isValid)
        {
            var (userid, username, email) = DatabaseHelper.GetUserDetails(Identifier);
        
            if (username != null && email != null)
            {
                UserStateService.LoggedInUser.UserName = username;
                UserStateService.LoggedInUser.Email = email;
                
                Console.WriteLine($"Logged in as: {username} with email: {email}");
            }
        }

        if (isValid)
        {
            LoginState.IsGoogleLogin = false; // Set flag for normal login
            ErrorMessage = string.Empty;
            Console.WriteLine("Login successful");

            // Get the user ID by username
            var details = DatabaseHelper.GetUserDetails(Identifier);

            // Set the logged-in user's information in the UserStateService
            UserStateService.SetUser(details.Userid, Identifier, details.Email);

            if (RememberMe)
            {
                // Save the credentials if "Remember Me" is checked
                File.WriteAllLines(FilePath, new[] { Identifier, Password });
            }
            else
            {
                // Delete the credentials file if "Remember Me" is unchecked
                if (File.Exists(FilePath))
                {
                    File.Delete(FilePath);
                }
            }

            Navigation.NavigateTo("/dashboard-page");
        }
        else
        {
            ErrorMessage = "Invalid email/username or password.";
        }
    }
}
