@page "/login"
@using Jamper_Financial.Shared.Data
@using Jamper_Financial.Shared.Services
@using Jamper_Financial.Shared.Models
@inject LoginStateService LoginState
@inject UserStateService UserStateService
@inject AuthenticationService AuthenticationService

<div class="login-container">
    <div class="login-left">
        <h1>Stay in charge of your finances!</h1>
        <div class="login-form">
            <h2>JAMPER Finance</h2>
            <form @onsubmit="HandleLoginAsync">
                <label for="email">Username or Email</label>
                <input id="email" type="text" placeholder="Enter your email or username" @bind="Identifier" />

                <label for="password">Password</label>
                <input id="password" type="password" placeholder="********" @bind="Password" />

                <div class="remember-me">
                    <input type="checkbox" id="remember" @bind="RememberMe" />
                    <label for="remember">Remember me</label>
                </div>

                <button type="submit" class="login-button">ðŸ”’ Log in</button>
                @* display error message if any *@
                @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @ErrorMessage
                    </div>
                }

                <a href="#" class="forgot-password">Forgot your password or username?</a>
                <div class="social-login">
                    <button type="button" class="social-button google" @onclick="SignInWithGoogle">Continue using Google</button>
                </div>

                <div class="bottom-buttons">
                    <button type="button" class="back-button" @onclick="NavigateToBannerPage">Back</button>
                    <button type="button" class="create-account-button" @onclick="NavigateToCreateAccount">Create an Account</button>
                </div>
                <p class="terms">Terms & Conditions privacy policy</p>
            </form>
        </div>
    </div>
    <div class="login-right">
        <img src="/images/logo.png" alt="Jamper Logo" />
    </div>
</div>

@code {
    [Inject]
    private NavigationManager Navigation { get; set; } = default!;
    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;

    private UserProfile userProfile = new UserProfile();
    private bool IsGoogleLogin { get; set; } = false;
    private string Identifier { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    private bool RememberMe { get; set; } = false;
    private string Email { get; set; } = string.Empty;
    private string UserName { get; set; } = string.Empty;

    private string FilePath => Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "credentials.txt");

    private DotNetObjectReference<LoginPage>? _objectReference;

    protected override void OnInitialized()
    {
        if (File.Exists(FilePath))
        {
            var lines = File.ReadAllLines(FilePath);
            if (lines.Length == 2)
            {
                Identifier = lines[0];
                Password = lines[1];
                RememberMe = true;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objectReference = DotNetObjectReference.Create(this);
        }
    }

    private void NavigateToCreateAccount()
    {
        Navigation.NavigateTo("/create-account");
    }

    private void NavigateToBannerPage()
    {
        Navigation.NavigateTo("/");
    }

    private async Task SignInWithGoogle()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("signInWithGoogle", _objectReference);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Google sign-in failed: {ex.Message}";
        }
    }

    [JSInvokable]
    public async Task OnGoogleLoginSuccess(UserInfo userInfo)
    {
        Console.WriteLine("Google login successful");
        var displayName = userInfo.DisplayName ?? string.Empty;
        var email = userInfo.Email ?? string.Empty;
        var photoURL = userInfo.PhotoURL ?? string.Empty;
        var uid = userInfo.Uid ?? string.Empty;

        Console.WriteLine($"Google login successful: {displayName}, {email}, {photoURL}, {uid}");

        var userExists = DatabaseHelper.IsUsernameTaken(displayName) || DatabaseHelper.IsEmailTaken(email);

        if (!userExists)
        {
            var user = new User
                {
                    Username = displayName,
                    Email = email,
                    Password = string.Empty,
                    IsGoogleSignIn = 1
                };

            var userProfile = new UserProfile
                {
                    FirstName = displayName.Split(' ')[0],
                    LastName = displayName.Split(' ').Length > 1 ? displayName.Split(' ')[1] : string.Empty,
                    Email = email,
                    Username = displayName
                };

            AuthenticationService.CreateUserAccount(user, userProfile);

            UserStateService.SetUser(userProfile.UserId, userProfile.Username ?? string.Empty, userProfile.Email ?? string.Empty);
        }
        else
        {
            var details = DatabaseHelper.GetUserDetails(email);
            UserStateService.SetUser(details.Userid, details.Username ?? string.Empty, details.Email ?? string.Empty);
        }

        Navigation.NavigateTo("/dashboard-page");

        await Task.CompletedTask;
    }

    [JSInvokable("OnGoogleLoginFailure")]
    public async Task OnGoogleLoginFailure(string errorMessage)
    {
        Console.WriteLine($"Google login failed: {errorMessage}");
    }

    private async Task HandleLoginAsync()
    {
        if (string.IsNullOrWhiteSpace(Identifier) || string.IsNullOrWhiteSpace(Password))
        {
            ErrorMessage = "Please enter your email/username and password.";
            return;
        }

        var isValid = await Task.Run(() => AuthenticationService.ValidateUserCredentials(Identifier, Password));
        if (isValid)
        {
            var (userid, username, email) = await Task.Run(() => DatabaseHelper.GetUserDetails(Identifier));

            if (username != null && email != null)
            {
                UserStateService.LoggedInUser.UserName = username;
                UserStateService.LoggedInUser.Email = email;

                Console.WriteLine($"Logged in as: {username} with email: {email}");
            }
        }

        if (isValid)
        {
            LoginState.IsGoogleLogin = false;
            ErrorMessage = string.Empty;
            Console.WriteLine("Login successful");

            var details = await Task.Run(() => DatabaseHelper.GetUserDetails(Identifier));
            UserStateService.SetUser(details.Userid, Identifier, details.Email);

            if (RememberMe)
            {
                await Task.Run(() => File.WriteAllLines(FilePath, new[] { Identifier, Password }));
            }
            else
            {
                if (File.Exists(FilePath))
                {
                    await Task.Run(() => File.Delete(FilePath));
                }
            }

            Navigation.NavigateTo("/dashboard-page");
        }
        else
        {
            ErrorMessage = "Invalid email/username or password.";
        }
    }
}
