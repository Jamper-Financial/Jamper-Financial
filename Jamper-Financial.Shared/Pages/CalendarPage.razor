@page "/calendar-page"
@using System.Globalization
@using Jamper_Financial.Shared.Data
@using Jamper_Financial.Shared.Utilities
@using Jamper_Financial.Shared.Pages.Components;
@using Jamper_Financial.Shared.Models
@using Jamper_Financial.Shared.Services

@inject SearchService SearchService
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService
@inject IAccountService AccountService

@code {
    [CascadingParameter] private Action<string> SetPageTitle { get; set; }

    protected override void OnInitialized()
    {
        SetPageTitle("Calendar");
    }
}

<div class="calendar-page">
    <!-- Header Section -->
    <div class="header">
        <div class="sort-filter">
            <select @onchange="HandleSortChange" class="sort-button">
                <option value="" selected>Sort By</option>
                <option value="DateAsc">Date Ascending</option>
                <option value="DateDesc">Date Descending</option>
                <option value="CategoryAsc">Category Ascending</option>
                <option value="CategoryDesc">Category Descending</option>
                <option value="AmountAsc">Amount Ascending</option>
                <option value="AmountDesc">Amount Descending</option>
                <option value="DescriptionAsc">Description Ascending</option>
                <option value="DescriptionDesc">Description Descending</option>
            </select>
            <button class="filter-button" @onclick="OpenFilterModal">Filter</button>
        </div>
        <div style="display: flex; gap: 10px;">
            <button class="new-transaction" @onclick="OpenAddTransactionModal">+ Add Transaction</button>
        </div>
    </div>

    <!-- Main Content Section -->
    <div class="main-content">
        <!-- Calendar Section -->
        <div class="calendar-container">
            <h3>Calendar</h3>
            <div class="calendar-header">
                <button class="month-nav" @onclick="PreviousMonth">←</button>
                <div>
                    <select @bind="SelectedMonth">
                        @for (int i = 1; i <= 12; i++)
                        {
                            <option value="@i">@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i)</option>
                        }
                    </select>
                    <select @bind="SelectedYear">
                        @for (int year = 2020; year <= 2030; year++)
                        {
                            <option value="@year">@year</option>
                        }
                    </select>
                </div>
                <button class="month-nav" @onclick="NextMonth">→</button>
            </div>

            <div class="calendar">
                @foreach (var date in GetCalendarDates())
                {
                    <div class="day-box @(date.Month != SelectedMonth ? "greyed-out" : "") @(SelectedDate == date.Day && date.Month == SelectedMonth ? "selected" : "")"
                    @onclick="() => SelectDate(date)">
                        <span class="day">@date.Day</span>
                        @if (FilteredTransactions.Any(t => t.Date.Date == date.Date))
                        {
                            <div class="transaction-dots">
                                @foreach (var transaction in (SelectedDate != 0 ? SelectedDateTransactions : FilteredTransactions).Where(t => t.Date.Date == date.Date))
                                {
                                    <div class="transaction-dot-container">
                                        <span class="transaction-dot" style="background-color: @(Categories.FirstOrDefault(c => c.CategoryID == transaction.CategoryID)?.Color ?? "#000000");"></span>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Transaction Details Section -->
        <div class="transaction-details">
            <h3 class="transaction-details-header">
                Upcoming Payments
            </h3>
            @if (FilteredTransactions.Any())
            {
                @foreach (var transaction in (SelectedDate != 0 ? SelectedDateTransactions : FilteredTransactions))
                {
                    <div class="transaction-item @(transaction.Date.Day == SelectedDate ? "selected-transaction" : "")" @onclick="() => ShowEditTransactionModal(transaction)">
                        <h4 class="description" style="color: @(Categories.FirstOrDefault(c => c.CategoryID == transaction.CategoryID)?.Color ?? "#000000");">
                            @transaction.Description
                        </h4>
                        <p>@(Categories.FirstOrDefault(c => c.CategoryID == transaction.CategoryID)?.Name ?? "Unknown")</p>

                        <p class="@(transaction.TransactionType == "e" ? "negative-amount" : "positive-amount")">
                            @(transaction.Amount > 0 ? "-" : "+")@((transaction.Amount > 0 ? transaction.Amount : transaction.Amount).ToString("C"))
                        </p>
                        <p>@transaction.Date.ToString("d")</p>
                        <p>Frequency: @(string.IsNullOrEmpty(transaction.Frequency) ? "None" : transaction.Frequency)</p>
                        @if (transaction.EndDate.HasValue)
                        {
                            <p>End Date: @transaction.EndDate.Value.ToString("d")</p>
                        }
                    </div>
                }
            }
            else
            {
                <p>No transactions for this month.</p>
            }
        </div>
    </div>

    <!-- Add/Edit Transaction Modal -->
    @if (ShowAddTransactionModal)
    {
        <TransactionModal IsVisible="ShowAddTransactionModal"
        IsEditMode="IsEditMode"
        NewTransaction="NewTransaction"
        Categories="Categories"
        Accounts="Accounts"
        OnClose="CloseAddTransactionModal"
        OnSave="HandleAddOrEditTransaction"
        OnDelete="ShowDeleteConfirmationForm"
        OnConfirmDelete="ConfirmDeleteTransaction" />
    }

    <!-- Filter Modal -->
    @if (ShowFilterModal)
    {
        <FilterModal ShowFilterDropdown="ShowFilterModal"
        Categories="Categories"
        Accounts="Accounts"
        Transactions="Transactions"
        OnFilteredTransactionsChanged="HandleFilteredTransactionsChanged"
        OnCloseFilterDropdown="CloseFilterModal" />
    }
</div>

@code {
    // Calendar State
    public int SelectedMonth { get; set; } = DateTime.Now.Month;
    public int SelectedYear { get; set; } = DateTime.Now.Year;
    public int SelectedDate { get; set; } = 0;

    // Transactions State
    public List<Transaction> Transactions { get; set; } = new();
    public List<Transaction> FilteredTransactions { get; set; } = new();
    public List<Transaction> SelectedDateTransactions { get; set; } = new();

    // Categories State
    public List<Category> Categories { get; set; } = new();
    public List<BankAccount> Accounts { get; set; } = new();

    // Add/Edit Transaction Modal State
    public bool ShowAddTransactionModal { get; set; } = false;
    public bool IsEditMode { get; set; } = false;
    public bool ShowDeleteConfirmation { get; set; } = false;
    public Transaction NewTransaction { get; set; } = new Transaction();

    // Filter Modal State
    public bool ShowFilterModal { get; set; } = false;

    // Load Transactions Data
    protected override async Task OnInitializedAsync()
    {
        Transactions = (await TransactionManager.LoadTransactionsAsync(UserStateService.UserId)).ToList();
        Categories = (await DatabaseHelper.LoadUserCategoriesAsync(UserStateService.UserId)).ToList();
        Accounts = await AccountService.GetBankAccounts(UserStateService.UserId);
        HandleFilteredTransactionsChanged(Transactions);
        SortTransactions("Date", true); // Ensure default sort is by Date ascending
        SearchService.OnSearchQueryChanged += SearchTransactions;
    }

    public void Dispose()
    {
        SearchService.OnSearchQueryChanged -= SearchTransactions; // Unsubscribe to avoid memory leaks
    }

    private void SearchTransactions()
    {
        if (string.IsNullOrEmpty(SearchService.SearchQuery))
        {
            // Reset to show all transactions if the search query is empty
            HandleFilteredTransactionsChanged(Transactions);
        }
        else
        {
            // Filter transactions based on the search query
            FilteredTransactions = Transactions
                .Where(t => t.Description.Contains(SearchService.SearchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        StateHasChanged(); // Re-render the UI
    }

    private void HandleFilteredTransactionsChanged(List<Transaction> FilteredTransactions)
    {
        this.FilteredTransactions = FilteredTransactions
            .Where(t => t.Date.Month == SelectedMonth && t.Date.Year == SelectedYear)
            .ToList();

        ReapplySort();
        StateHasChanged();
    }

    // Calendar Navigation Methods
    private void PreviousMonth()
    {
        if (SelectedMonth == 1)
        {
            SelectedMonth = 12;
            SelectedYear--;
        }
        else
        {
            SelectedMonth--;
        }
        SelectedDate = 0;
        HandleFilteredTransactionsChanged(Transactions);
    }

    private void NextMonth()
    {
        if (SelectedMonth == 12)
        {
            SelectedMonth = 1;
            SelectedYear++;
        }
        else
        {
            SelectedMonth++;
        }
        SelectedDate = 0;
        HandleFilteredTransactionsChanged(Transactions);
    }

    private IEnumerable<DateTime> GetCalendarDates()
    {
        var firstDayOfMonth = new DateTime(SelectedYear, SelectedMonth, 1);
        var lastDayOfMonth = new DateTime(SelectedYear, SelectedMonth, DateTime.DaysInMonth(SelectedYear, SelectedMonth));

        var firstDayOfCalendar = firstDayOfMonth.AddDays(-(int)firstDayOfMonth.DayOfWeek);
        var lastDayOfCalendar = lastDayOfMonth.AddDays(6 - (int)lastDayOfMonth.DayOfWeek);

        for (var date = firstDayOfCalendar; date <= lastDayOfCalendar; date = date.AddDays(1))
        {
            yield return date;
        }
    }

    private void SelectDate(DateTime date)
    {
        if (date.Month == SelectedMonth)
        {
            if (SelectedDate == date.Day)
            {
                // Unselect the date if it's already selected
                SelectedDate = 0;
                SelectedDateTransactions = FilteredTransactions
                    .Where(t => t.Date.Month == SelectedMonth && t.Date.Year == SelectedYear)
                    .ToList();
            }
            else
            {
                // Select the date
                SelectedDate = date.Day;
                SelectedDateTransactions = FilteredTransactions
                    .Where(t => t.Date.Month == SelectedMonth && t.Date.Year == SelectedYear && t.Date.Day == SelectedDate)
                    .ToList();
            }
        }
    }

    // Sorting Methods
    private string SortOption { get; set; } = "DateAsc"; // Default sort option

    private void HandleSortChange(ChangeEventArgs e)
    {
        SortOption = e.Value.ToString();
        switch (SortOption)
        {
            case "DateAsc":
                SortTransactions("Date", true);
                break;
            case "DateDesc":
                SortTransactions("Date", false);
                break;
            case "CategoryAsc":
                SortTransactions("CategoryName", true);
                break;
            case "CategoryDesc":
                SortTransactions("CategoryName", false);
                break;
            case "AmountAsc":
                SortTransactions("Amount", true);
                break;
            case "AmountDesc":
                SortTransactions("Amount", false);
                break;
            case "DescriptionAsc":
                SortTransactions("Description", true);
                break;
            case "DescriptionDesc":
                SortTransactions("Description", false);
                break;
        }
    }

    private void SortTransactions(string sortBy, bool ascending)
    {
        FilteredTransactions = Sort.ApplySort(FilteredTransactions, sortBy, ascending, Categories, Accounts);
        StateHasChanged();
    }

    private void ReapplySort()
    {
        switch (SortOption)
        {
            case "DateAsc":
                SortTransactions("Date", true);
                break;
            case "DateDesc":
                SortTransactions("Date", false);
                break;
            case "CategoryAsc":
                SortTransactions("CategoryName", true);
                break;
            case "CategoryDesc":
                SortTransactions("CategoryName", false);
                break;
            case "AmountAsc":
                SortTransactions("Amount", true);
                break;
            case "AmountDesc":
                SortTransactions("Amount", false);
                break;
            case "DescriptionAsc":
                SortTransactions("Description", true);
                break;
            case "DescriptionDesc":
                SortTransactions("Description", false);
                break;
        }
    }

    // Add/Edit Transaction Logic
    private void OpenAddTransactionModal()
    {
        NewTransaction = new Transaction
            {
                Date = SelectedDate != 0 ? new DateTime(SelectedYear, SelectedMonth, SelectedDate) : DateTime.Now,
                Description = string.Empty,
                CategoryID = 0,
                Amount = 0,
                Frequency = "None",
                EndDate = SelectedDate != 0 ? new DateTime(SelectedYear, SelectedMonth, SelectedDate) : DateTime.Now,
                UserID = UserStateService.UserId
            };
        IsEditMode = false;
        ShowDeleteConfirmation = false;
        ShowAddTransactionModal = true;
    }

    private void ShowEditTransactionModal(Transaction transaction)
    {
        NewTransaction = transaction;
        IsEditMode = true;
        ShowDeleteConfirmation = false;
        ShowAddTransactionModal = true;
        if (string.IsNullOrEmpty(NewTransaction.Frequency))
        {
            NewTransaction.Frequency = "None";
        }
    }

    private void CloseAddTransactionModal()
    {
        ShowAddTransactionModal = false;
    }

    private async Task HandleAddOrEditTransaction()
    {
        await TransactionManager.AddOrUpdateTransactionAsync(NewTransaction, IsEditMode);
        Transactions = (await TransactionManager.LoadTransactionsAsync(UserStateService.UserId)).ToList();
        CloseAddTransactionModal();
        HandleFilteredTransactionsChanged(Transactions);
    }

    private void ShowDeleteConfirmationForm()
    {
        ShowDeleteConfirmation = true;
    }

    private void CancelDeleteTransaction()
    {
        ShowDeleteConfirmation = false;
    }

    private async Task ConfirmDeleteTransaction(bool deleteAll)
    {
        if (deleteAll)
        {
            await TransactionManager.DeleteRecurringTransactionsAsync(NewTransaction);
            Transactions.RemoveAll(t => t.Description == NewTransaction.Description &&
                                        t.CategoryID == NewTransaction.CategoryID &&
                                        t.Frequency == NewTransaction.Frequency &&
                                        t.Date > NewTransaction.Date);
        }
        else
        {
            await TransactionManager.DeleteTransactionAsync(NewTransaction);
            Transactions.RemoveAll(t => t.TransactionID == NewTransaction.TransactionID);
        }
        CloseAddTransactionModal();
        HandleFilteredTransactionsChanged(Transactions);
    }

    // Filter Modal Logic
    private void OpenFilterModal()
    {
        ShowFilterModal = true;
    }

    private void CloseFilterModal()
    {
        ShowFilterModal = false;
    }
}
