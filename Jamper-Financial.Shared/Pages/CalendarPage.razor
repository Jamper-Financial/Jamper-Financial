@page "/calendar-page"
@using System.Globalization
@using Jamper_Financial.Shared.Data
@using Jamper_Financial.Shared.Utilities
@using Jamper_Financial.Shared.Models
@using Jamper_Financial.Shared.Services

@inject NavigationManager NavigationManager  
@inject UserStateService UserStateService 

@code {
    [CascadingParameter] private Action<string> SetPageTitle { get; set; }

    protected override void OnInitialized()
    {
        SetPageTitle("Calendar");
    }
}

<div class="calendar-page">
    <!-- Header Section -->
    <div class="header">
        <div class="sort-container">
            <div class="sort-button">
                <select @onchange="HandleSortChange" class="border-0">
                    <option value="" selected>Sort By</option>
                    <option value="DateAsc">Date Ascending</option>
                    <option value="DateDesc">Date Descending</option>
                    <option value="CategoryAsc">Category Ascending</option>
                    <option value="CategoryDesc">Category Descending</option>
                    <option value="AmountAsc">Amount Ascending</option>
                    <option value="AmountDesc">Amount Descending</option>
                    <option value="DescriptionAsc">Description Ascending</option>
                    <option value="DescriptionDesc">Description Descending</option>
                </select>
            </div>
            <button class="filter-button" @onclick="ToggleFilterDropdown">Filter</button>
            <!-- Filter Dropdown -->
            @if (ShowFilterDropdown)
            {
                <div class="filter-dropdown">
                    <h3>Filter Transactions</h3>
                    <div class="form-group">
                        <label for="filterCategory">Category:</label>
                        <select id="filterCategory" @bind="TempFilterCategory">
                            <option value="">All</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category.CategoryID">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="form-group amount-filter">
                        <div>
                            <label for="minAmount">Min Amount:</label>
                            <input id="minAmount" type="number" @bind="TempMinAmount" />
                        </div>
                        <div>
                            <label for="maxAmount">Max Amount:</label>
                            <input id="maxAmount" type="number" @bind="TempMaxAmount" />
                        </div>
                    </div>
                    <div class="form-group button-group">
                        <button type="button" class="cancel" @onclick="CloseFilterDropdown">Cancel</button>
                        <button type="button" class="apply" @onclick="ApplyFilters">Apply</button>
                    </div>
                </div>
            }
        </div>
        <div style="display: flex; gap: 10px;">
            <button class="new-transaction" @onclick="OpenAddTransactionModal">+ Add Transaction</button>
            <button class="manage-categories" @onclick="NavigateToManageCategories">Manage Categories</button>  
        </div>
    </div>

    <!-- Main Content Section -->
    <div class="main-content">
        <!-- Calendar Section -->

        <div class="calendar-container">
            <h3>Calendar</h3>
            <div class="calendar-header">
                <button class="month-nav" @onclick="PreviousMonth">←</button>
                <div>
                    <select @bind="SelectedMonth">
                        @for (int i = 1; i <= 12; i++)
                        {
                            <option value="@i">@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i)</option>
                        }
                    </select>
                    <select @bind="SelectedYear">
                        @for (int year = 2020; year <= 2030; year++)
                        {
                            <option value="@year">@year</option>
                        }
                    </select>
                </div>
                <button class="month-nav" @onclick="NextMonth">→</button>
            </div>

            <div class="calendar">
                @foreach (var date in GetCalendarDates())
                {
                    <div class="day-box @(date.Month != SelectedMonth ? "greyed-out" : "") @(SelectedDate == date.Day && date.Month == SelectedMonth ? "selected" : "")"
                         @onclick="() => SelectDate(date)">
                        <span class="day">@date.Day</span>
                        @if (HasTransactions(date))
                        {
                            <div class="transaction-dots">
                                @foreach (var transaction in GetTransactions(date))
                                {
                                    <div class="transaction-dot-container">
                                        <span class="transaction-dot" style="background-color: @(Categories.FirstOrDefault(c => c.CategoryID == transaction.CategoryID)?.Color ?? "#000000");"></span>
                                        @* <span class="transaction-description">@transaction.Description</span> *@
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Transaction Details Section -->
        <div class="transaction-details">
            <h3 class="transaction-details-header">
                Upcoming Payments
                @* 
                        //remove this for now to make the page not crowded
                    <div class="transaction-date"> *@
                @*     <strong>@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(SelectedMonth) @SelectedYear</strong> *@
                @* </div> *@
            </h3>
            @if (FilteredTransactionsForSelectedMonth.Any())
            {
                @foreach (var transaction in FilteredTransactionsForSelectedMonth)
                {
                    <div class="transaction-item @(transaction.Date.Day == SelectedDate ? "selected-transaction" : "")" @onclick="() => ShowEditTransactionModal(transaction)">
                        <h4 class="description" style="color: @(Categories.FirstOrDefault(c => c.CategoryID == transaction.CategoryID)?.Color ?? "#000000");">
                            @transaction.Description
                        </h4>
                        <p>@(Categories.FirstOrDefault(c => c.CategoryID == transaction.CategoryID)?.Name ?? "Unknown")</p>

                        <p class="@(transaction.TransactionType == "e" ? "negative-amount" : "positive-amount")">
                            @(transaction.Amount > 0 ? "-" : "+")@((transaction.Amount > 0 ? transaction.Amount : transaction.Amount).ToString("C"))
                        </p>
                        <p>@transaction.Date.ToString("d")</p>
                        <p>Frequency: @(string.IsNullOrEmpty(transaction.Frequency) ? "None" : transaction.Frequency)</p>
                        @if (transaction.EndDate.HasValue)
                        {
                            <p>End Date: @transaction.EndDate.Value.ToString("d")</p>
                        }
                        @* <button @onclick="() => ShowEditTransactionModal(transaction)">Edit</button> 
                            //remove this for now to make the page not crowded
                        *@
                    </div>
                }
            }
            else
            {
                <p>No transactions for this month.</p>
            }
        </div>
    </div>

    <!-- Add/Edit Transaction Modal -->
    @if (ShowAddTransactionModal)
    {
        <div class="modal">
            <div class="modal-content">
                @if (ShowDeleteConfirmation)
                {
                    @if (NewTransaction.Frequency != "None")
                    {
                        <h3>Confirm Deletion</h3>
                        <p>This transaction is recurring. Do you want to delete all occurrences or just this one?</p>
                        <div class="form-group button-group">
                            <button type="button" class="save" @onclick="() => ConfirmDeleteTransaction(true)">Delete All</button>
                            <button type="button" class="save" @onclick="() => ConfirmDeleteTransaction(false)">Delete This One</button>
                            <button type="button" class="cancel" @onclick="CancelDeleteTransaction">Cancel</button>
                        </div>
                    }
                    else
                    {
                        <h3>Confirm Deletion</h3>
                        <p>Are you sure you want to delete this transaction?</p>
                        <div class="form-group button-group">
                            <button type="button" class="save" @onclick="() => ConfirmDeleteTransaction(false)">Confirm</button>
                            <button type="button" class="cancel" @onclick="CancelDeleteTransaction">Cancel</button>
                        </div>
                    }
                }
                else
                {
                    <h3>@(IsEditMode ? "Edit Transaction" : "Add Transaction")</h3>
                    <form @onsubmit="HandleAddOrEditTransaction">
                        <div class="form-group">
                            <label for="description">Description:</label>
                            <input id="description" @bind="NewTransaction.Description" required />
                        </div>
                        <div class="form-group">
                            <label for="category">Category:</label>
                            <select id="category" @bind="NewTransaction.CategoryID" required>
                                <option value="">Select Category</option>
                                @foreach (var category in Categories)
                                {
                                    <option value="@category.CategoryID">@category.Name</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="amount">Amount:</label>
                            <input id="amount" type="number" step="0.01" @bind="Amount" required />
                        </div>
                        <div class="form-group">
                            <label for="transactionDate">Transaction Date:</label>
                            <input id="transactionDate" type="date" @bind="NewTransaction.Date" required />
                        </div>
                        <div class="form-group">
                            <label for="frequency">Frequency:</label>
                            <select id="frequency" @bind="NewTransaction.Frequency" @bind:event="onchange" required>
                                <option value="None">None</option>
                                <option value="Monthly">Monthly</option>
                                <option value="Yearly">Yearly</option>
                            </select>
                        </div>
                        @if (NewTransaction.Frequency != "None")
                        {
                            <div class="form-group">
                                <label for="endDate">End Date:</label>
                                <input id="endDate" type="date" @bind="NewTransaction.EndDate" required />
                            </div>
                        }
                        <div class="form-group button-group">
                            @if (IsEditMode)
                            {
                                <button type="button" class="delete" @onclick="ShowDeleteConfirmationForm">Delete</button>
                            }
                            <button type="button" class="cancel" @onclick="CloseAddTransactionModal">Cancel</button>
                            <button type="submit" class="@(IsEditMode ? "save" : "add")">@((IsEditMode ? "Save" : "Add"))</button>
                        </div>
                    </form>
                }
            </div>
        </div>
    }
</div>

@code {
    // Calendar State
    public int SelectedMonth { get; set; } = DateTime.Now.Month;
    public int SelectedYear { get; set; } = DateTime.Now.Year;
    public int SelectedDate { get; set; } = DateTime.Now.Day;

    // Transactions State
    public List<Transaction> Transactions { get; set; } = new();
    public List<Transaction> TransactionsForSelectedMonth { get; set; } = new();
    public List<Transaction> FilteredTransactionsForSelectedMonth { get; set; } = new();

    // Categories State
    public List<Category> Categories { get; set; } = new();

    // Search and Filter State
    public string FilterCategory { get; set; } = string.Empty;
    public double? MinAmount { get; set; } = null;
    public double? MaxAmount { get; set; } = null;
    public string TempFilterCategory { get; set; } = string.Empty;
    public double? TempMinAmount { get; set; } = null;
    public double? TempMaxAmount { get; set; } = null;

    // Add/Edit Transaction Modal State
    public bool ShowAddTransactionModal { get; set; } = false;
    public bool IsEditMode { get; set; } = false;
    public bool ShowDeleteConfirmation { get; set; } = false;
    public bool ShowFilterDropdown { get; set; } = false;
    public Transaction NewTransaction { get; set; } = new Transaction();
    public decimal Amount { get; set; } = 0;

    private void NavigateToManageCategories()
    {
        NavigationManager.NavigateTo("/manage-categories");
    }


    // Load Transactions Data
    protected override async Task OnInitializedAsync()
    {
        Transactions = (await TransactionManager.LoadTransactionsAsync(UserStateService.UserId)).ToList();
        Categories = (await DatabaseHelper.LoadUserCategoriesAsync(UserStateService.UserId)).ToList();
        UpdateTransactionsForSelectedMonth();
        SortTransactions("Date", true); // Ensure default sort is by Date ascending
    }

    private void ToggleFilterDropdown() => ShowFilterDropdown = !ShowFilterDropdown;

    private void CloseFilterDropdown()
    {
        ShowFilterDropdown = false;
    }

    private void ApplyFilters()
    {
        FilterCategory = TempFilterCategory;
        MinAmount = TempMinAmount;
        MaxAmount = TempMaxAmount;
        UpdateFilteredTransactionsForSelectedMonth();
        CloseFilterDropdown();
    }

    private void UpdateFilteredTransactionsForSelectedMonth()
    {
        FilteredTransactionsForSelectedMonth = Filters.ApplyFilters(TransactionsForSelectedMonth, FilterCategory, MinAmount, MaxAmount);
        ReapplySort();
        StateHasChanged();
    }

    // Calendar Navigation Methods
    private void PreviousMonth()
    {
        if (SelectedMonth == 1)
        {
            SelectedMonth = 12;
            SelectedYear--;
        }
        else
        {
            SelectedMonth--;
        }
        UpdateTransactionsForSelectedMonth();
    }

    private void NextMonth()
    {
        if (SelectedMonth == 12)
        {
            SelectedMonth = 1;
            SelectedYear++;
        }
        else
        {
            SelectedMonth++;
        }
        UpdateTransactionsForSelectedMonth();
    }

    private IEnumerable<DateTime> GetCalendarDates()
    {
        var firstDayOfMonth = new DateTime(SelectedYear, SelectedMonth, 1);
        var lastDayOfMonth = new DateTime(SelectedYear, SelectedMonth, DateTime.DaysInMonth(SelectedYear, SelectedMonth));

        var firstDayOfCalendar = firstDayOfMonth.AddDays(-(int)firstDayOfMonth.DayOfWeek);
        var lastDayOfCalendar = lastDayOfMonth.AddDays(6 - (int)lastDayOfMonth.DayOfWeek);

        for (var date = firstDayOfCalendar; date <= lastDayOfCalendar; date = date.AddDays(1))
        {
            yield return date;
        }
    }

    private void SelectDate(DateTime date)
    {
        if (date.Month == SelectedMonth)
        {
            if (SelectedDate == date.Day)
            {
                // Unselect the date if it is already selected
                SelectedDate = 0;
                UpdateFilteredTransactionsForSelectedMonth();
            }
            else
            {
                // Select the date
                SelectedDate = date.Day;
                FilteredTransactionsForSelectedMonth = TransactionsForSelectedMonth
                    .Where(t => t.Date.Day == SelectedDate)
                    .ToList();
            }
            StateHasChanged();
        }
    }

    private bool HasTransactions(DateTime date) =>
        GetFilteredTransactions(date).Any();

    private List<Transaction> GetTransactions(DateTime date) =>
        GetFilteredTransactions(date);

    private List<Transaction> GetFilteredTransactions(DateTime date) =>
        Filters.ApplyFilters(Transactions.Where(t => t.Date.Date == date.Date).ToList(), FilterCategory, MinAmount, MaxAmount);


    private void UpdateTransactionsForSelectedMonth()
    {
        TransactionsForSelectedMonth = Transactions
            .Where(t => t.Date.Month == SelectedMonth && t.Date.Year == SelectedYear)
            .ToList();
        UpdateFilteredTransactionsForSelectedMonth();
        ReapplySort();
    }

    // Sorting Methods
    private string SortOption { get; set; } = "DateAsc"; // Default sort option

    private void HandleSortChange(ChangeEventArgs e)
    {
        SortOption = e.Value.ToString();
        switch (SortOption)
        {
            case "DateAsc":
                SortTransactions("Date", true);
                break;
            case "DateDesc":
                SortTransactions("Date", false);
                break;
            case "CategoryAsc":
                SortTransactions("Category", true);
                break;
            case "CategoryDesc":
                SortTransactions("Category", false);
                break;
            case "AmountAsc":
                SortTransactions("Amount", true);
                break;
            case "AmountDesc":
                SortTransactions("Amount", false);
                break;
            case "DescriptionAsc":
                SortTransactions("Description", true);
                break;
            case "DescriptionDesc":
                SortTransactions("Description", false);
                break;
        }
    }

    private void SortTransactions(string sortBy, bool ascending)
    {
        FilteredTransactionsForSelectedMonth = Sort.ApplySort(FilteredTransactionsForSelectedMonth, sortBy, ascending);
        StateHasChanged();
    }

    private void ReapplySort()
    {
        switch (SortOption)
        {
            case "DateAsc":
                SortTransactions("Date", true);
                break;
            case "DateDesc":
                SortTransactions("Date", false);
                break;
            case "CategoryAsc":
                SortTransactions("Category", true);
                break;
            case "CategoryDesc":
                SortTransactions("Category", false);
                break;
            case "AmountAsc":
                SortTransactions("Amount", true);
                break;
            case "AmountDesc":
                SortTransactions("Amount", false);
                break;
            case "DescriptionAsc":
                SortTransactions("Description", true);
                break;
            case "DescriptionDesc":
                SortTransactions("Description", false);
                break;
        }
    }

    // Add/Edit Transaction Logic
    private void OpenAddTransactionModal()
    {
        NewTransaction = new Transaction
            {
                Date = SelectedDate != 0 ? new DateTime(SelectedYear, SelectedMonth, SelectedDate) : DateTime.Now,
                Description = string.Empty,
                CategoryID = 0,
                Amount = 0,
                Frequency = "None",
                EndDate = SelectedDate != 0 ? new DateTime(SelectedYear, SelectedMonth, SelectedDate) : DateTime.Now,
                UserID = UserStateService.UserId
            };
        IsEditMode = false;
        ShowDeleteConfirmation = false;
        ShowAddTransactionModal = true;
    }

    private void ShowEditTransactionModal(Transaction transaction)
    {
        NewTransaction = transaction;
        Amount = transaction.Amount > 0 ? transaction.Amount : transaction.Amount;
        IsEditMode = true;
        ShowDeleteConfirmation = false;
        ShowAddTransactionModal = true;
        if (string.IsNullOrEmpty(NewTransaction.Frequency))
        {
            NewTransaction.Frequency = "None";
        }
    }

    private void CloseAddTransactionModal()
    {
        ShowAddTransactionModal = false;
    }

    private async Task HandleAddOrEditTransaction()
    {
        NewTransaction.Amount = Amount;
        await TransactionManager.AddOrUpdateTransactionAsync(NewTransaction, IsEditMode);
        Transactions = (await TransactionManager.LoadTransactionsAsync(UserStateService.UserId)).ToList();
        CloseAddTransactionModal();
        UpdateTransactionsForSelectedMonth();
        ReapplySort();
    }

    private void ShowDeleteConfirmationForm()
    {
        ShowDeleteConfirmation = true;
    }

    private void CancelDeleteTransaction()
    {
        ShowDeleteConfirmation = false;
    }

    private async Task ConfirmDeleteTransaction(bool deleteAll)
    {
        if (deleteAll)
        {
            await TransactionManager.DeleteRecurringTransactionsAsync(NewTransaction);
            Transactions.RemoveAll(t => t.Description == NewTransaction.Description &&
                                        t.CategoryID == NewTransaction.CategoryID &&
                                        t.Frequency == NewTransaction.Frequency &&
                                        t.Date > NewTransaction.Date);
        }
        else
        {
            await TransactionManager.DeleteTransactionAsync(NewTransaction);
            Transactions.RemoveAll(t => t.TransactionID == NewTransaction.TransactionID);
        }
        CloseAddTransactionModal();
        UpdateTransactionsForSelectedMonth();
    }
}