@inherits LayoutComponentBase
@inject NavigationManager Navigation
@using Jamper_Financial.Shared.Services;
@inject IJSRuntime JSRuntime

@code {
    [CascadingParameter] private Action<bool>? LoadBlazoriseScripts { get; set; }

    private bool ShouldShowMenus => !Navigation.Uri.Contains("/login") && !Navigation.Uri.EndsWith("/") &&
    !Navigation.Uri.Contains("/create-account") && !Navigation.Uri.Contains("/verify-email");

    private string pageTitle = "Overview";
    private bool isMenuOpen = false; // Track the state of the menu
    private int ScreenWidth { get; set; }

    protected override void OnInitialized()
    {
        LoadBlazoriseScripts?.Invoke(false);
    }

    public void SetPageTitle(string title)
    {
        pageTitle = title;
        StateHasChanged();
    }

    private void ToggleMenu()
    {
        isMenuOpen = !isMenuOpen;
    }

    [JSInvokable]
    public void SetScreenWidth(int width)
    {
        ScreenWidth = width;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setScreenWidthForBlazor", DotNetObjectReference.Create(this));
        }
    }

    private string GetSidebarStyle()
    {
        return (isMenuOpen || ScreenWidth >= 641) ? "display: block;" : "display: none;";
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("removeResizeListener");
    }
}

<CascadingValue Value="pageTitle">
    <CascadingValue Value="(Action<string>)SetPageTitle">
        <div class="page">
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
            <script src="js/chart-interop.js"></script>

            <div class="page-container">
                <div class="layout">
                    @if (ShouldShowMenus)
                    {
                        <button class="navbar-toggler" @onclick="ToggleMenu">
                            @if (isMenuOpen)
                            {
                                <span class="close-icon">X</span>
                            }
                            else
                            {
                                <span class="hamburger-icon">☰</span>
                            }
                        </button>
                        <aside class="sidebar @(isMenuOpen ? "open" : "")" style="@GetSidebarStyle()">
                            <NavMenu />
                        </aside>
                    }
                    <main class="main-content">
                        @if (ShouldShowMenus)
                        {
                            <header class="header">
                                <HeaderMenu />
                            </header>
                        }

                        <article class="article-content">
                            @Body
                        </article>
                    </main>
                </div>
            </div>
        </div>
    </CascadingValue>
</CascadingValue>
